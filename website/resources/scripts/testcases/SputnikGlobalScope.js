this.GlobalScopeTests = this.GlobalScopeTests || new Array();
GlobalScopeTests["S7.2_A5_T1"]={"assertion":"White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Use TAB (U+0009)","id":"S7.2_A5_T1","path":"07_Lexical_Conventions\\7.2_White_Space\\S7.2_A5_T1.js","negative":"."};
GlobalScopeTests["S7.2_A5_T2"]={"assertion":"White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Use VERTICAL TAB (U+000B)","id":"S7.2_A5_T2","path":"07_Lexical_Conventions\\7.2_White_Space\\S7.2_A5_T2.js","negative":"."};
GlobalScopeTests["S7.2_A5_T3"]={"assertion":"White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Use FORM FEED (U+000C)","id":"S7.2_A5_T3","path":"07_Lexical_Conventions\\7.2_White_Space\\S7.2_A5_T3.js","negative":"."};
GlobalScopeTests["S7.2_A5_T4"]={"assertion":"White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Use SPACE (U+0020)","id":"S7.2_A5_T4","path":"07_Lexical_Conventions\\7.2_White_Space\\S7.2_A5_T4.js","negative":"."};
GlobalScopeTests["S7.2_A5_T5"]={"assertion":"White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Use NO-BREAK SPACE (U+00A0)","id":"S7.2_A5_T5","path":"07_Lexical_Conventions\\7.2_White_Space\\S7.2_A5_T5.js","negative":"."};
GlobalScopeTests["S7.3_A2.1_T1"]={"assertion":"LINE FEED (U+000A) within strings is not allowed","description":"Insert LINE FEED (\\u000A) into string","id":"S7.3_A2.1_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.1_T1.js","negative":"."};
GlobalScopeTests["S7.3_A2.1_T2"]={"assertion":"LINE FEED (U+000A) within strings is not allowed","description":"Use real LINE FEED into string","id":"S7.3_A2.1_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.1_T2.js","negative":"."};
GlobalScopeTests["S7.3_A2.2_T1"]={"assertion":"CARRIAGE RETURN (U+000D) within strings is not allowed","description":"Insert CARRIAGE RETURN (\\u000D) into string","id":"S7.3_A2.2_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.2_T1.js","negative":"."};
GlobalScopeTests["S7.3_A2.2_T2"]={"assertion":"CARRIAGE RETURN (U+000D) within strings is not allowed","description":"Insert real CARRIAGE RETURN into string","id":"S7.3_A2.2_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.2_T2.js","negative":"."};
GlobalScopeTests["S7.3_A2.3"]={"assertion":"LINE SEPARATOR (U+2028) within strings is not allowed","description":"Insert LINE SEPARATOR (\\u2028) into string","id":"S7.3_A2.3","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.3.js","negative":"."};
GlobalScopeTests["S7.3_A2.4"]={"assertion":"PARAGRAPH SEPARATOR (U+2029) within strings is not allowed","description":"Insert PARAGRAPH SEPARATOR (\\u2029) into string","id":"S7.3_A2.4","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A2.4.js","negative":"."};
GlobalScopeTests["S7.3_A3.1_T1"]={"assertion":"Single line comments can not contain LINE FEED (U+000A) inside","description":"Insert LINE FEED (\\u000A) into single line comment","id":"S7.3_A3.1_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.1_T1.js","negative":"."};
GlobalScopeTests["S7.3_A3.1_T2"]={"assertion":"Single line comments can not contain LINE FEED (U+000A) inside","description":"Insert LINE FEED (\\u000A) into begin of single line comment","id":"S7.3_A3.1_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.1_T2.js","negative":"."};
GlobalScopeTests["S7.3_A3.1_T3"]={"assertion":"Single line comments can not contain LINE FEED (U+000A) inside","description":"Insert real LINE FEED into single line comment","id":"S7.3_A3.1_T3","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.1_T3.js","negative":"."};
GlobalScopeTests["S7.3_A3.2_T1"]={"assertion":"Single line comments can not contain CARRIAGE RETURN (U+000D) inside","description":"Insert CARRIAGE RETURN (\\u000D) into single line comment","id":"S7.3_A3.2_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.2_T1.js","negative":"."};
GlobalScopeTests["S7.3_A3.2_T2"]={"assertion":"Single line comments can not contain CARRIAGE RETURN (U+000D) inside","description":"Insert CARRIAGE RETURN (\\u000D) into begin of single line comment","id":"S7.3_A3.2_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.2_T2.js","negative":"."};
GlobalScopeTests["S7.3_A3.2_T3"]={"assertion":"Single line comments can not contain CARRIAGE RETURN (U+000D) inside","description":"Insert real CARRIAGE RETURN into single line comment","id":"S7.3_A3.2_T3","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.2_T3.js","negative":"."};
GlobalScopeTests["S7.3_A3.3_T1"]={"assertion":"Single line comments can not contain LINE SEPARATOR (U+2028) inside","description":"Insert LINE SEPARATOR (\\u2028) into single line comment","id":"S7.3_A3.3_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.3_T1.js","negative":"."};
GlobalScopeTests["S7.3_A3.3_T2"]={"assertion":"Single line comments can not contain LINE SEPARATOR (U+2028) inside","description":"Insert LINE SEPARATOR (\\u2028) into begin of single line comment","id":"S7.3_A3.3_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.3_T2.js","negative":"."};
GlobalScopeTests["S7.3_A3.4_T1"]={"assertion":"Single line comments can not contain PARAGRAPH SEPARATOR (U+2029) inside","description":"Insert PARAGRAPH SEPARATOR (\\u2029) into single line comment","id":"S7.3_A3.4_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.4_T1.js","negative":"."};
GlobalScopeTests["S7.3_A3.4_T2"]={"assertion":"Single line comments can not contain PARAGRAPH SEPARATOR (U+2029) inside","description":"Insert PARAGRAPH SEPARATOR (\\u2029) into begin of single line comment","id":"S7.3_A3.4_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A3.4_T2.js","negative":"."};
GlobalScopeTests["S7.3_A6_T1"]={"assertion":"Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Insert LINE FEED (U+000A) in var x","id":"S7.3_A6_T1","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A6_T1.js","negative":"."};
GlobalScopeTests["S7.3_A6_T2"]={"assertion":"Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Insert CARRIAGE RETURN (U+000D) in var x","id":"S7.3_A6_T2","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A6_T2.js","negative":"."};
GlobalScopeTests["S7.3_A6_T3"]={"assertion":"Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Insert LINE SEPARATOR (U+2028) in var x","id":"S7.3_A6_T3","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A6_T3.js","negative":"."};
GlobalScopeTests["S7.3_A6_T4"]={"assertion":"Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Insert PARAGRAPH SEPARATOR (U+2029) in var x","id":"S7.3_A6_T4","path":"07_Lexical_Conventions\\7.3_Line_Terminators\\S7.3_A6_T4.js","negative":"."};
GlobalScopeTests["S7.4_A2_T2"]={"assertion":"Correct interpretation of multi line comments","description":"Try use \/*CHECK#1\/. This is not closed multi line comment","id":"S7.4_A2_T2","path":"07_Lexical_Conventions\\7.4_Comments\\S7.4_A2_T2.js","negative":"."};
GlobalScopeTests["S7.4_A3"]={"assertion":"Multi line comments cannot nest","description":"Try use nested comments","id":"S7.4_A3","path":"07_Lexical_Conventions\\7.4_Comments\\S7.4_A3.js","negative":"."};
GlobalScopeTests["S7.4_A4_T1"]={"assertion":"Single and Multi line comments are used together","description":"Try use 2 close comment tags","id":"S7.4_A4_T1","path":"07_Lexical_Conventions\\7.4_Comments\\S7.4_A4_T1.js","negative":"."};
GlobalScopeTests["S7.4_A4_T4"]={"assertion":"Single and Multi line comments are used together","description":"Try to open Multi line comment at the end of Single comment","id":"S7.4_A4_T4","path":"07_Lexical_Conventions\\7.4_Comments\\S7.4_A4_T4.js","negative":"."};
GlobalScopeTests["S7.5.1_A1.1"]={"assertion":"The \"null\" token can not be used as identifier","description":"Checking if execution of \"null = 1\" fails","id":"S7.5.1_A1.1","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.1_Reserved_Words\\S7.5.1_A1.1.js","negative":"."};
GlobalScopeTests["S7.5.1_A1.2"]={"assertion":"The \"true\" token can not be used as identifier","description":"Checking if execution of \"true=1\" fails","id":"S7.5.1_A1.2","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.1_Reserved_Words\\S7.5.1_A1.2.js","negative":"."};
GlobalScopeTests["S7.5.1_A1.3"]={"assertion":"The \"false\" token can not be used as identifier","description":"Checking if execution of \"false=1\" fails","id":"S7.5.1_A1.3","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.1_Reserved_Words\\S7.5.1_A1.3.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.1"]={"assertion":"The \"break\" token can not be used as identifier","description":"Checking if execution of \"break=1\" fails","id":"S7.5.2_A1.1","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.1.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.10"]={"assertion":"The \"for\" token can not be used as identifier","description":"Checking if execution of \"for=1\" fails","id":"S7.5.2_A1.10","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.10.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.11"]={"assertion":"The \"function\" token can not be used as identifier","description":"Checking if execution of \"function=1\" fails","id":"S7.5.2_A1.11","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.11.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.12"]={"assertion":"The \"if\" token can not be used as identifier","description":"Checking if execution of \"if=1\" fails","id":"S7.5.2_A1.12","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.12.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.13"]={"assertion":"The \"in\" token can not be used as identifier","description":"Checking if execution of \"in=1\" fails","id":"S7.5.2_A1.13","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.13.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.14"]={"assertion":"The \"instanceof\" token can not be used as identifier","description":"Checking if execution of \"instanceof=1\" fails","id":"S7.5.2_A1.14","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.14.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.15"]={"assertion":"The \"new\" token can not be used as identifier","description":"Checking if execution of \"new=1\" fails","id":"S7.5.2_A1.15","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.15.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.16"]={"assertion":"The \"return\" token can not be used as identifier","description":"Checking if execution of \"return=1\" fails","id":"S7.5.2_A1.16","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.16.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.17"]={"assertion":"The \"switch\" token can not be used as identifier","description":"Checking if execution of \"switch=1\" fails","id":"S7.5.2_A1.17","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.17.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.18"]={"assertion":"The \"this\" token can not be used as identifier","description":"Checking if execution of \"this=1\" fails","id":"S7.5.2_A1.18","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.18.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.19"]={"assertion":"The \"throw\" token can not be used as identifier","description":"Checking if execution of \"throw=1\" fails","id":"S7.5.2_A1.19","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.19.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.2"]={"assertion":"The \"case\" token can not be used as identifier","description":"Checking if execution of \"case=1\" fails","id":"S7.5.2_A1.2","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.2.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.20"]={"assertion":"The \"try\" token can not be used as identifier","description":"Checking if execution of \"try=1\" fails","id":"S7.5.2_A1.20","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.20.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.21"]={"assertion":"The \"typeof\" token can not be used as identifier","description":"Checking if execution of \"typeof=1\" fails","id":"S7.5.2_A1.21","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.21.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.22"]={"assertion":"The \"var\" token can not be used as identifier","description":"Checking if execution of \"var=1\" fails","id":"S7.5.2_A1.22","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.22.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.23"]={"assertion":"The \"void\" token can not be used as identifier","description":"Checking if execution of \"void=1\" fails","id":"S7.5.2_A1.23","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.23.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.24"]={"assertion":"The \"while\" token can not be used as identifier","description":"Checking if execution of \"while=1\" fails","id":"S7.5.2_A1.24","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.24.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.25"]={"assertion":"The \"with\" token can not be used as identifier","description":"Checking if execution of \"with=1\" fails","id":"S7.5.2_A1.25","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.25.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.3"]={"assertion":"The \"catch\" token can not be used as identifier","description":"Checking if execution of \"catch=1\" fails","id":"S7.5.2_A1.3","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.3.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.4"]={"assertion":"The \"continue\" token can not be used as identifier","description":"Checking if execution of \"contunue=1\" fails","id":"S7.5.2_A1.4","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.4.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.5"]={"assertion":"The \"default\" token can not be used as identifier","description":"Checking if execution of \"default=1\" fails","id":"S7.5.2_A1.5","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.5.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.6"]={"assertion":"The \"delete\" token can not be used as identifier","description":"Checking if execution of \"delete=1\" fails","id":"S7.5.2_A1.6","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.6.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.7"]={"assertion":"The \"do\" token can not be used as identifier","description":"Checking if execution of \"do=1\" fails","id":"S7.5.2_A1.7","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.7.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.8"]={"assertion":"The \"else\" token can not be used as identifier","description":"Checking if execution of \"else=1\" fails","id":"S7.5.2_A1.8","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.8.js","negative":"."};
GlobalScopeTests["S7.5.2_A1.9"]={"assertion":"The \"finally\" token can not be used as identifier","description":"Checking if execution of \"finally=1\" fails","id":"S7.5.2_A1.9","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.2_Keywords\\S7.5.2_A1.9.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.1"]={"assertion":"The \"abstract\" token can not be used as identifier","description":"Checking if execution of \"abstract=1\" fails","id":"S7.5.3_A1.1","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.1.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.10"]={"assertion":"The \"export\" token can not be used as identifier","description":"Checking if execution of \"export=1\" fails","id":"S7.5.3_A1.10","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.10.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.11"]={"assertion":"The \"extends\" token can not be used as identifier","description":"Checking if execution of \"extends=1\" fails","id":"S7.5.3_A1.11","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.11.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.12"]={"assertion":"The \"final\" token can not be used as identifier","description":"Checking if execution of \"final=1\" fails","id":"S7.5.3_A1.12","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.12.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.13"]={"assertion":"The \"float\" token can not be used as identifier","description":"Checking if execution of \"float=1\" fails","id":"S7.5.3_A1.13","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.13.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.14"]={"assertion":"The \"goto\" token can not be used as identifier","description":"Checking if execution of \"goto=1\" fails","id":"S7.5.3_A1.14","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.14.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.15"]={"assertion":"The \"implements\" token can not be used as identifier","description":"Checking if execution of \"implements=1\" fails","id":"S7.5.3_A1.15","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.15.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.16"]={"assertion":"The \"import\" token can not be used as identifier","description":"Checking if execution of \"import=1\" fails","id":"S7.5.3_A1.16","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.16.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.17"]={"assertion":"The \"int\" token can not be used as identifier","description":"Checking if execution of \"int=1\" fails","id":"S7.5.3_A1.17","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.17.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.18"]={"assertion":"The \"interface\" token can not be used as identifier","description":"Checking if execution of \"interface = 1\" fails","id":"S7.5.3_A1.18","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.18.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.19"]={"assertion":"The \"long\" token can not be used as identifier","description":"Checking if execution of \"long=1\" fails","id":"S7.5.3_A1.19","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.19.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.2"]={"assertion":"The \"boolean\" token can not be used as identifier","description":"Checking if execution of \"boolean=1\" fails","id":"S7.5.3_A1.2","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.2.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.20"]={"assertion":"The \"native\" token can not be used as identifier","description":"Checking if execution of \"native=1\" fails","id":"S7.5.3_A1.20","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.20.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.21"]={"assertion":"The \"package\" token can not be used as identifier","description":"Checking if execution of \"package=1\" fails","id":"S7.5.3_A1.21","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.21.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.22"]={"assertion":"The \"private\" token can not be used as identifier","description":"Checking if execution of \"private=1\" fails","id":"S7.5.3_A1.22","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.22.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.23"]={"assertion":"The \"protected\" token can not be used as identifier","description":"Checking if execution of \"protected=1\" fails","id":"S7.5.3_A1.23","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.23.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.24"]={"assertion":"The \"public\" token can not be used as identifier","description":"Checking if execution of \"public=1\" fails","id":"S7.5.3_A1.24","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.24.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.25"]={"assertion":"The \"short\" token can not be used as identifier","description":"Checking if execution of \"short=1\" fails","id":"S7.5.3_A1.25","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.25.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.26"]={"assertion":"The \"static\" token can not be used as identifier","description":"Checking if execution of \"static=1\" fails","id":"S7.5.3_A1.26","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.26.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.27"]={"assertion":"The \"super\" token can not be used as identifier","description":"Checking if execution of \"super=1\" fails","id":"S7.5.3_A1.27","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.27.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.28"]={"assertion":"The \"synchronized\" token can not be used as identifier","description":"Checking if execution of \"synchronized=1\" fails","id":"S7.5.3_A1.28","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.28.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.29"]={"assertion":"The \"throws\" token can not be used as identifier","description":"Checking if execution of \"throws=1\" fails","id":"S7.5.3_A1.29","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.29.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.3"]={"assertion":"The \"byte\" token can not be used as identifier","description":"Checking if execution of \"byte=1\" fails","id":"S7.5.3_A1.3","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.3.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.30"]={"assertion":"The \"transient\" token can not be used as identifier","description":"Checking if execution of \"transient=1\" fails","id":"S7.5.3_A1.30","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.30.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.31"]={"assertion":"The \"volatile\" token can not be used as identifier","description":"Checking if execution of \"volatile=1\" fails","id":"S7.5.3_A1.31","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.31.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.4"]={"assertion":"The \"char\" token can not be used as identifier","description":"Checking if execution of \"char=1\" fails","id":"S7.5.3_A1.4","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.4.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.5"]={"assertion":"The \"class\" token can not be used as identifier","description":"Checking if execution of \"class=1\" fails","id":"S7.5.3_A1.5","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.5.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.6"]={"assertion":"The \"const\" token can not be used as identifier","description":"Checking if execution of \"const=1\" fails","id":"S7.5.3_A1.6","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.6.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.7"]={"assertion":"The \"debugger\" token can not be used as identifier","description":"Checking if execution of \"debugger=1\" fails","id":"S7.5.3_A1.7","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.7.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.8"]={"assertion":"The \"double\" token can not be used as identifier","description":"Checking if execution of \"double=1\" fails","id":"S7.5.3_A1.8","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.8.js","negative":"."};
GlobalScopeTests["S7.5.3_A1.9"]={"assertion":"The \"enum\" token can not be used as identifier","description":"Checking if execution of \"enum=1\" fails","id":"S7.5.3_A1.9","path":"07_Lexical_Conventions\\7.5_Tokens\\7.5.3_Future_Reserved_Words\\S7.5.3_A1.9.js","negative":"."};
GlobalScopeTests["S7.7_A2_T1"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use {} as a Unicode \\u007B\\u007D","id":"S7.7_A2_T1","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T1.js","negative":"."};
GlobalScopeTests["S7.7_A2_T10"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use \/ as a Unicode \\u002F","id":"S7.7_A2_T10","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T10.js","negative":"."};
GlobalScopeTests["S7.7_A2_T2"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use () as Unicode \\u00281\\u0029","id":"S7.7_A2_T2","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T2.js","negative":"."};
GlobalScopeTests["S7.7_A2_T3"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use [] as a Unicode \\u005B\\u005D","id":"S7.7_A2_T3","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T3.js","negative":"."};
GlobalScopeTests["S7.7_A2_T4"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use ; as a Unicode \\u003B","id":"S7.7_A2_T4","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T4.js","negative":"."};
GlobalScopeTests["S7.7_A2_T5"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use . as a Unicode \\u002E","id":"S7.7_A2_T5","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T5.js","negative":"."};
GlobalScopeTests["S7.7_A2_T6"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use , as a Unicode \\u002C","id":"S7.7_A2_T6","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T6.js","negative":"."};
GlobalScopeTests["S7.7_A2_T7"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use + as a Unicode \\u002B","id":"S7.7_A2_T7","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T7.js","negative":"."};
GlobalScopeTests["S7.7_A2_T8"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use -  as a Unicode \\u002D","id":"S7.7_A2_T8","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T8.js","negative":"."};
GlobalScopeTests["S7.7_A2_T9"]={"assertion":"Punctuator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits","description":"Try to use * as a Unicode \\u002A","id":"S7.7_A2_T9","path":"07_Lexical_Conventions\\7.7_Punctuators\\S7.7_A2_T9.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T1"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: e DecimalDigits","id":"S7.8.3_A4.1_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T1.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T2"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: E DecimalDigits","id":"S7.8.3_A4.1_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T2.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T3"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: e DecimalDigits","id":"S7.8.3_A4.1_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T3.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T4"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: E DecimalDigits","id":"S7.8.3_A4.1_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T4.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T5"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: e DecimalDigits","id":"S7.8.3_A4.1_T5","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T5.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T6"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: E DecimalDigits","id":"S7.8.3_A4.1_T6","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T6.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T7"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: e 0","id":"S7.8.3_A4.1_T7","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T7.js","negative":"."};
GlobalScopeTests["S7.8.3_A4.1_T8"]={"assertion":"DecimalLiteral :: ExponentPart is incorrect","description":"ExponentPart :: E 0","id":"S7.8.3_A4.1_T8","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A4.1_T8.js","negative":"."};
GlobalScopeTests["S7.8.3_A6.1_T1"]={"assertion":"HexIntegerLiteral :: 0(x\/X) is incorrect","description":"Checking if execution of \"0x\" passes","id":"S7.8.3_A6.1_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A6.1_T1.js","negative":"."};
GlobalScopeTests["S7.8.3_A6.1_T2"]={"assertion":"HexIntegerLiteral :: 0(x\/X) is incorrect","description":"Checking if execution of \"0X\" passes","id":"S7.8.3_A6.1_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A6.1_T2.js","negative":"."};
GlobalScopeTests["S7.8.3_A6.2_T1"]={"assertion":"0xG is incorrect","description":"Checking if execution of \"0xG\" fails","id":"S7.8.3_A6.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A6.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.3_A6.2_T2"]={"assertion":"0xG is incorrect","description":"Checking if execution of \"0xg\" fails","id":"S7.8.3_A6.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.3_Numeric_Literals\\S7.8.3_A6.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A1.1_T1"]={"assertion":"StringLiteral :: \"DoubleStringCharacters_opt\"","description":"DoubleStringCharacter :: SourceCharacter but not double-quote \" or LineTerminator","id":"S7.8.4_A1.1_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A1.1_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A1.1_T2"]={"assertion":"StringLiteral :: \"DoubleStringCharacters_opt\"","description":"DoubleStringCharacter :: SourceCharacter but not double-quote \" or LineTerminator","id":"S7.8.4_A1.1_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A1.1_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A1.2_T1"]={"assertion":"StringLiteral :: 'SingleStringCharacters_opt'","description":"SingleStringCharacter :: SourceCharacter but not single-quote ' or LineTerminator","id":"S7.8.4_A1.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A1.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A1.2_T2"]={"assertion":"StringLiteral :: 'SingleStringCharacters_opt'","description":"SingleStringCharacter :: SourceCharacter but not single-quote ' or LineTerminator","id":"S7.8.4_A1.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A1.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A3.1_T1"]={"assertion":"StringLiteral :: \"\\\" or '\\' is not correct","description":"Checking if execution of \"\\\" fails","id":"S7.8.4_A3.1_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A3.1_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A3.1_T2"]={"assertion":"StringLiteral :: \"\\\" or '\\' is not correct","description":"Checking if execution of \"'\\'\" fails","id":"S7.8.4_A3.1_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A3.1_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A3.2_T1"]={"assertion":"StringLiteral :: \"\\\\\\\" or '\\\\\\' is not correct","description":"Checking if execution of \"\\\\\\\" fails","id":"S7.8.4_A3.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A3.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A3.2_T2"]={"assertion":"StringLiteral :: \"\\\\\\\" or '\\\\\\' is not correct","description":"Checking if execution of '\\\\\\' fails","id":"S7.8.4_A3.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A3.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T1"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: DecimalDigits :: 1","id":"S7.8.4_A4.3_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T2"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: DecimalDigits :: 7","id":"S7.8.4_A4.3_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T3"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: DecimalDigits :: 8","id":"S7.8.4_A4.3_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T3.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T4"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: DecimalDigits :: 9","id":"S7.8.4_A4.3_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T4.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T5"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: u","id":"S7.8.4_A4.3_T5","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T5.js","negative":"."};
GlobalScopeTests["S7.8.4_A4.3_T6"]={"assertion":"NonEscapeSequence is not EscapeCharacter","description":"EscapeCharacter :: x","id":"S7.8.4_A4.3_T6","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A4.3_T6.js","negative":"."};
GlobalScopeTests["S7.8.4_A6.1_T4"]={"assertion":"EscapeSequence :: HexEscapeSequence :: x HexDigit HexDigit","description":"HexEscapeSequence :: x0G is incorrect","id":"S7.8.4_A6.1_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A6.1_T4.js","negative":"."};
GlobalScopeTests["S7.8.4_A6.2_T1"]={"assertion":"HexEscapeSequence :: x HexDigit is incorrect","description":"HexDigit :: 1","id":"S7.8.4_A6.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A6.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A6.2_T2"]={"assertion":"HexEscapeSequence :: x HexDigit is incorrect","description":"HexDigit :: A","id":"S7.8.4_A6.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A6.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A6.4_T1"]={"assertion":"HexEscapeSequence \\X HexDigit HexDigit is incorrect","description":"Checking if execution of \"\\X01\" passes","id":"S7.8.4_A6.4_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A6.4_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A6.4_T2"]={"assertion":"HexEscapeSequence \\X HexDigit HexDigit is incorrect","description":"Checking if execution of \"\\X0A\" passes","id":"S7.8.4_A6.4_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A6.4_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.1_T4"]={"assertion":"EscapeSequence :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit","description":"UnicodeEscapeSequence :: u000G is incorrect","id":"S7.8.4_A7.1_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.1_T4.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T1"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: 1","id":"S7.8.4_A7.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T2"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: A","id":"S7.8.4_A7.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T3"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: 1","id":"S7.8.4_A7.2_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T3.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T4"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: A","id":"S7.8.4_A7.2_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T4.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T5"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: 1","id":"S7.8.4_A7.2_T5","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T5.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.2_T6"]={"assertion":"UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect","description":":: HexDigit :: A","id":"S7.8.4_A7.2_T6","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.2_T6.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.4_T1"]={"assertion":"UnicodeEscapeSequence \\U HexDigit HexDigit HexDigit HexDigit is incorrect","description":"Checking if execution of \"\\U0001\" passes","id":"S7.8.4_A7.4_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.4_T1.js","negative":"."};
GlobalScopeTests["S7.8.4_A7.4_T2"]={"assertion":"UnicodeEscapeSequence \\U HexDigit HexDigit HexDigit HexDigit is incorrect","description":"Checking if execution of \"\\U000A\" passes","id":"S7.8.4_A7.4_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.4_String_Literals\\S7.8.4_A7.4_T2.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.2_T1"]={"assertion":"RegularExpressionFirstChar :: * or \\ or \/ or [empty] is incorrect","description":"*","id":"S7.8.5_A1.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.2_T2"]={"assertion":"RegularExpressionFirstChar :: * or \\ or \/ or [empty] is incorrect","description":"\\","id":"S7.8.5_A1.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.2_T3"]={"assertion":"RegularExpressionFirstChar :: * or \\ or \/ or [empty] is incorrect","description":"\/","id":"S7.8.5_A1.2_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.2_T3.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.2_T4"]={"assertion":"RegularExpressionFirstChar :: * or \\ or \/ or [empty] is incorrect","description":"[empty]","id":"S7.8.5_A1.2_T4","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.2_T4.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.3_T1"]={"assertion":"RegularExpressionFirstChar :: LineTerminator is incorrect","description":"Line Feed, without eval","id":"S7.8.5_A1.3_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.3_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.3_T3"]={"assertion":"RegularExpressionFirstChar :: LineTerminator is incorrect","description":"Carriage Return, without eval","id":"S7.8.5_A1.3_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.3_T3.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.5_T1"]={"assertion":"RegularExpressionFirstChar :: BackslashSequence :: \\LineTerminator is incorrect","description":"Line Feed, without eval","id":"S7.8.5_A1.5_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.5_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A1.5_T3"]={"assertion":"RegularExpressionFirstChar :: BackslashSequence :: \\LineTerminator is incorrect","description":"Carriage Return, without eval","id":"S7.8.5_A1.5_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A1.5_T3.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.2_T1"]={"assertion":"RegularExpressionChar :: \\ or \/ is incorrect","description":"\\","id":"S7.8.5_A2.2_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.2_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.2_T2"]={"assertion":"RegularExpressionChar :: \\ or \/ is incorrect","description":"\/","id":"S7.8.5_A2.2_T2","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.2_T2.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.3_T1"]={"assertion":"RegularExpressionChar :: LineTerminator is incorrect","description":"Line Feed, without eval","id":"S7.8.5_A2.3_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.3_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.3_T3"]={"assertion":"RegularExpressionChar :: LineTerminator is incorrect","description":"Carriage Return, without eval","id":"S7.8.5_A2.3_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.3_T3.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.5_T1"]={"assertion":"RegularExpressionChar :: BackslashSequence :: \\LineTerminator is incorrect","description":"Line Feed, without eval","id":"S7.8.5_A2.5_T1","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.5_T1.js","negative":"."};
GlobalScopeTests["S7.8.5_A2.5_T3"]={"assertion":"RegularExpressionChar :: BackslashSequence :: \\LineTerminator is incorrect","description":"Carriage Return, without eval","id":"S7.8.5_A2.5_T3","path":"07_Lexical_Conventions\\7.8_Literals\\7.8.5_Regular_Expression_Literals\\S7.8.5_A2.5_T3.js","negative":"."};
GlobalScopeTests["S7.9_A10_T2"]={"assertion":"Check {} for automatic semicolon insertion","description":"Checking if execution of \"{}*1\" fails","id":"S7.9_A10_T2","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A10_T2.js","negative":"."};
GlobalScopeTests["S7.9_A10_T4"]={"assertion":"Check {} for automatic semicolon insertion","description":"Checking if execution of \"({};)*1\" fails","id":"S7.9_A10_T4","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A10_T4.js","negative":"."};
GlobalScopeTests["S7.9_A10_T6"]={"assertion":"Check {} for automatic semicolon insertion","description":"Checking if execution of \"{} \\n * 1\" fails","id":"S7.9_A10_T6","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A10_T6.js","negative":"."};
GlobalScopeTests["S7.9_A10_T8"]={"assertion":"Check {} for automatic semicolon insertion","description":"Checking if execution of \"{1 2} 3\" fails","id":"S7.9_A10_T8","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A10_T8.js","negative":"."};
GlobalScopeTests["S7.9_A11_T4"]={"assertion":"Check If Statement for automatic semicolon insertion","description":"Checking if execution of \"if (false) x = 1 else x = -1\" fails","id":"S7.9_A11_T4","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A11_T4.js","negative":"."};
GlobalScopeTests["S7.9_A11_T8"]={"assertion":"Check If Statement for automatic semicolon insertion","description":"Use if (false) {x = 1}; \\n else x=-1 and check x","id":"S7.9_A11_T8","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A11_T8.js","negative":"."};
GlobalScopeTests["S7.9_A4"]={"assertion":"Check Throw Statement for automatic semicolon insertion","description":"Try use Throw \\n Expression construction","id":"S7.9_A4","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A4.js","negative":"."};
GlobalScopeTests["S7.9_A5.1_T1"]={"assertion":"Check Postfix Increment Operator for automatic semicolon insertion","description":"Try use Variable \\n ++ construction","id":"S7.9_A5.1_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A5.1_T1.js","negative":"."};
GlobalScopeTests["S7.9_A5.3_T1"]={"assertion":"Check Postfix Decrement Operator for automatic semicolon insertion","description":"Try use Variable \\n -- construction","id":"S7.9_A5.3_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A5.3_T1.js","negative":"."};
GlobalScopeTests["S7.9_A5.7_T1"]={"assertion":"Since LineTerminator(LT) between Postfix Increment\/Decrement Operator(I\/DO) and operand is not allowed, two IO(just as two DO and their combination)","description":"Try use Variable1 \\n ++ \\n ++ \\n Variable2 construction","id":"S7.9_A5.7_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A5.7_T1.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T1"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (semicolon \\n)","id":"S7.9_A6.2_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T1.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T10"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n false \\n semicolon)","id":"S7.9_A6.2_T10","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T10.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T2"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n semicolon \\n)","id":"S7.9_A6.2_T2","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T2.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T3"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n semicolon)","id":"S7.9_A6.2_T3","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T3.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T4"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n \\n semicolon)","id":"S7.9_A6.2_T4","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T4.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T5"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (false semicolon false\\n)","id":"S7.9_A6.2_T5","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T5.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T6"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (false semicolon \\n false)","id":"S7.9_A6.2_T6","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T6.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T7"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (false \\n semicolon \\n)","id":"S7.9_A6.2_T7","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T7.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T8"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (false \\n semicolon false \\n)","id":"S7.9_A6.2_T8","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T8.js","negative":"."};
GlobalScopeTests["S7.9_A6.2_T9"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n semicolon false)","id":"S7.9_A6.2_T9","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.2_T9.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T1"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n)","id":"S7.9_A6.3_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T1.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T2"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n \\n)","id":"S7.9_A6.3_T2","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T2.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T3"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n \\n \\n)","id":"S7.9_A6.3_T3","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T3.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T4"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n false \\n)","id":"S7.9_A6.3_T4","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T4.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T5"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (false \\n false \\n)","id":"S7.9_A6.3_T5","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T5.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T6"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n false \\n false \\n)","id":"S7.9_A6.3_T6","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T6.js","negative":"."};
GlobalScopeTests["S7.9_A6.3_T7"]={"assertion":"Check For Statement for automatic semicolon insertion.","description":"For header is (\\n false \\n false \\n false \\n)","id":"S7.9_A6.3_T7","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.3_T7.js","negative":"."};
GlobalScopeTests["S7.9_A6.4_T1"]={"assertion":"Check For Statement for automatic semicolon insertion","description":"Three semicolons. For header is (false semicolon false semicolon false semicolon)","id":"S7.9_A6.4_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.4_T1.js","negative":"."};
GlobalScopeTests["S7.9_A6.4_T2"]={"assertion":"Check For Statement for automatic semicolon insertion","description":"Three semicolons. For header is (false semicolon false two semicolons false)","id":"S7.9_A6.4_T2","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A6.4_T2.js","negative":"."};
GlobalScopeTests["S7.9_A7_T7"]={"assertion":"Check Var Statement for automatic semicolon insertion","description":"Checking if execution of \"var x \\n y\" passes","id":"S7.9_A7_T7","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A7_T7.js","negative":"."};
GlobalScopeTests["S7.9_A9_T6"]={"assertion":"Check Do-While Statement for automatic semicolon insertion","description":"Execute do \\n while(false)","id":"S7.9_A9_T6","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A9_T6.js","negative":"."};
GlobalScopeTests["S7.9_A9_T7"]={"assertion":"Check Do-While Statement for automatic semicolon insertion","description":"Execute do \\n\\n while(false)","id":"S7.9_A9_T7","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A9_T7.js","negative":"."};
GlobalScopeTests["S7.9_A9_T8"]={"assertion":"Check Do-While Statement for automatic semicolon insertion","description":"Execute do {}; \\n while(false)","id":"S7.9_A9_T8","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\S7.9_A9_T8.js","negative":"."};
GlobalScopeTests["S7.9.2_A1_T1"]={"assertion":"Check examples for automatic semicolon insertion from the Standart","description":"{ 1 2 } 3 is not a valid sentence in the ECMAScript grammar","id":"S7.9.2_A1_T1","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\7.9.2_Examples_of_Automatic_Semicolon_Insertion\\S7.9.2_A1_T1.js","negative":"."};
GlobalScopeTests["S7.9.2_A1_T3"]={"assertion":"Check examples for automatic semicolon insertion from the Standart","description":"for( a ; b \\n ) is not a valid sentence in the ECMAScript grammar","id":"S7.9.2_A1_T3","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\7.9.2_Examples_of_Automatic_Semicolon_Insertion\\S7.9.2_A1_T3.js","negative":"."};
GlobalScopeTests["S7.9.2_A1_T6"]={"assertion":"Check examples for automatic semicolon insertion from the Standart","description":"if(a>b) \\n else c=d is not a valid sentence in the ECMAScript grammar","id":"S7.9.2_A1_T6","path":"07_Lexical_Conventions\\7.9_Automatic_Semicolon_Insertion\\7.9.2_Examples_of_Automatic_Semicolon_Insertion\\S7.9.2_A1_T6.js","negative":"."};
GlobalScopeTests["S8.2_A2"]={"assertion":"The null is resrved word","description":"Checking if execution of \"var null\" fails","id":"S8.2_A2","path":"08_Types\\8.2_The_Null_Type\\S8.2_A2.js","negative":"."};
GlobalScopeTests["S8.3_A2.1"]={"assertion":"The true is reserved word","description":"Checking if execution of \"true=1\" fails","id":"S8.3_A2.1","path":"08_Types\\8.3_The_Boolean_Type\\S8.3_A2.1.js","negative":"."};
GlobalScopeTests["S8.3_A2.2"]={"assertion":"The false is reserved word","description":"Checking if execution of \"false=0\" fails","id":"S8.3_A2.2","path":"08_Types\\8.3_The_Boolean_Type\\S8.3_A2.2.js","negative":"."};
GlobalScopeTests["S8.4_A13_T1"]={"assertion":"When appears not closed single-quote program failes","description":"Try to create variable using 3 single-quote","id":"S8.4_A13_T1","path":"08_Types\\8.4_The_String_Type\\S8.4_A13_T1.js","negative":"."};
GlobalScopeTests["S8.4_A13_T2"]={"assertion":"When appears not closed single-quote program failes","description":"Try to create variable using 1 single-quote","id":"S8.4_A13_T2","path":"08_Types\\8.4_The_String_Type\\S8.4_A13_T2.js","negative":"."};
GlobalScopeTests["S8.4_A13_T3"]={"assertion":"When appears not closed single-quote program failes","description":"Try to create variable using 4 single-quote","id":"S8.4_A13_T3","path":"08_Types\\8.4_The_String_Type\\S8.4_A13_T3.js","negative":"."};
GlobalScopeTests["S8.4_A14_T1"]={"assertion":"When appears not closed double-quote program failes","description":"Try to create variable using 1 double-quote","id":"S8.4_A14_T1","path":"08_Types\\8.4_The_String_Type\\S8.4_A14_T1.js","negative":"."};
GlobalScopeTests["S8.4_A14_T2"]={"assertion":"When appears not closed double-quote program failes","description":"Try to create variable using 3 double-quote","id":"S8.4_A14_T2","path":"08_Types\\8.4_The_String_Type\\S8.4_A14_T2.js","negative":"."};
GlobalScopeTests["S8.4_A14_T3"]={"assertion":"When appears not closed double-quote program failes","description":"Try to create variable using 4 double-quote","id":"S8.4_A14_T3","path":"08_Types\\8.4_The_String_Type\\S8.4_A14_T3.js","negative":"."};
GlobalScopeTests["S8.4_A7.1"]={"assertion":"<LF> between chunks of one string not allowed","description":"Insert <LF> between chunks of one string","id":"S8.4_A7.1","path":"08_Types\\8.4_The_String_Type\\S8.4_A7.1.js","negative":"."};
GlobalScopeTests["S8.4_A7.2"]={"assertion":"<CR> between chunks of one string not allowed","description":"Insert <CR> between chunks of one string","id":"S8.4_A7.2","path":"08_Types\\8.4_The_String_Type\\S8.4_A7.2.js","negative":"."};
GlobalScopeTests["S8.4_A7.3"]={"assertion":"<PS> between chunks of one string not allowed","description":"Insert <PS> between chunks of one string","id":"S8.4_A7.3","path":"08_Types\\8.4_The_String_Type\\S8.4_A7.3.js","negative":"."};
GlobalScopeTests["S8.4_A7.4"]={"assertion":"<LS> between chunks of one string not allowed","description":"Insert <LS> between chunks of one string","id":"S8.4_A7.4","path":"08_Types\\8.4_The_String_Type\\S8.4_A7.4.js","negative":"."};
GlobalScopeTests["S8.6.2_A7"]={"assertion":"Objects that implement internal method [[Construct]] are called constructors. Math object is NOT constructor","description":"Checking if execution of \"var objMath=new Math\" passes","id":"S8.6.2_A7","path":"08_Types\\8.6_The_Object_Type\\8.6.2_Internal_Properties_and_Methods\\S8.6.2_A7.js","negative":"."};
GlobalScopeTests["S8.7.2_A1_T1"]={"assertion":"GetValue(V) mast fail","description":"Checking if execution of \"'litera'=1;\" fails","id":"S8.7.2_A1_T1","path":"08_Types\\8.7_The_Reference_Type\\S8.7.2_A1_T1.js","negative":"."};
GlobalScopeTests["S8.7.2_A1_T2"]={"assertion":"GetValue(V) mast fail","description":"Checking if execution of \"1=1\" fails","id":"S8.7.2_A1_T2","path":"08_Types\\8.7_The_Reference_Type\\S8.7.2_A1_T2.js","negative":"."};
GlobalScopeTests["S11.13.1_A2.1_T3"]={"assertion":"Operator x = y uses GetValue and PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError)","id":"S11.13.1_A2.1_T3","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.1_Simple_Assignment\\S11.13.1_A2.1_T3.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T1"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x *= y\"","id":"S11.13.2_A2.2_T1","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T1.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T10"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x ^= y\"","id":"S11.13.2_A2.2_T10","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T10.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T11"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x |= y\"","id":"S11.13.2_A2.2_T11","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T11.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T2"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x \/= y\"","id":"S11.13.2_A2.2_T2","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T2.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T3"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x %= y\"","id":"S11.13.2_A2.2_T3","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T3.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T4"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x += y\"","id":"S11.13.2_A2.2_T4","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T4.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T5"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x -= y\"","id":"S11.13.2_A2.2_T5","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T5.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T6"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x <<= y\"","id":"S11.13.2_A2.2_T6","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T6.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T7"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x >>= y\"","id":"S11.13.2_A2.2_T7","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T7.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T8"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x >>>= y\"","id":"S11.13.2_A2.2_T8","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T8.js","negative":"."};
GlobalScopeTests["S11.13.2_A2.2_T9"]={"assertion":"Operator uses PutValue","description":"If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x &= y\"","id":"S11.13.2_A2.2_T9","path":"11_Expressions\\11.13_Assignment_Operators\\11.13.2_Compound_Assignment\\S11.13.2_A2.2_T9.js","negative":"."};
GlobalScopeTests["S11.1.1_A1"]={"assertion":"The \"this\" is reserved word","description":"Checking if execution of \"this=1\" fails","id":"S11.1.1_A1","path":"11_Expressions\\11.1_Primary_Expressions\\11.1.1_The_this_Keyword\\S11.1.1_A1.js","negative":"."};
GlobalScopeTests["S11.1.5_A4.1"]={"assertion":"The PropertyName is not BooleanLiteral","description":"Checking if execution of \"var object = {true : 1}\" fails","id":"S11.1.5_A4.1","path":"11_Expressions\\11.1_Primary_Expressions\\11.1.5_Object_Initializer\\S11.1.5_A4.1.js","negative":"."};
GlobalScopeTests["S11.1.5_A4.2"]={"assertion":"The PropertyName is not nullLiteral","description":"Checking if execution of \"var object = {null : true}\" fails","id":"S11.1.5_A4.2","path":"11_Expressions\\11.1_Primary_Expressions\\11.1.5_Object_Initializer\\S11.1.5_A4.2.js","negative":"."};
GlobalScopeTests["S11.2.4_A1.3_T1"]={"assertion":"Arguments : (ArgumentList : ArgumentList,, AssignmentExpression) is a bad syntax","description":"incorrect syntax","id":"S11.2.4_A1.3_T1","path":"11_Expressions\\11.2_Left_Hand_Side_Expressions\\11.2.4_Argument_Lists\\S11.2.4_A1.3_T1.js","negative":"."};
GlobalScopeTests["S11.3.1_A1.1_T1"]={"assertion":"Line Terminator between LeftHandSideExpression and \"++\" is not allowed","description":"Checking Line Feed","id":"S11.3.1_A1.1_T1","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.1_Postfix_Increment_Operator\\S11.3.1_A1.1_T1.js","negative":"."};
GlobalScopeTests["S11.3.1_A1.1_T2"]={"assertion":"Line Terminator between LeftHandSideExpression and \"++\" is not allowed","description":"Carriage Return","id":"S11.3.1_A1.1_T2","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.1_Postfix_Increment_Operator\\S11.3.1_A1.1_T2.js","negative":"."};
GlobalScopeTests["S11.3.1_A1.1_T3"]={"assertion":"Line Terminator between LeftHandSideExpression and \"++\" is not allowed","description":"Checking Line Seprator","id":"S11.3.1_A1.1_T3","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.1_Postfix_Increment_Operator\\S11.3.1_A1.1_T3.js","negative":"."};
GlobalScopeTests["S11.3.1_A1.1_T4"]={"assertion":"Line Terminator between LeftHandSideExpression and \"++\" is not allowed","description":"Checking Paragraph separator","id":"S11.3.1_A1.1_T4","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.1_Postfix_Increment_Operator\\S11.3.1_A1.1_T4.js","negative":"."};
GlobalScopeTests["S11.3.1_A2.1_T3"]={"assertion":"Operator x++ uses GetValue and PutValue","description":"If Type(x) is not Reference, throw ReferenceError (or SyntaxError)","id":"S11.3.1_A2.1_T3","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.1_Postfix_Increment_Operator\\S11.3.1_A2.1_T3.js","negative":"."};
GlobalScopeTests["S11.3.2_A1.1_T1"]={"assertion":"Line Terminator between LeftHandSideExpression and \"--\" is not allowed","description":"Checking Line Feed","id":"S11.3.2_A1.1_T1","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.2_Postfix_Decrement_Operator\\S11.3.2_A1.1_T1.js","negative":"."};
GlobalScopeTests["S11.3.2_A1.1_T2"]={"assertion":"Line Terminator between LeftHandSideExpression and \"--\" is not allowed","description":"Checking Carriage Return","id":"S11.3.2_A1.1_T2","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.2_Postfix_Decrement_Operator\\S11.3.2_A1.1_T2.js","negative":"."};
GlobalScopeTests["S11.3.2_A1.1_T3"]={"assertion":"Line Terminator between LeftHandSideExpression and \"--\" is not allowed","description":"Checking Page separator","id":"S11.3.2_A1.1_T3","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.2_Postfix_Decrement_Operator\\S11.3.2_A1.1_T3.js","negative":"."};
GlobalScopeTests["S11.3.2_A1.1_T4"]={"assertion":"Line Terminator between LeftHandSideExpression and \"--\" is not allowed","description":"Checking Line separator","id":"S11.3.2_A1.1_T4","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.2_Postfix_Decrement_Operator\\S11.3.2_A1.1_T4.js","negative":"."};
GlobalScopeTests["S11.3.2_A2.1_T3"]={"assertion":"Operator x-- uses GetValue and PutValue","description":"If Type(x) is not Reference, throw ReferenceError (or SyntaxError)","id":"S11.3.2_A2.1_T3","path":"11_Expressions\\11.3_PostfixExpressions\\11.3.2_Postfix_Decrement_Operator\\S11.3.2_A2.1_T3.js","negative":"."};
GlobalScopeTests["S11.4.2_A2_T2"]={"assertion":"Operator \"void\" uses GetValue","description":"If GetBase(x) is null, throw ReferenceError","id":"S11.4.2_A2_T2","path":"11_Expressions\\11.4_Unary_Operators\\11.4.2_The_void_Operator\\S11.4.2_A2_T2.js","negative":"."};
GlobalScopeTests["S11.4.4_A2.1_T3"]={"assertion":"Operator ++x uses GetValue and PutValue","description":"If Type(x) is not Reference, throw ReferenceError (or SyntaxError)","id":"S11.4.4_A2.1_T3","path":"11_Expressions\\11.4_Unary_Operators\\11.4.4_Prefix_Increment_Operator\\S11.4.4_A2.1_T3.js","negative":"."};
GlobalScopeTests["S11.4.5_A2.1_T3"]={"assertion":"Operator --x uses GetValue and PutValue","description":"If Type(x) is not Reference, throw ReferenceError (or SyntaxError)","id":"S11.4.5_A2.1_T3","path":"11_Expressions\\11.4_Unary_Operators\\11.4.5_Prefix_Decrement_Operator\\S11.4.5_A2.1_T3.js","negative":"."};
GlobalScopeTests["S12.11_A2_T1"]={"assertion":"There can be only one DefaultClause","description":"Duplicate DefaultClause","id":"S12.11_A2_T1","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A2_T1.js","negative":"."};
GlobalScopeTests["S12.11_A3_T1"]={"assertion":"Syntax constructions of switch statement","description":"Checking if execution of \"switch() {}\" fails","id":"S12.11_A3_T1","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A3_T1.js","negative":"."};
GlobalScopeTests["S12.11_A3_T2"]={"assertion":"Syntax constructions of switch statement","description":"Checking if execution of \"switch {}\" fails","id":"S12.11_A3_T2","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A3_T2.js","negative":"."};
GlobalScopeTests["S12.11_A3_T3"]={"assertion":"Syntax constructions of switch statement","description":"Checking if execution of \"switch(value)\" fails","id":"S12.11_A3_T3","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A3_T3.js","negative":"."};
GlobalScopeTests["S12.11_A3_T4"]={"assertion":"Syntax constructions of switch statement","description":"Using \"case\" that has no Expresson after it. \"CaseClause: case Expression : [StatementList]\"","id":"S12.11_A3_T4","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A3_T4.js","negative":"."};
GlobalScopeTests["S12.11_A3_T5"]={"assertion":"Syntax constructions of switch statement","description":"Introducing statement not followed by \"case\" keyword","id":"S12.11_A3_T5","path":"12_Statement\\12.11_The_switch_Statement\\S12.11_A3_T5.js","negative":"."};
GlobalScopeTests["S12.13_A1"]={"assertion":"Sanity test for throw statement","description":"Trying to throw exception with \"throw\"","id":"S12.13_A1","path":"12_Statement\\12.13_The_throw_statement\\S12.13_A1.js","negative":"."};
GlobalScopeTests["S12.14_A16_T1"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Checking if pure \"try\" syntax construction passes","id":"S12.14_A16_T1","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T1.js","negative":"."};
GlobalScopeTests["S12.14_A16_T10"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Catch: \"catch (Identifier ) Block\"","id":"S12.14_A16_T10","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T10.js","negative":"."};
GlobalScopeTests["S12.14_A16_T11"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Catch and Finally are placed into the Block of \"try\" (whitle expected outside)","id":"S12.14_A16_T11","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T11.js","negative":"."};
GlobalScopeTests["S12.14_A16_T12"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Embedded \"try\" statements followed by two \"catch\" statements","id":"S12.14_A16_T12","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T12.js","negative":"."};
GlobalScopeTests["S12.14_A16_T13"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Catch: \"catch (Identifier ) Block\". Checking if execution of \"22\" passes at the place of Identifier of \"catch\"","id":"S12.14_A16_T13","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T13.js","negative":"."};
GlobalScopeTests["S12.14_A16_T14"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Checking if passing argument to \"try\" statement fails","id":"S12.14_A16_T14","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T14.js","negative":"."};
GlobalScopeTests["S12.14_A16_T15"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Finally: \"finally Block\". Checking if passing argument to \"try\" statement fails","id":"S12.14_A16_T15","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T15.js","negative":"."};
GlobalScopeTests["S12.14_A16_T2"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Checking if execution of \"catch\" with no \"try\" fails","id":"S12.14_A16_T2","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T2.js","negative":"."};
GlobalScopeTests["S12.14_A16_T3"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Checking if execution of \"finally\" with no \"try\" fails","id":"S12.14_A16_T3","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T3.js","negative":"."};
GlobalScopeTests["S12.14_A16_T4"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Catch: \"catch (Identifier ) Block\". Checking if execution of \"catch\" that takes no arguments fails","id":"S12.14_A16_T4","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T4.js","negative":"."};
GlobalScopeTests["S12.14_A16_T5"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Catch: \"catch (Identifier ) Block\". Checking if execution of \"catch\" with no Block fails","id":"S12.14_A16_T5","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T5.js","negative":"."};
GlobalScopeTests["S12.14_A16_T6"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Block: \"{ StatementList }\". Checking if execution of \"try{ catch{}{}\" fails","id":"S12.14_A16_T6","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T6.js","negative":"."};
GlobalScopeTests["S12.14_A16_T7"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Block: \"{ StatementList }\". Checking if execution of \"try{} catch(){\" fails","id":"S12.14_A16_T7","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T7.js","negative":"."};
GlobalScopeTests["S12.14_A16_T8"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Block: \"{ StatementList }\". Catch: \"catch (Identifier ) Block\". Checking if execution of \"try{} catch(){finally{}\" fails","id":"S12.14_A16_T8","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T8.js","negative":"."};
GlobalScopeTests["S12.14_A16_T9"]={"assertion":"TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"","description":"Checking if execution of \"catch(){} finally{}\" fails","id":"S12.14_A16_T9","path":"12_Statement\\12.14_The_try_Statement\\S12.14_A16_T9.js","negative":"."};
GlobalScopeTests["S12.1_A1"]={"assertion":"The production Block  { } can't contain function declaration","description":"Trying to declare function at the Block statement","id":"S12.1_A1","path":"12_Statement\\12.1_Block\\S12.1_A1.js","negative":"."};
GlobalScopeTests["S12.1_A4_T1"]={"assertion":"The production Block can't be inside of expression","description":"Checking if execution of \"y={__func}()\" fails","id":"S12.1_A4_T1","path":"12_Statement\\12.1_Block\\S12.1_A4_T1.js","negative":"."};
GlobalScopeTests["S12.1_A4_T2"]={"assertion":"The production Block can't be inside of expression","description":"Checking if execution of \"y={x}\" fails","id":"S12.1_A4_T2","path":"12_Statement\\12.1_Block\\S12.1_A4_T2.js","negative":"."};
GlobalScopeTests["S12.2_A8_T1"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x += 1\" fails","id":"S12.2_A8_T1","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T1.js","negative":"."};
GlobalScopeTests["S12.2_A8_T2"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x | true\" fails","id":"S12.2_A8_T2","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T2.js","negative":"."};
GlobalScopeTests["S12.2_A8_T3"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x && 1\" fails","id":"S12.2_A8_T3","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T3.js","negative":"."};
GlobalScopeTests["S12.2_A8_T4"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x++\" fails","id":"S12.2_A8_T4","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T4.js","negative":"."};
GlobalScopeTests["S12.2_A8_T5"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var --x\" fails","id":"S12.2_A8_T5","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T5.js","negative":"."};
GlobalScopeTests["S12.2_A8_T6"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x*1\" fails","id":"S12.2_A8_T6","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T6.js","negative":"."};
GlobalScopeTests["S12.2_A8_T7"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x>>1\" fails","id":"S12.2_A8_T7","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T7.js","negative":"."};
GlobalScopeTests["S12.2_A8_T8"]={"assertion":"Only AssignmentExpression is admitted when variable is initialized","description":"Checking if execution of \"var x in __arr\" fails","id":"S12.2_A8_T8","path":"12_Statement\\12.2_Variable_Statement\\S12.2_A8_T8.js","negative":"."};
GlobalScopeTests["S12.4_A1"]={"assertion":"An ExpressionStatement can not start with the function keyword because that might make it ambiguous with a FunctionDeclaration","description":"Checking if execution of \"function(){}()\" fails","id":"S12.4_A1","path":"12_Statement\\12.4_Expression_Statement\\S12.4_A1.js","negative":"."};
GlobalScopeTests["S12.5_A11"]={"assertion":"{} within the \"if\" expression is not allowed","description":"Checking if execution of \"if({1})\" fails","id":"S12.5_A11","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A11.js","negative":"."};
GlobalScopeTests["S12.5_A2"]={"assertion":"In the \"if\" Statement eval in Expression is admitted","description":"Checking by using eval \"eval(\"true\")\"","id":"S12.5_A2","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A2.js","negative":"."};
GlobalScopeTests["S12.5_A6_T1"]={"assertion":"In the If statement expression must be enclosed in braces","description":"Checking if execution of \"if true\" fails","id":"S12.5_A6_T1","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A6_T1.js","negative":"."};
GlobalScopeTests["S12.5_A6_T2"]={"assertion":"In the If statement expression must be enclosed in braces","description":"Checking if execution of \"if false\" fails","id":"S12.5_A6_T2","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A6_T2.js","negative":"."};
GlobalScopeTests["S12.5_A8"]={"assertion":"In the \"if\" Statement empty expression is not allowed","description":"Checking if execution of \"if()\" fails","id":"S12.5_A8","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A8.js","negative":"."};
GlobalScopeTests["S12.5_A9_T1"]={"assertion":"Function declaration within an \"if\" statement is not allowed","description":"Declaring function within an \"if\" statement","id":"S12.5_A9_T1","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A9_T1.js","negative":"."};
GlobalScopeTests["S12.5_A9_T2"]={"assertion":"Function declaration within an \"if\" statement is not allowed","description":"Declaring function within and \"if\" that is declared within the function call","id":"S12.5_A9_T2","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A9_T2.js","negative":"."};
GlobalScopeTests["S12.5_A9_T3"]={"assertion":"Function declaration within an \"if\" statement is not allowed","description":"Declaring function within an \"if\" statement that is declared within the function declaration","id":"S12.5_A9_T3","path":"12_Statement\\12.5_The_if_Statement\\S12.5_A9_T3.js","negative":"."};
GlobalScopeTests["S12.6.1_A12"]={"assertion":"Any statement within \"do-while\" construction must be a compound","description":"Checking if execution of \"do var x=1; var y =2; while (0)\" fails","id":"S12.6.1_A12","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A12.js","negative":"."};
GlobalScopeTests["S12.6.1_A13_T1"]={"assertion":"FunctionDeclaration within a \"do-while\" Block is not allowed","description":"Declaring function within a \"do-while\" loop","id":"S12.6.1_A13_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A13_T1.js","negative":"."};
GlobalScopeTests["S12.6.1_A13_T2"]={"assertion":"FunctionDeclaration within a \"do-while\" Block is not allowed","description":"Declaring a function within a \"do-while\" loop that is within a function call","id":"S12.6.1_A13_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A13_T2.js","negative":"."};
GlobalScopeTests["S12.6.1_A13_T3"]={"assertion":"FunctionDeclaration within a \"do-while\" Block is not allowed","description":"Declaring a function within a \"do-while\" loop that is within a function declaration itself","id":"S12.6.1_A13_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A13_T3.js","negative":"."};
GlobalScopeTests["S12.6.1_A15"]={"assertion":"Block within a \"do-while\" Expression is not allowed","description":"Using \"{0}\" Block as an Expression","id":"S12.6.1_A15","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A15.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T1"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{} while 1\" fails","id":"S12.6.1_A6_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T1.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T2"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{} while 0\" fails","id":"S12.6.1_A6_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T2.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T3"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{}while true\" fails","id":"S12.6.1_A6_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T3.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T4"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{}while false\" fails","id":"S12.6.1_A6_T4","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T4.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T5"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{}while ''\" fails","id":"S12.6.1_A6_T5","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T5.js","negative":"."};
GlobalScopeTests["S12.6.1_A6_T6"]={"assertion":"Expression in \"do-while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"do{}while 'hood'\" fails","id":"S12.6.1_A6_T6","path":"12_Statement\\12.6_Iteration_Statements\\12.6.1_The_do_while_Statement\\S12.6.1_A6_T6.js","negative":"."};
GlobalScopeTests["S12.6.2_A13_T1"]={"assertion":"FunctionDeclaration within a \"while\" Statement is not allowed","description":"Checking if declaring a function within a \"while\" Statement leads to an exception","id":"S12.6.2_A13_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A13_T1.js","negative":"."};
GlobalScopeTests["S12.6.2_A13_T2"]={"assertion":"FunctionDeclaration within a \"while\" Statement is not allowed","description":"Checking if declaring a function within a \"while\" Statement that is in a function call leads to an exception","id":"S12.6.2_A13_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A13_T2.js","negative":"."};
GlobalScopeTests["S12.6.2_A13_T3"]={"assertion":"FunctionDeclaration within a \"while\" Statement is not allowed","description":"Checking if declaring a function within a \"while\" Statement that is in a function body leads to an exception","id":"S12.6.2_A13_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A13_T3.js","negative":"."};
GlobalScopeTests["S12.6.2_A15"]={"assertion":"Block within a \"while\" Expression is not allowed","description":"Expression is \"{0}\"","id":"S12.6.2_A15","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A15.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T1"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while 1 break\" fails","id":"S12.6.2_A6_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T1.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T2"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while 0 break\" fails","id":"S12.6.2_A6_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T2.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T3"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while true break\" fails","id":"S12.6.2_A6_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T3.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T4"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while false break\" fails","id":"S12.6.2_A6_T4","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T4.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T5"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while '' break\" fails","id":"S12.6.2_A6_T5","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T5.js","negative":"."};
GlobalScopeTests["S12.6.2_A6_T6"]={"assertion":"Expression in \"while\" IterationStatement is bracketed with braces","description":"Checking if execution of \"while 'hood' break\" fails","id":"S12.6.2_A6_T6","path":"12_Statement\\12.6_Iteration_Statements\\12.6.2_The_while_statement\\S12.6.2_A6_T6.js","negative":"."};
GlobalScopeTests["S12.6.3_A11.1_T3"]={"assertion":"If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks","description":"Trying to continue non-existent label","id":"S12.6.3_A11.1_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A11.1_T3.js","negative":"."};
GlobalScopeTests["S12.6.3_A11_T3"]={"assertion":"If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks","description":"Trying to continue non-existent label","id":"S12.6.3_A11_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A11_T3.js","negative":"."};
GlobalScopeTests["S12.6.3_A12.1_T3"]={"assertion":"If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"","description":"Trying to break non-existent label","id":"S12.6.3_A12.1_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A12.1_T3.js","negative":"."};
GlobalScopeTests["S12.6.3_A12_T3"]={"assertion":"If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop","description":"Trying to break non-existent label","id":"S12.6.3_A12_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A12_T3.js","negative":"."};
GlobalScopeTests["S12.6.3_A4.1"]={"assertion":"\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn; FirstExpression; SecondExpression) Statement\" IterationStatement","description":"Checking if execution of \"for (var a in arr;1;){}\" fails","id":"S12.6.3_A4.1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A4.1.js","negative":"."};
GlobalScopeTests["S12.6.3_A4_T1"]={"assertion":"\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn; FirstExpression; SecondExpression) Statement\" IterationStatement","description":"Checking if execution of \"for (a in arr;1;){}\" fails","id":"S12.6.3_A4_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A4_T1.js","negative":"."};
GlobalScopeTests["S12.6.3_A4_T2"]={"assertion":"\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn; FirstExpression; SecondExpression) Statement\" IterationStatement","description":"Checking if execution of \"for (1 in arr;1;){}\" fails","id":"S12.6.3_A4_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A4_T2.js","negative":"."};
GlobalScopeTests["S12.6.3_A7.1_T1"]={"assertion":"Only three expressions and two semicolons in \"for(with var)\" braces are allowed.","description":"Checking if execution of \"for(var index=0; index<10; index++; index--)\" fails","id":"S12.6.3_A7.1_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A7.1_T1.js","negative":"."};
GlobalScopeTests["S12.6.3_A7.1_T2"]={"assertion":"Only three expressions and two semicolons in \"for(with var)\" braces are allowed.","description":"Checking if execution of \"for(var index=0; index<10; index+=4; index++; index--)\" fails","id":"S12.6.3_A7.1_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A7.1_T2.js","negative":"."};
GlobalScopeTests["S12.6.3_A7_T1"]={"assertion":"Only three expressions and two semicolons in \"for\" braces are allowed.","description":"Checking if execution of \"for(index=0; index<10; index++; index--)\" fails","id":"S12.6.3_A7_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A7_T1.js","negative":"."};
GlobalScopeTests["S12.6.3_A7_T2"]={"assertion":"Only three expressions and two semicolons in \"for\" braces are allowed.","description":"Checking if execution of \"for(index=0; index<10; index+=4; index++; index--)\" fails","id":"S12.6.3_A7_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A7_T2.js","negative":"."};
GlobalScopeTests["S12.6.3_A8.1_T1"]={"assertion":"Blocks within \"for(with var)\" braces are not allowed","description":"Checking if execution of \"for(var index=0; index<100; {index++; index*2;}) {  arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8.1_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8.1_T1.js","negative":"."};
GlobalScopeTests["S12.6.3_A8.1_T2"]={"assertion":"Blocks within \"for(with var)\" braces are not allowed","description":"Checking if execution of \"for(var index=0; {index++;index<100;}; index*2;) {  arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8.1_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8.1_T2.js","negative":"."};
GlobalScopeTests["S12.6.3_A8.1_T3"]={"assertion":"Blocks within \"for(with var)\" braces are not allowed","description":"Checking if execution of \"for({var index=0; index+=1;} index++<=10; index*2;) { arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8.1_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8.1_T3.js","negative":"."};
GlobalScopeTests["S12.6.3_A8_T1"]={"assertion":"Blocks within \"for\" braces are not allowed","description":"Checking if execution of \"for(index=0; index<100; {index++; index*2;}) {  arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8_T1.js","negative":"."};
GlobalScopeTests["S12.6.3_A8_T2"]={"assertion":"Blocks within \"for\" braces are not allowed","description":"Checking if execution of \"for(index=0; {index++;index<100;}; index*2;) {  arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8_T2.js","negative":"."};
GlobalScopeTests["S12.6.3_A8_T3"]={"assertion":"Blocks within \"for\" braces are not allowed","description":"Checking if execution of \"for({index=0; index+=1;} index++<=10; index*2;) { arr.add(\"\"+index);}\" fails","id":"S12.6.3_A8_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.3_The_for_Statement\\S12.6.3_A8_T3.js","negative":"."};
GlobalScopeTests["S12.6.4_A13_T1"]={"assertion":"FunctionDeclaration within a \"for-in\" Statement is not allowed","description":"Declaring function within a \"for-in\" Statement","id":"S12.6.4_A13_T1","path":"12_Statement\\12.6_Iteration_Statements\\12.6.4_The_for_in_Statement\\S12.6.4_A13_T1.js","negative":"."};
GlobalScopeTests["S12.6.4_A13_T2"]={"assertion":"FunctionDeclaration within a \"for-in\" Statement is not allowed","description":"Declaring function within a \"for-in\" Statement that is within a function call","id":"S12.6.4_A13_T2","path":"12_Statement\\12.6_Iteration_Statements\\12.6.4_The_for_in_Statement\\S12.6.4_A13_T2.js","negative":"."};
GlobalScopeTests["S12.6.4_A13_T3"]={"assertion":"FunctionDeclaration within a \"for-in\" Statement is not allowed","description":"Declaring function within a \"for-in\" Statement that is within function declaration","id":"S12.6.4_A13_T3","path":"12_Statement\\12.6_Iteration_Statements\\12.6.4_The_for_in_Statement\\S12.6.4_A13_T3.js","negative":"."};
GlobalScopeTests["S12.6.4_A15"]={"assertion":"Block within a \"for-in\" Expression is not allowed","description":"Using block within \"for-in\" Expression","id":"S12.6.4_A15","path":"12_Statement\\12.6_Iteration_Statements\\12.6.4_The_for_in_Statement\\S12.6.4_A15.js","negative":"."};
GlobalScopeTests["S12.7_A1_T1"]={"assertion":"Appearing of continue without an IterationStatement leads to syntax error","description":"Checking if execution of single \"continue\" without any IterationStatement fails","id":"S12.7_A1_T1","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A1_T1.js","negative":"."};
GlobalScopeTests["S12.7_A1_T2"]={"assertion":"Appearing of continue without an IterationStatement leads to syntax error","description":"Checking if single \"continue\" with Label but without any IterationStatement fails","id":"S12.7_A1_T2","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A1_T2.js","negative":"."};
GlobalScopeTests["S12.7_A1_T3"]={"assertion":"Appearing of continue without an IterationStatement leads to syntax error","description":"Checking if laballed \"continue\" with no IterationStatement, placed into a block, fails","id":"S12.7_A1_T3","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A1_T3.js","negative":"."};
GlobalScopeTests["S12.7_A1_T4"]={"assertion":"Appearing of continue without an IterationStatement leads to syntax error","description":"Checking if execution of \"continue\" with no IterationStatement, placed into a block, fails","id":"S12.7_A1_T4","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A1_T4.js","negative":"."};
GlobalScopeTests["S12.7_A5_T1"]={"assertion":"When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Trying to continue another labeled loop","id":"S12.7_A5_T1","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A5_T1.js","negative":"."};
GlobalScopeTests["S12.7_A5_T2"]={"assertion":"When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Identifier is a function name","id":"S12.7_A5_T2","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A5_T2.js","negative":"."};
GlobalScopeTests["S12.7_A5_T3"]={"assertion":"When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Identifier is within loop label","id":"S12.7_A5_T3","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A5_T3.js","negative":"."};
GlobalScopeTests["S12.7_A6"]={"assertion":"Appearing of \"continue\" within a function call that is within an IterationStatement yields SyntaxError","description":"Using labaled \"continue Identifier\" within a function body","id":"S12.7_A6","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A6.js","negative":"."};
GlobalScopeTests["S12.7_A8_T1"]={"assertion":"Appearing of \"continue\" within a \"try\/catch\" Block yields SyntaxError","description":"Checking if execution of \"continue Identifier\" within catch Block fails","id":"S12.7_A8_T1","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A8_T1.js","negative":"."};
GlobalScopeTests["S12.7_A8_T2"]={"assertion":"Appearing of \"continue\" within a \"try\/catch\" Block yields SyntaxError","description":"Checking if execution of \"continue\" within catch Block fails","id":"S12.7_A8_T2","path":"12_Statement\\12.7_The_continue_Statement\\S12.7_A8_T2.js","negative":"."};
GlobalScopeTests["S12.8_A1_T1"]={"assertion":"Appearing of break without an IterationStatement leads to syntax error","description":"Checking if break statement with no loop fails","id":"S12.8_A1_T1","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A1_T1.js","negative":"."};
GlobalScopeTests["S12.8_A1_T2"]={"assertion":"Appearing of break without an IterationStatement leads to syntax error","description":"Checking if break Identifier with no loop fails","id":"S12.8_A1_T2","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A1_T2.js","negative":"."};
GlobalScopeTests["S12.8_A1_T3"]={"assertion":"Appearing of break without an IterationStatement leads to syntax error","description":"Checking if break statement with no loop, placed into a block, fails","id":"S12.8_A1_T3","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A1_T3.js","negative":"."};
GlobalScopeTests["S12.8_A1_T4"]={"assertion":"Appearing of break without an IterationStatement leads to syntax error","description":"Checking if break Identifier with no loop, placed into a  block, fails","id":"S12.8_A1_T4","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A1_T4.js","negative":"."};
GlobalScopeTests["S12.8_A5_T1"]={"assertion":"Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Checking if breaking another labeled loop fails","id":"S12.8_A5_T1","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A5_T1.js","negative":"."};
GlobalScopeTests["S12.8_A5_T2"]={"assertion":"Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Checking if using function name as an Identifier appears to be invalid","id":"S12.8_A5_T2","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A5_T2.js","negative":"."};
GlobalScopeTests["S12.8_A5_T3"]={"assertion":"Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement","description":"Checking if using internal loop label as an Identifier appears to be invalid","id":"S12.8_A5_T3","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A5_T3.js","negative":"."};
GlobalScopeTests["S12.8_A6"]={"assertion":"Appearing of \"break\" within a function call that is nested in a IterationStatement yields SyntaxError","description":"Checking if using \"break Identifier\" within a function body appears to be invalid","id":"S12.8_A6","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A6.js","negative":"."};
GlobalScopeTests["S12.8_A8_T1"]={"assertion":"Appearing of \"break\" within \"try\/catch\" Block yields SyntaxError","description":"Checking if using \"break Identifier\" from within catch Block appears to be invalid","id":"S12.8_A8_T1","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A8_T1.js","negative":"."};
GlobalScopeTests["S12.8_A8_T2"]={"assertion":"Appearing of \"break\" within \"try\/catch\" Block yields SyntaxError","description":"Checking if using \"break Identifier\" from within catch Block appears to be invalid","id":"S12.8_A8_T2","path":"12_Statement\\12.8_The_break_Statement\\S12.8_A8_T2.js","negative":"."};
GlobalScopeTests["S12.9_A1_T1"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\" with no function fails","id":"S12.9_A1_T1","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T1.js","negative":"."};
GlobalScopeTests["S12.9_A1_T10"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return (0)\" with no function fails","id":"S12.9_A1_T10","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T10.js","negative":"."};
GlobalScopeTests["S12.9_A1_T2"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return x\" with no function fails","id":"S12.9_A1_T2","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T2.js","negative":"."};
GlobalScopeTests["S12.9_A1_T3"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\" within \"try\" statement fails","id":"S12.9_A1_T3","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T3.js","negative":"."};
GlobalScopeTests["S12.9_A1_T4"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\" with no function fails","id":"S12.9_A1_T4","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T4.js","negative":"."};
GlobalScopeTests["S12.9_A1_T5"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\" with no function, placed into a Block, fails","id":"S12.9_A1_T5","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T5.js","negative":"."};
GlobalScopeTests["S12.9_A1_T6"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\" with no function, placed into a loop, fails","id":"S12.9_A1_T6","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T6.js","negative":"."};
GlobalScopeTests["S12.9_A1_T7"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return x\" with no function, placed inside Block, fails","id":"S12.9_A1_T7","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T7.js","negative":"."};
GlobalScopeTests["S12.9_A1_T8"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return x\" with no function, placed into a loop, fails","id":"S12.9_A1_T8","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T8.js","negative":"."};
GlobalScopeTests["S12.9_A1_T9"]={"assertion":"Appearing of \"return\" without a function body leads to syntax error","description":"Checking if execution of \"return\", placed into a catch Block, fails","id":"S12.9_A1_T9","path":"12_Statement\\12.9_The_return_Statement\\S12.9_A1_T9.js","negative":"."};
GlobalScopeTests["S13_A7_T3"]={"assertion":"The FunctionBody must be SourceElements","description":"Checking if execution of \"function __func(){\\A\\B\\C}\" fails","id":"S13_A7_T3","path":"13_Function_Definition\\S13_A7_T3.js","negative":"."};
GlobalScopeTests["S15.10.2.11_A1_T2"]={"assertion":"DecimalEscape :: DecimalIntegerLiteral [lookahead not in DecimalDigit]","description":"It is an error if n is greater than the total number of left capturing parentheses in the entire regular expression","id":"S15.10.2.11_A1_T2","path":"15_Native\\15.10_RegExp_Objects\\15.10.2_Pattern_Semantics\\15.10.2.11_DecimalEscape\\S15.10.2.11_A1_T2.js","negative":"."};
GlobalScopeTests["S15.10.2.11_A1_T3"]={"assertion":"DecimalEscape :: DecimalIntegerLiteral [lookahead not in DecimalDigit]","description":"It is an error if n is greater than the total number of left capturing parentheses in the entire regular expression","id":"S15.10.2.11_A1_T3","path":"15_Native\\15.10_RegExp_Objects\\15.10.2_Pattern_Semantics\\15.10.2.11_DecimalEscape\\S15.10.2.11_A1_T3.js","negative":"."};
GlobalScopeTests["S15.1_A1_T1"]={"assertion":"The global object does not have a [[Construct]] property","description":"It is not possible to use the global object as a constructor","id":"S15.1_A1_T1","path":"15_Native\\15.1_The_Global_Object\\S15.1_A1_T1.js","negative":"."};
GlobalScopeTests["S15.1_A1_T2"]={"assertion":"The global object does not have a [[Construct]] property","description":"It is not possible to use the global object as a constructor","id":"S15.1_A1_T2","path":"15_Native\\15.1_The_Global_Object\\S15.1_A1_T2.js","negative":"."};
GlobalScopeTests["S15.1_A2_T1"]={"assertion":"The global object does not have a [[Call]] property","description":"It is not possible to invoke the global object as a function","id":"S15.1_A2_T1","path":"15_Native\\15.1_The_Global_Object\\S15.1_A2_T1.js","negative":"."};
GlobalScopeTests["S15.1.2.1_A2_T2"]={"assertion":"If the parse fails, throw a SyntaxError exception (but see also clause 16)","description":"Checking if execution of \"eval(\"x = 1; x\\u000A++\")\" fails","id":"S15.1.2.1_A2_T2","path":"15_Native\\15.1_The_Global_Object\\15.1.2_Function_Properties_of_the_Global_Object\\15.1.2.1_eval\\S15.1.2.1_A2_T2.js","negative":"."};