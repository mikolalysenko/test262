{
 "testCollection": {
  "name": "15.7.3.4_Number.NaN",
  "numTests": 4,
  "tests": [
   {
    "section": "15.7.3.4",
    "description": "Checking isNaN(Number.NaN)",
    "test": "// CHECK#1\nif (isNaN(Number.NaN) !== true) {\n  $ERROR('#1: Number.NaN === Not-a-Number');\n}\n",
    "id": "S15.7.3.4_A1"
   },
   {
    "section": "15.7.3.4",
    "description": "Checking if varying Number.NaN fails",
    "test": "// CHECK#1\nNumber.NaN = 1;\nif (isNaN(Number.NaN) !== true) {\n  $ERROR('#1: Number.NaN = 1; Number.NaN === Not-a-Number');\n}\n",
    "id": "S15.7.3.4_A2"
   },
   {
    "section": "15.7.3.4",
    "description": "Checking if deleting Number.NaN fails",
    "strict_mode_negative": "",
    "test": "// CHECK#1\nif (delete Number.NaN !== false) {\n  $ERROR('#1: delete Number.NaN === false');\n}\n",
    "id": "S15.7.3.4_A3",
    "strict_only": ""
   },
   {
    "section": "15.7.3.4",
    "description": "Checking if enumerating Number.NaN fails",
    "test": "//CHECK#1\nfor(var x in Number) {\n  if(x === \"NaN\") {\n    $ERROR('#1: Number.NaN has the attribute DontEnum');\n  }\n}\n\nif (Number.propertyIsEnumerable('NaN')) {\n  $ERROR('#2: Number.NaN has the attribute DontEnum');\n}\n",
    "id": "S15.7.3.4_A4"
   }
  ]
 }
}
