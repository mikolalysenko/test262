{
 "testCollection": {
  "name": "15.9.5.43",
  "numTests": 15,
  "tests": [
   {
    "id": "15.9.5.43-0-10",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-10.js",
    "description": "Date.prototype.toISOString - RangeError is not thrown when value of date is Date(1970, 0, -99999999, 0, 0, 0, 1), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n\n        if (timeZoneMinutes > 0) {\n            date = new Date(1970, 0, -99999999, 0, 0, 0, 1);\n\n            try {\n                date.toISOString();\n                return false;\n            } catch (e) {\n                return e instanceof RangeError;\n            }\n        } else {\n            date = new Date(1970, 0, -99999999, 0, 0 + timeZoneMinutes + 60, 0, 1);\n\n            dateStr = date.toISOString();\n\n            return dateStr[dateStr.length - 1] === \"Z\";\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-11",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-11.js",
    "description": "Date.prototype.toISOString - RangeError is not thrown when value of date is Date(1970, 0, 100000001, 0, 0, 0, -1), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n\n        date = new Date(1970, 0, 100000001, 0, 0 + timeZoneMinutes - 60, 0, -1);\n        dateStr = date.toISOString();\n\n        return dateStr[dateStr.length - 1] === \"Z\";\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-12",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-12.js",
    "description": "Date.prototype.toISOString - RangeError is not thrown when value of date is Date(1970, 0, 100000001, 0, 0, 0, 0), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n\n        date = new Date(1970, 0, 100000001, 0, 0 + timeZoneMinutes - 60, 0, 0);\n        dateStr = date.toISOString();\n\n        return dateStr[dateStr.length - 1] === \"Z\";\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-13",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-13.js",
    "description": "Date.prototype.toISOString - RangeError is thrown when value of date is Date(1970, 0, 100000001, 0, 0, 0, 1), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n        try {\n            if (timeZoneMinutes > 0) {\n                date = new Date(1970, 0, 100000001, 0, 0 + timeZoneMinutes + 60, 0, 1);\n                dateStr = date.toISOString();\n                return false;\n            } else {\n                date = new Date(1970, 0, 100000001, 0, 0, 0, 1);\n                dateStr = date.toISOString();\n                return false;\n            }\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-14",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-14.js",
    "description": "Date.prototype.toISOString - when value of year is -Infinity Date.prototype.toISOString throw the RangeError",
    "test": "assertTrue((function testcase() {\n        var date = new Date(-Infinity, 1, 70, 0, 0, 0);\n\n        try {\n            date.toISOString();\n        } catch (ex) {\n            return ex instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-15",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-15.js",
    "description": "Date.prototype.toISOString - value of year is Infinity Date.prototype.toISOString throw the RangeError",
    "test": "assertTrue((function testcase() {\n        var date = new Date(Infinity, 1, 70, 0, 0, 0);\n\n        try {\n            date.toISOString();\n        } catch (ex) {\n            return ex instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-16",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-16.js",
    "description": "Date.prototype.toISOString - when this is a String object that value format is 'YYYY-MM-DDTHH:mm:ss.sssZ' Date.prototype.toISOString throw the TypeError",
    "test": "assertTrue((function testcase() {\n        var date = new String(\"1970-01-00000:00:00.000Z\");\n\n        try {\n            Date.prototype.toISOString.call(date);\n            return false;\n        } catch (ex) {\n            return ex instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-2",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-2.js",
    "description": "Date.prototype.toISOString must exist as a function taking 0 parameters",
    "test": "assertTrue((Date.prototype.toISOString.length === 0));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-3",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-3.js",
    "description": "Date.prototype.toISOString must exist as a function",
    "test": "assertTrue((typeof (Date.prototype.toISOString) === \"function\"));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-4",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-4.js",
    "description": "Date.prototype.toISOString - format of returned string is 'YYYY-MM-DDTHH:mm:ss.sssZ', the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var date = new Date(1999, 09, 10, 10, 10, 10, 10);\n        var localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n\n        return localDate.toISOString() === \"1999-10-10T10:10:10.010Z\";\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-5",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-5.js",
    "description": "Date.prototype.toISOString - The returned string is the UTC time zone(0)",
    "test": "assertTrue((function testcase() {\n        var dateStr = (new Date()).toISOString();\n        return dateStr[dateStr.length - 1] === \"Z\";\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-6",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-6.js",
    "description": "Date.prototype.toISOString - TypeError is thrown when this is any other objects instead of Date object",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Date.prototype.toISOString.call([]);\n            return false;\n        } catch (ex) {\n            return ex instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-7",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-7.js",
    "description": "Date.prototype.toISOString - TypeError is thrown when this is any primitive values",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Date.prototype.toISOString.call(15);\n            return false;\n        } catch (ex) {\n            return ex instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-8",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-8.js",
    "description": "Date.prototype.toISOString - RangeError is thrown when value of date is Date(1970, 0, -99999999, 0, 0, 0, -1), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n        try {\n            if (timeZoneMinutes > 0) {\n                date = new Date(1970, 0, -99999999, 0, 0, 0, -1);\n            } else {\n                date = new Date(1970, 0, -99999999, 0, 0 + timeZoneMinutes - 60, 0, -1);\n            }\n\n            dateStr = date.toISOString();\n\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.9.5.43-0-9",
    "path": "TestCases/chapter15/15.9/15.9.5/15.9.5.43/15.9.5.43-0-9.js",
    "description": "Date.prototype.toISOString - RangeError is not thrown when value of date is Date(1970, 0, -99999999, 0, 0, 0, 0), the time zone is UTC(0)",
    "test": "assertTrue((function testcase() {\n        var timeZoneMinutes = new Date().getTimezoneOffset() * (-1);\n        var date, dateStr;\n\n        if (timeZoneMinutes > 0) {\n            date = new Date(1970, 0, -99999999, 0, 0, 0, 0);\n\n            try {\n                date.toISOString();\n                return false;\n            } catch (e) {\n                return e instanceof RangeError;\n            }\n        } else {\n            date = new Date(1970, 0, -99999999, 0, 0 + timeZoneMinutes + 60, 0, 0);\n\n            dateStr = date.toISOString();\n\n            return dateStr[dateStr.length - 1] === \"Z\";\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Date.prototype.toISOString))"
   }
  ]
 }
}
