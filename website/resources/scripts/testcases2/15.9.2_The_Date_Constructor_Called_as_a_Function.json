{
 "testCollection": {
  "name": "15.9.2_The_Date_Constructor_Called_as_a_Function",
  "numTests": 2,
  "tests": [
   {
    "section": "15.9.2.1",
    "description": "Checking type of returned value",
    "test": "//CHECK#1\nif( typeof Date() !== \"string\" ) {\n  $ERROR('#1: typeof Date() should be \"string\", actual is '+(typeof Date()));\n}\n\n//CHECK#2\nif( typeof Date(1) !== \"string\"  ) {\n  $ERROR('#2: typeof Date(1) should be \"string\", actual is '+(typeof Date(1)));\n}\n\n//CHECK#3\nif( typeof Date(1970, 1) !== \"string\"  ) {\n  $ERROR('#3: typeof Date(1970, 1) should be \"string\", actual is '+(typeof Date(1970, 1)));\n}\n\n//CHECK#4\nif( typeof Date(1970, 1, 1) !== \"string\"  ) {\n  $ERROR('#4: typeof Date(1970, 1, 1) should be \"string\", actual is '+(typeof Date(1970, 1, 1)));\n}\n\n//CHECK#5\nif( typeof Date(1970, 1, 1, 1) !== \"string\"  ) {\n  $ERROR('#5: typeof Date(1970, 1, 1, 1) should be \"string\", actual is '+(typeof Date(1970, 1, 1, 1)));\n}\n\n//CHECK#6\nif( typeof Date(1970, 1, 1, 1) !== \"string\"  ) {\n  $ERROR('#7: typeof Date(1970, 1, 1, 1) should be \"string\", actual is '+(typeof Date(1970, 1, 1, 1)));\n}\n\n//CHECK#8\nif( typeof Date(1970, 1, 1, 1, 0) !== \"string\"  ) {\n  $ERROR('#8: typeof Date(1970, 1, 1, 1, 0) should be \"string\", actual is '+(typeof Date(1970, 1, 1, 1, 0)));\n}\n\n//CHECK#9\nif( typeof Date(1970, 1, 1, 1, 0, 0) !== \"string\"  ) {\n  $ERROR('#9: typeof Date(1970, 1, 1, 1, 0, 0) should be \"string\", actual is '+(typeof Date(1970, 1, 1, 1, 0, 0)));\n}\n\n//CHECK#10\nif( typeof Date(1970, 1, 1, 1, 0, 0, 0) !== \"string\"  ) {\n  $ERROR('#10: typeof Date(1970, 1, 1, 1, 0, 0, 0) should be \"string\", actual is '+(typeof Date(1970, 1, 1, 1, 0, 0, 0)));\n}\n\n//CHECK#11\nif( typeof Date(Number.NaN) !== \"string\"  ) {\n  $ERROR('#11: typeof Date(Number.NaN) should be \"string\", actual is '+(typeof Date(Number.NaN)));\n}\n\n//CHECK#12\nif( typeof Date(Number.POSITIVE_INFINITY) !== \"string\"  ) {\n  $ERROR('#12: typeof Date(Number.POSITIVE_INFINITY) should be \"string\", actual is '+(typeof Date(Number.POSITIVE_INFINITY)));\n}\n\n//CHECK#13\nif( typeof Date(Number.NEGATIVE_INFINITY) !== \"string\"  ) {\n  $ERROR('#13: typeof Date(Number.NEGATIVE_INFINITY) should be \"string\", actual is '+(typeof Date(Number.NEGATIVE_INFINITY)));\n}\n\n//CHECK#14\nif( typeof Date(undefined) !== \"string\"  ) {\n  $ERROR('#14: typeof Date(undefined) should be \"string\", actual is '+(typeof Date(undefined)));\n}\n\n//CHECK#15\nif( typeof Date(null) !== \"string\"  ) {\n  $ERROR('#15: typeof Date(null) should be \"string\", actual is '+(typeof Date(null)));\n}\n",
    "id": "S15.9.2.1_A1"
   },
   {
    "section": "15.9.2.1",
    "description": "Use various number arguments and various types of ones",
    "test": "function isEqual(d1, d2) {\n  if (d1 === d2) {\n    return true;\n  } else if (Math.abs(Date.parse(d1) - Date.parse(d2)) <= 1000) {\n    return true;\n  } else { \n    return false;\n  }\n}\n\n//CHECK#1\nif( !isEqual(Date(), (new Date()).toString()) ) {\n  $ERROR('#1: Date() is equal to (new Date()).toString()');\n}\n\n//CHECK#2\nif( !isEqual(Date(1), (new Date()).toString()) ) {\n  $ERROR('#2: Date(1) is equal to (new Date()).toString()');\n}\n\n//CHECK#3\nif( !isEqual(Date(1970, 1), (new Date()).toString()) ) {\n  $ERROR('#3: Date(1970, 1) is equal to (new Date()).toString()');\n}\n\n//CHECK#4\nif( !isEqual(Date(1970, 1, 1), (new Date()).toString()) ) {\n  $ERROR('#4: Date(1970, 1, 1) is equal to (new Date()).toString()');\n}\n\n//CHECK#5\nif( !isEqual(Date(1970, 1, 1, 1), (new Date()).toString()) ) {\n  $ERROR('#5: Date(1970, 1, 1, 1) is equal to (new Date()).toString()');\n}\n\n//CHECK#6\nif( !isEqual(Date(1970, 1, 1, 1), (new Date()).toString()) ) {\n  $ERROR('#7: Date(1970, 1, 1, 1) is equal to (new Date()).toString()');\n}\n\n//CHECK#8\nif( !isEqual(Date(1970, 1, 1, 1, 0), (new Date()).toString()) ) {\n  $ERROR('#8: Date(1970, 1, 1, 1, 0) is equal to (new Date()).toString()');\n}\n\n//CHECK#9\nif( !isEqual(Date(1970, 1, 1, 1, 0, 0), (new Date()).toString()) ) {\n  $ERROR('#9: Date(1970, 1, 1, 1, 0, 0) is equal to (new Date()).toString()');\n}\n\n//CHECK#10\nif( !isEqual(Date(1970, 1, 1, 1, 0, 0, 0), (new Date()).toString()) ) {\n  $ERROR('#10: Date(1970, 1, 1, 1, 0, 0, 0) is equal to (new Date()).toString()');\n}\n\n//CHECK#11\nif( !isEqual(Date(Number.NaN), (new Date()).toString()) ) {\n  $ERROR('#11: Date(Number.NaN) is equal to (new Date()).toString()');\n}\n\n//CHECK#12\nif( !isEqual(Date(Number.POSITIVE_INFINITY), (new Date()).toString()) ) {\n  $ERROR('#12: Date(Number.POSITIVE_INFINITY) is equal to (new Date()).toString()');\n}\n\n//CHECK#13\nif( !isEqual(Date(Number.NEGATIVE_INFINITY), (new Date()).toString()) ) {\n  $ERROR('#13: Date(Number.NEGATIVE_INFINITY) is equal to (new Date()).toString()');\n}\n\n//CHECK#14\nif( !isEqual(Date(undefined), (new Date()).toString()) ) {\n  $ERROR('#14: Date(undefined) is equal to (new Date()).toString()');\n}\n\n//CHECK#15\nif( !isEqual(Date(null), (new Date()).toString()) ) {\n  $ERROR('#15: Date(null) is equal to (new Date()).toString()');\n}\n",
    "id": "S15.9.2.1_A2"
   }
  ]
 }
}
