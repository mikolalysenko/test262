{
 "testCollection": {
  "name": "15.4.4.22",
  "numTests": 258,
  "tests": [
   {
    "id": "15.4.4.22-0-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-0-1.js",
    "description": "Array.prototype.reduceRight must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = Array.prototype.reduceRight;\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "15.4.4.22-0-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-0-2.js",
    "description": "Array.prototype.reduceRight.length must be 1",
    "test": "assertTrue((Array.prototype.reduceRight.length === 1));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-1.js",
    "description": "Array.prototype.reduceRight applied to undefined throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Array.prototype.reduceRight.call(undefined); \n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-10.js",
    "description": "Array.prototype.reduceRight applied to the Math object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return '[object Math]' === Object.prototype.toString.call(obj);\n        }\n\n        try {\n            Math.length = 1;\n            Math[0] = 1;\n            return Array.prototype.reduceRight.call(Math, callbackfn, 1) && accessed;\n        } finally {\n            delete Math[0];\n            delete Math.length;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-11.js",
    "description": "Array.prototype.reduceRight applied to Date object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new Date();\n        obj.length = 1;\n        obj[0] = 1;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj instanceof Date;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-12.js",
    "description": "Array.prototype.reduceRight applied to RegExp object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new RegExp();\n        obj.length = 1;\n        obj[0] = 1;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, o) {\n            accessed = true;\n            return o instanceof RegExp;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-13.js",
    "description": "Array.prototype.reduceRight applied to the JSON object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return ('[object JSON]' === Object.prototype.toString.call(obj));\n        }\n\n        try {\n            JSON.length = 1;\n            JSON[0] = 1;\n            return Array.prototype.reduceRight.call(JSON, callbackfn, 1) && accessed;\n        } finally {\n            delete JSON.length;\n            delete JSON[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-14.js",
    "description": "Array.prototype.reduceRight applied to Error object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new Error();\n        obj.length = 1;\n        obj[0] = 1;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, o) {\n            accessed = true;\n            return o instanceof Error;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-15.js",
    "description": "Array.prototype.reduceRight applied to the Arguments object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return '[object Arguments]' === Object.prototype.toString.call(obj);\n        }\n\n        var obj = (function () {\n            return arguments;\n        }(\"a\", \"b\"));\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, \"a\") && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-2.js",
    "description": "Array.prototype.reduceRight applied to null throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Array.prototype.reduceRight.call(null);\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-3.js",
    "description": "Array.prototype.reduceRight applied to boolean primitive",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj instanceof Boolean;\n        }\n\n        try {\n            Boolean.prototype[0] = 1;\n            Boolean.prototype.length = 1;\n            return Array.prototype.reduceRight.call(false, callbackfn, 1) && accessed;\n        } finally {\n            delete Boolean.prototype[0];\n            delete Boolean.prototype.length;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-4.js",
    "description": "Array.prototype.reduceRight applied to Boolean object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new Boolean(true);\n        obj.length = 2;\n        obj[0] = 11;\n        obj[1] = 12;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj instanceof Boolean;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-5.js",
    "description": "Array.prototype.reduceRight applied to number primitive",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj instanceof Number;\n        }\n\n        try {\n            Number.prototype[0] = 1;\n            Number.prototype.length = 1;\n            return Array.prototype.reduceRight.call(2.5, callbackfn, 1) && accessed;\n        } finally {\n            delete Number.prototype[0];\n            delete Number.prototype.length;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-6.js",
    "description": "Array.prototype.reduceRight applied to Number object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new Number(-128);\n        obj.length = 2;\n        obj[0] = 11;\n        obj[1] = 12;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, o) {\n            accessed = true;\n            return o instanceof Number;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-7.js",
    "description": "Array.prototype.reduceRight applied to string primitive",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj instanceof String;\n        }\n\n        return Array.prototype.reduceRight.call(\"hello\\nworld\\\\!\", callbackfn, \"h\") && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-8.js",
    "description": "Array.prototype.reduceRight applied to String object",
    "test": "assertTrue((function testcase() {\n\n        var obj = new String(\"hello\\nworld\\\\!\");\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, o) {\n            accessed = true;\n            return o instanceof String;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, \"h\") && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-1-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-1-9.js",
    "description": "Array.prototype.reduceRight applied to Function object",
    "test": "assertTrue((function testcase() {\n\n        var obj = function (a, b) {\n            return a + b;\n        };\n        obj[0] = 11;\n        obj[1] = 9;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, o) {\n            accessed = true;\n            return o instanceof Function;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-1.js",
    "description": "Array.prototype.reduceRight doesn't mutate the Array on which it is called on",
    "test": "assertTrue((function testcase() {\n\n  function callbackfn(prevVal, curVal,  idx, obj)\n  {\n    return 1;\n  }\n  var srcArr = [1,2,3,4,5];\n  srcArr.reduceRight(callbackfn);\n  if(srcArr[0] === 1 &&\n     srcArr[1] === 2 &&\n     srcArr[2] === 3 &&\n     srcArr[3] === 4 &&\n     srcArr[4] === 5)\n  {\n    return true;\n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-2.js",
    "description": "Array.prototype.reduceRight reduces array in descending order of indices",
    "test": "assertTrue((function testcase() {\n\n  function callbackfn(prevVal, curVal,  idx, obj)\n  {\n    return prevVal + curVal;\n  }\n  var srcArr = ['1','2','3','4','5'];\n  if(srcArr.reduceRight(callbackfn) === '54321')\n  {\n    return true;\n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-3.js",
    "description": "Array.prototype.reduceRight - subclassed array with length 1",
    "test": "assertTrue((function testcase() {\n  foo.prototype = [1];\n  function foo() {}\n  var f = new foo();\n  \n  function cb(){}\n  if(f.reduceRight(cb) === 1)\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-4.js",
    "description": "Array.prototype.reduceRight - subclassed array with length more than 1",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(0, 1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  function cb(prevVal, curVal, idx, obj){return prevVal + curVal;}\n  if(f.reduceRight(cb) === 6)\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-5.js",
    "description": "Array.prototype.reduceRight reduces array in descending order of indices(initialvalue present)",
    "test": "assertTrue((function testcase() {\n\n  function callbackfn(prevVal, curVal,  idx, obj)\n  {\n    return prevVal + curVal;\n  }\n  var srcArr = ['1','2','3','4','5'];\n  if(srcArr.reduceRight(callbackfn,'6') === '654321')\n  {\n    return true;\n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-6.js",
    "description": "Array.prototype.reduceRight - subclassed array when initialvalue provided",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(0, 1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  function cb(prevVal, curVal, idx, obj){return prevVal + curVal;}\n  if(f.reduceRight(cb,\"4\") === \"43210\")\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-7.js",
    "description": "Array.prototype.reduceRight - subclassed array when length to 1 and initialvalue provided",
    "test": "assertTrue((function testcase() {\n  foo.prototype = [1];\n  function foo() {}\n  var f = new foo();\n  \n  function cb(prevVal, curVal, idx, obj){return prevVal + curVal;}\n  if(f.reduceRight(cb,\"4\") === \"41\")\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-10-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-10-8.js",
    "description": "Array.prototype.reduceRight doesn't visit expandos",
    "test": "assertTrue((function testcase() {\n\n  var callCnt = 0;\n  function callbackfn(prevVal, curVal,  idx, obj)\n  {\n    callCnt++;\n  }\n  var srcArr = ['1','2','3','4','5'];\n  srcArr[\"i\"] = 10;\n  srcArr[true] = 11;\n\n  srcArr.reduceRight(callbackfn);\n\n  if(callCnt == 4)\n  {\n    return true;\n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-1.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own data property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: 2\n        };\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-10.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var Con = function () { };\n\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var proto = {};\n\n        Object.defineProperty(proto, \"length\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        Con.prototype = proto;\n\n        var child = new Con();\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n\n        return Array.prototype.reduceRight.call(child, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-11.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own accessor property without a get function",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return typeof obj.length === \"undefined\";\n        }\n\n        var obj = {\n            0: 11,\n            1: 12\n        };\n        Object.defineProperty(obj, \"length\", {\n            set: function () { },\n            configurable: true\n        });\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 111) === 111 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-12.js",
    "description": "Array.prototype.reduceRight - 'length' is own accessor property without a get function that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return typeof obj.length === \"undefined\";\n        }\n\n        try {\n            Object.defineProperty(Object.prototype, \"length\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: true\n            });\n\n            var obj = { 0: 12, 1: 13 };\n            Object.defineProperty(obj, \"length\", {\n                set: function () { },\n                configurable: true\n            });\n\n            return Array.prototype.reduceRight.call(obj, callbackfn, 11) === 11 && !accessed;\n        } finally {\n            delete Object.prototype.length;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-13.js",
    "description": "Array.prototype.reduceRight applied to the Array-like object that 'length' is inherited accessor property without a get function",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return curVal > 10;\n        }\n\n        var proto = {};\n        Object.defineProperty(proto, \"length\", {\n            set: function () { },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child[0] = 11;\n        child[1] = 12;\n\n        return Array.prototype.reduceRight.call(child, callbackfn, 111) === 111 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-14.js",
    "description": "Array.prototype.reduceRight applied to the Array-like object that 'length' property doesn't exist",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return curVal > 10;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 111) === 111 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-15.js",
    "description": "Array.prototype.reduceRight - 'length' is property of the global object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === fnGlobalObject().length;\n        }\n\n        try {\n            var oldLen = fnGlobalObject().length;\n            fnGlobalObject()[0] = 12;\n            fnGlobalObject()[1] = 11;\n            fnGlobalObject()[2] = 9;\n            fnGlobalObject().length = 2;\n            return Array.prototype.reduceRight.call(fnGlobalObject(), callbackfn, 111) && accessed;\n        } finally {\n            delete fnGlobalObject()[0];\n            delete fnGlobalObject()[1];\n            delete fnGlobalObject()[2];\n            fnGlobalObject().length = oldLen;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-17.js",
    "description": "Array.prototype.reduceRight applied to the Arguments object, which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var arg;\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var func = function (a, b) {\n            arg = arguments;\n            return Array.prototype.reduceRight.call(arguments, callbackfn, 11);\n        };\n\n        return func(12, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-18.js",
    "description": "Array.prototype.reduceRight applied to String object, which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var str = new String(\"432\");\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 3;\n        }\n\n        try {\n            String.prototype[3] = \"1\";\n            return Array.prototype.reduceRight.call(str, callbackfn, 111) && accessed;\n        } finally {\n            delete String.prototype[3];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-19.js",
    "description": "Array.prototype.reduceRight applied to Function object, which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var fun = function (a, b) {\n            return a + b;\n        };\n        fun[0] = 12;\n        fun[1] = 11;\n        fun[2] = 9;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        return Array.prototype.reduceRight.call(fun, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-2.js",
    "description": "Array.prototype.reduceRight - 'length' is own data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        return [12, 11].reduceRight(callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-3.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own data property that overrides an inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var proto = { length: 3 };\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 2;\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n        return Array.prototype.reduceRight.call(child, callbackfn) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-4.js",
    "description": "Array.prototype.reduceRight - 'length' is own data property that overrides an inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var arrProtoLen;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        try {\n            arrProtoLen = Array.prototype.length;\n            Array.prototype.length = 0;\n\n            return [12, 11].reduceRight(callbackfn, 11) && accessed;\n        } finally {\n            Array.prototype.length = arrProtoLen;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-5.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own data property that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var proto = {};\n        Object.defineProperty(proto, \"length\", {\n            get: function () {\n                return 3;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        Object.defineProperty(child, \"length\", {\n            value: 2,\n            configurable: true\n        });\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n        return Array.prototype.reduceRight.call(child, callbackfn) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-6.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var proto = { length: 2 };\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n        function callbackfn1(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        return Array.prototype.reduceRight.call(child, callbackfn1, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-2-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-7.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own accessor property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = true;\n        var obj = {};\n        obj[0] = 12;\n        obj[1] = 11;\n        obj[2] = 9;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-8.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own accessor property that overrides an inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var proto = { length: 3 };\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n\n        Object.defineProperty(child, \"length\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n        return Array.prototype.reduceRight.call(child, callbackfn, 11) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-2-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-2-9.js",
    "description": "Array.prototype.reduceRight applied to Array-like object, 'length' is an own accessor property that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn1(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return obj.length === 2;\n        }\n\n        var proto = {};\n        Object.defineProperty(proto, \"length\", {\n            get: function () {\n                return 3;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        Object.defineProperty(child, \"length\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n        child[0] = 12;\n        child[1] = 11;\n        child[2] = 9;\n\n        return Array.prototype.reduceRight.call(child, callbackfn1, 111) && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-3-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-1.js",
    "description": "Array.prototype.reduceRight - value of 'length' is undefined",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: undefined };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-10.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is NaN)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: NaN };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-11.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing a positive number",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: \"2\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-12.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing a negative number",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 11, 1: 12, 2: 9, length: \"-4294967294\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-13.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing a decimal number",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: \"2.5\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-14.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing +/-Infinity",
    "test": "assertTrue((function testcase() {\n\n        var accessed1 = false;\n        var accessed2 = false;\n        var accessed3 = false;\n\n        function callbackfn1(prevVal, curVal, idx, obj) {\n            accessed1 = true;\n        }\n\n        function callbackfn2(prevVal, curVal, idx, obj) {\n            accessed2 = true;\n        }\n\n        function callbackfn3(prevVal, curVal, idx, obj) {\n            accessed3 = true;\n        }\n\n        var obj1 = { 0: 9, length: \"Infinity\" };\n        var obj2 = { 0: 9, length: \"-Infinity\" };\n        var obj3 = { 0: 9, length: \"+Infinity\" };\n\n        return Array.prototype.reduceRight.call(obj1, callbackfn1, 1) === 1 &&\n            Array.prototype.reduceRight.call(obj2, callbackfn2, 2) === 2 &&\n            Array.prototype.reduceRight.call(obj3, callbackfn3, 3) === 3 &&\n            !accessed1 && !accessed2 && !accessed3;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-15.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing an exponential number",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: \"2E0\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-16",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-16.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing a hex number",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: \"0x0002\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-17.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string containing a number with leading zeros",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: \"0002.00\" };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-18.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a string that can't convert to a number",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, 1: 8, length: \"two\" };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 11) === 11 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-19.js",
    "description": "Array.prototype.reduceRight - value of 'length' is an object which has an own toString method",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var toStringAccessed = false;\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: {\n                toString: function () {\n                    toStringAccessed = true;\n                    return '2';\n                }\n            }\n        };\n\n        // objects inherit the default valueOf() method from Object\n        // that simply returns itself. Since the default valueOf() method\n        // does not return a primitive value, ES next tries to convert the object\n        // to a number by calling its toString() method and converting the\n        // resulting string to a number.\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2 && toStringAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-2.js",
    "description": "Array.prototype.reduceRight applied to an Array-like object, 'length' is 0 (length overridden to false(type conversion))",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: false };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-20",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-20.js",
    "description": "Array.prototype.reduceRight - value of 'length' is an Object which has an own valueOf method",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var valueOfAccessed = false;\n\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: {\n                valueOf: function () {\n                    valueOfAccessed = true;\n                    return 2;\n                }\n            }\n        };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2 && valueOfAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-21",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-21.js",
    "description": "Array.prototype.reduceRight - 'length' is an object that has an own valueOf method that returns an object and toString method that returns a string",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: {\n                valueOf: function () {\n                    valueOfAccessed = true;\n                    return {};\n                },\n                toString: function () {\n                    toStringAccessed = true;\n                    return '2';\n                }\n            }\n        };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2 && valueOfAccessed && toStringAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-22",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-22.js",
    "description": "Array.prototype.reduceRight throws TypeError exception when 'length' is an object with toString and valueOf methods that don�t return primitive values",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = {\n            0: 11,\n            1: 12,\n\n            length: {\n                valueOf: function () {\n                    valueOfAccessed = true;\n                    return {};\n                },\n                toString: function () {\n                    toStringAccessed = true;\n                    return {};\n                }\n            }\n        };\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn, 1);\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && toStringAccessed && valueOfAccessed && !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-23",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-23.js",
    "description": "Array.prototype.reduceRight uses inherited valueOf method when 'length' is an object with an own toString and inherited valueOf methods",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        var valueOfAccessed = false;\n        var toStringAccessed = false;\n\n        var proto = {\n            valueOf: function () {\n                valueOfAccessed = true;\n                return 2;\n            }\n        };\n        var Con = function () { };\n        Con.prototype = proto;\n        var child = new Con();\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        child.toString = function () {\n            toStringAccessed = true;\n            return '1';\n        };\n\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: child\n        };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2 && valueOfAccessed && !toStringAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-24",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-24.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a positive non-integer, ensure truncation occurs in the proper direction",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 0: 12, 1: 11, 2: 9, length: 2.685 };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-25",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-25.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a negative non-integer, ensure truncation occurs in the proper direction",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = {\n            0: 12,\n            1: 11,\n            2: 9,\n            length: -4294967294.5\n        };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-28",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-28.js",
    "description": "Array.prototype.reduceRight - value of 'length' is boundary value (2^32)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = {\n            0: 12,\n            length: 4294967296\n        };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-29",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-29.js",
    "description": "Array.prototype.reduceRight - value of 'length' is boundary value (2^32 + 1)",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 0) {\n                testResult1 = false;\n            }\n\n            if (idx === 0) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = {\n            0: 11,\n            1: 9,\n            length: 4294967297\n        };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-3.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is 0)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: 0 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-4.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is +0)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: +0 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-5.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is -0)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: -0 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-6.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is positive)",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 1: 11, 2: 9, length: 2 };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-7.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is negative)",
    "test": "assertTrue((function testcase() {\n\n        var testResult1 = true;\n        var testResult2 = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx > 1) {\n                testResult1 = false;\n            }\n\n            if (idx === 1) {\n                testResult2 = true;\n            }\n            return false;\n        }\n\n        var obj = { 1: 11, 2: 9, length: -4294967294 };\n\n        Array.prototype.reduceRight.call(obj, callbackfn, 1);\n        return testResult1 && testResult2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-8.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is Infinity)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: Infinity };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-3-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-3-9.js",
    "description": "Array.prototype.reduceRight - value of 'length' is a number (value is -Infinity)",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n        }\n\n        var obj = { 0: 9, length: -Infinity };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === 1 && !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-1.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is undefined",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight();    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-10.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 2",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                throw new SyntaxError();\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, undefined);\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-4-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-11.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 3",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        throw new SyntaxError();\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, undefined);\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-4-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-12.js",
    "description": "Array.prototype.reduceRight - 'callbackfn' is a function",
    "test": "assertTrue((function testcase() {\n\n        var initialValue = 0;\n        function callbackfn(accum, val, idx, obj) {\n            accum += val;\n            return accum;\n        }\n\n        return 20 === [11, 9].reduceRight(callbackfn, initialValue);\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-15.js",
    "description": "Array.prototype.reduceRight - calling with no callbackfn is the same as passing undefined for callbackfn",
    "test": "assertTrue((function testcase() {\n        var obj = { 10: 10 };\n        var lengthAccessed = false;\n        var loopAccessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                lengthAccessed = true;\n                return 20;\n            },\n            configurable: true\n        });\n        Object.defineProperty(obj, \"0\", {\n            get: function () {\n                loopAccessed = true;\n                return 10;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, undefined);\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && lengthAccessed && !loopAccessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-4-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-2.js",
    "description": "Array.prototype.reduceRight throws ReferenceError if callbackfn is unreferenced",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(foo);    \n  }\n  catch(e) {\n    if(e instanceof ReferenceError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-3.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is null",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(null);    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-4.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is boolean",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(true);    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-5.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is number",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(5);    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-6.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is string",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(\"abc\");    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-7.js",
    "description": "Array.prototype.reduceRight throws TypeError if callbackfn is Object without [[Call]] internal method",
    "test": "assertTrue((function testcase() {\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(new Object());    \n  }\n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-4-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-8.js",
    "description": "Array.prototype.reduceRight - side effects produced by step 2 are visible when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                accessed = true;\n                return 2;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, null);\n            return false;\n        } catch (ex) {\n            return ex instanceof TypeError && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-4-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-4-9.js",
    "description": "Array.prototype.reduceRight - side effects produced by step 3 are visible when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        accessed = true;\n                        return \"2\";\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, null);\n            return false;\n        } catch (ex) {\n            return ex instanceof TypeError && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-5-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-1.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (empty array), no initVal",
    "test": "assertTrue((function testcase() {\n  function cb(){}\n  \n  try {\n    [].reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-10.js",
    "description": "Array.prototype.reduceRight - side-effects produced by step 2 when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                accessed = true;\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-5-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-11.js",
    "description": "Array.prototype.reduceRight - side-effects produced by step 3 when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        accessed = true;\n                        return \"0\";\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-5-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-12.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 2",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                throw new SyntaxError();\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-5-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-13.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 3",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 0: 11, 1: 12 };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        throw new SyntaxError();\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-5-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-2.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden to null (type conversion)), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = null;\n  \n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-3.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden to false (type conversion)), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = false;\n  \n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-4.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden to 0 (type conversion)), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = 0;\n  \n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-5.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden to '0' (type conversion)), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = '0';\n  \n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-6.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden with obj with valueOf), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  var o = { valueOf: function () { return 0;}};\n  f.length = o;\n  \n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-7.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden with obj w/o valueOf (toString)), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  var o = { toString: function () { return '0';}};\n  f.length = o;\n  \n  // objects inherit the default valueOf method of the Object object;\n  // that simply returns the itself. Since the default valueOf() method\n  // does not return a primitive value, ES next tries to convert the object\n  // to a number by calling its toString() method and converting the\n  // resulting string to a number.\n\n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-8.js",
    "description": "Array.prototype.reduceRight throws TypeError if 'length' is 0 (subclassed Array, length overridden with []), no initVal",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  f.length = [];\n  \n  // objects inherit the default valueOf method of the Object object;\n  // that simply returns the itself. Since the default valueOf() method\n  // does not return a primitive value, ES next tries to convert the object\n  // to a number by calling its toString() method and converting the\n  // resulting string to a number.\n  //\n  // The toString( ) method on Array converts the array elements to strings,\n  // then returns the result of concatenating these strings, with commas in\n  // between. An array with no elements converts to the empty string, which\n  // converts to the number 0. If an array has a single element that is a\n  // number n, the array converts to a string representation of n, which is\n  // then converted back to n itself. If an array contains more than one element,\n  // or if its one element is not a number, the array converts to NaN.\n\n  function cb(){}\n  try {\n    f.reduceRight(cb);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-5-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-5-9.js",
    "description": "Array.prototype.reduceRight - 'initialValue' is returned if 'len' is 0 and 'initialValue' is present",
    "test": "assertTrue((function testcase() {\n\n        var initialValue = 10;\n        return initialValue === [].reduceRight(function () { }, initialValue);\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-1.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (empty array)",
    "test": "assertTrue((function testcase() {\n  function cb(){}\n  \n  try {\n    if([].reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-10.js",
    "description": "Array.prototype.reduceRight - 'initialValue' is present",
    "test": "assertTrue((function testcase() {\n\n        var str = \"initialValue is present\";\n        return str === [].reduceRight(function () { }, str);\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-11.js",
    "description": "Array.prototype.reduceRight - 'initialValue' is not present",
    "test": "assertTrue((function testcase() {\n\n        var str = \"initialValue is not present\";\n        return str === [str].reduceRight(function () { });\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-2.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden to null (type conversion))",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = null;\n  \n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-3.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden to false (type conversion))",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = false;\n  \n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-4.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden to 0 (type conversion))",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = 0;\n  \n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-5.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden to '0' (type conversion))",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  f.length = '0';\n  \n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-6.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden with obj with valueOf)",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  var o = { valueOf: function () { return 0;}};\n  f.length = o;\n  \n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-7.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden with obj w/o valueOf (toString))",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  var o = { toString: function () { return '0';}};\n  f.length = o;\n  \n  // objects inherit the default valueOf method of the Object object;\n  // that simply returns the itself. Since the default valueOf() method\n  // does not return a primitive value, ES next tries to convert the object\n  // to a number by calling its toString() method and converting the\n  // resulting string to a number.\n\n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-8.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden with [])",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  f.length = [];\n  \n  // objects inherit the default valueOf method of the Object object;\n  // that simply returns the itself. Since the default valueOf() method\n  // does not return a primitive value, ES next tries to convert the object\n  // to a number by calling its toString() method and converting the\n  // resulting string to a number.\n  //\n  // The toString( ) method on Array converts the array elements to strings,\n  // then returns the result of concatenating these strings, with commas in\n  // between. An array with no elements converts to the empty string, which\n  // converts to the number 0. If an array has a single element that is a\n  // number n, the array converts to a string representation of n, which is\n  // then converted back to n itself. If an array contains more than one element,\n  // or if its one element is not a number, the array converts to NaN.\n\n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-7-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-7-9.js",
    "description": "Array.prototype.reduceRight returns initialValue if 'length' is 0 and initialValue is present (subclassed Array, length overridden with [0])",
    "test": "assertTrue((function testcase() {\n  foo.prototype = new Array(1, 2, 3);\n  function foo() {}\n  var f = new foo();\n  \n  f.length = [0];\n  \n  // objects inherit the default valueOf method of the Object object;\n  // that simply returns the itself. Since the default valueOf() method\n  // does not return a primitive value, ES next tries to convert the object\n  // to a number by calling its toString() method and converting the\n  // resulting string to a number.\n  //\n  // The toString( ) method on Array converts the array elements to strings,\n  // then returns the result of concatenating these strings, with commas in\n  // between. An array with no elements converts to the empty string, which\n  // converts to the number 0. If an array has a single element that is a\n  // number n, the array converts to a string representation of n, which is\n  // then converted back to n itself. If an array contains more than one element,\n  // or if its one element is not a number, the array converts to NaN.\n\n  function cb(){}\n  try {\n    if(f.reduceRight(cb,1) === 1)\n      return true;\n  }\n  catch (e) {  }  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-1.js",
    "description": "Array.prototype.reduceRight - no observable effects occur if 'len' is 0",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        var obj = { length: 0 };\n\n        Object.defineProperty(obj, \"0\", {\n            get: function () {\n                accessed = true;\n                return 10;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-2.js",
    "description": "Array.prototype.reduceRight - modifications to length don't change number of iterations in step 9",
    "test": "assertTrue((function testcase() {\n        var called = 0;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            called++;\n            return prevVal + curVal;\n        }\n\n        var arr = [0, 1, 2, 3];\n        Object.defineProperty(arr, \"4\", {\n            get: function () {\n                arr.length = 2;\n                return 10;\n            },\n            configurable: true\n        });\n\n        var preVal = arr.reduceRight(callbackfn);\n\n        return preVal === 11 && called === 2;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-3.js",
    "description": "Array.prototype.reduceRight -  while loop is breaken once 'kPresent' is true",
    "test": "assertTrue((function testcase() {\n\n        var called = 0;\n        var testResult = false;\n        var firstCalled = 0;\n        var secondCalled = 0;\n\n        function callbackfn(prevVal, val, idx, obj) {\n            if (called === 0) {\n                testResult = (idx === 1);\n            }\n            called++;\n        }\n\n        var arr = [, , , ];\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                firstCalled++;\n                return 9;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                secondCalled++;\n                return 11;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n\n        return testResult && firstCalled === 1 && secondCalled === 1;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-ii-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-ii-1.js",
    "description": "Array.prototype.reduceRight - added properties in step 2 are visible here",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function callbackfn(prevVal, curVal, idx, obj) { }\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                obj[2] = \"accumulator\";\n                return 3;\n            },\n            configurable: true\n        });\n\n        return Array.prototype.reduceRight.call(obj, callbackfn) === \"accumulator\";\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-8-b-ii-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-ii-2.js",
    "description": "Array.prototype.reduceRight - deleted properties in step 2 are visible here",
    "test": "assertTrue((function testcase() {\n\n        var obj = { 2: \"accumulator\", 3: \"another\" };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                delete obj[2];\n                return 5;\n            },\n            configurable: true\n        });\n\n        return \"accumulator\" !== Array.prototype.reduceRight.call(obj, function () { });\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-1.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 0) {\n                testResult = (prevVal === 1);\n            }\n        }\n\n        var obj = { 0: 0, 1: 1, length: 2 };\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-10.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property on an Array",
    "test": "assertTrue((function testcase() {\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2) {\n                testResult = (curVal === 2);\n            }\n        }\n\n        var arr = [0, 1, , 3];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-11.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        var proto = { 0: 0, 1: 1, 2: 2 };\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Object.defineProperty(child, \"2\", {\n            get: function () {\n                return \"20\";\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-12.js",
    "description": " Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        try {\n            Array.prototype[2] = 2;\n            var arr = [0, 1];\n\n            Object.defineProperty(arr, \"2\", {\n                get: function () {\n                    return \"20\";\n                },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-13.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n        \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        var proto = { 0: 0, 1: 1 };\n\n        Object.defineProperty(proto, \"2\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Object.defineProperty(child, \"2\", {\n            get: function () {\n                return \"20\";\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-14.js",
    "description": " Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: true\n            });\n\n            var arr = [0, 1, , ];\n\n            Object.defineProperty(arr, \"2\", {\n                get: function () {\n                    return \"20\";\n                },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-15.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var proto = { 0: 0, 1: 1 };\n\n        Object.defineProperty(proto, \"2\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-16",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-16.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: true\n            });\n\n            var arr = [0, 1, , ];\n\n            arr.reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-17.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        var obj = { 0: 0, 1: 1, length: 3 };\n\n        Object.defineProperty(obj, \"2\", {\n            set: function () { },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-18.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        var arr = [0, 1];\n\n        Object.defineProperty(arr, \"2\", {\n            set: function () { },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-19.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        try {\n            Object.prototype[2] = 2;\n\n            var obj = { 0: 0, 1: 1, length: 3 };\n            Object.defineProperty(obj, \"2\", {\n                set: function () { },\n                configurable: true\n            });\n\n            Array.prototype.reduceRight.call(obj, callbackfn);\n            return testResult;\n        } finally {\n            delete Object.prototype[2];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-2.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var arr = [0, 1, 2];\n\n        arr.reduceRight(callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-20",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-20.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        try {\n            Array.prototype[2] = 2;\n            var arr = [0, 1];\n            Object.defineProperty(arr, \"2\", {\n                set: function () { },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-21",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-21.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property without a get function on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        var proto = { 0: 0, 1: 1 };\n\n        Object.defineProperty(proto, \"2\", {\n            set: function () { },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-22",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-22.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property without a get function on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof prevVal === \"undefined\");\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                set: function () { },\n                configurable: true\n            });\n\n            var arr = [0, 1, , ];\n\n            arr.reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-23",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-23.js",
    "description": "Array.prototype.reduceRight - This object is the global object which contains index property",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        try {\n            var oldLen = fnGlobalObject().length;\n            fnGlobalObject()[0] = 0;\n            fnGlobalObject()[1] = 1;\n            fnGlobalObject()[2] = 2;\n            fnGlobalObject().length = 3;\n\n            Array.prototype.reduceRight.call(fnGlobalObject(), callbackfn);\n            return testResult;\n\n        } finally {\n            delete fnGlobalObject()[0];\n            delete fnGlobalObject()[1];\n            delete fnGlobalObject()[2];\n            fnGlobalObject().length = oldLen;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-25",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-25.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments is less than number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 0) {\n                testResult = (prevVal === 1);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn);\n        };\n\n        func(0, 1);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-26",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-26.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments equals number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn);\n        };\n\n        func(0, 1, 2);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-27",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-27.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments is greater than number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2) {\n                testResult = (prevVal === 3);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn);\n        };\n\n        func(0, 1, 2, 3);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-28",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-28.js",
    "description": "Array.prototype.reduceRight applied to String object, which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"2\");\n            }\n        }\n\n        var str = new String(\"012\");\n\n        Array.prototype.reduceRight.call(str, callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-29",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-29.js",
    "description": "Array.prototype.reduceRight applied to Function object which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var obj = function (a, b, c) {\n            return a + b + c;\n        };\n\n        obj[0] = 0;\n        obj[1] = 1;\n        obj[2] = 2;\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-3.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        var proto = { 0: 0, 1: 1, 2: 2, length: 2 };\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child[1] = \"10\";\n        child[2] = \"20\";\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-30",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-30.js",
    "description": "Array.prototype.reduceRight - element changed by getter on current iteration is observed in subsequent iterations on an Array",
    "test": "assertTrue((function testcase() {\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1 && prevVal === 2);\n            }\n        }\n\n        var arr = [0];\n        var preIterVisible = false;\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                if (preIterVisible) {\n                    return 1;\n                } else {\n                    return \"20\";\n                }\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                preIterVisible = true;\n                return 2;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-31",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-31.js",
    "description": "Array.prototype.reduceRight - element changed by getter on current iteration is observed subsequetly on an Array-like object",
    "test": "assertTrue((function testcase() {\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2 && curVal === 1);\n            }\n        }\n\n        var obj = { 0: 0, length: 3 };\n        var preIterVisible = false;\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                if (preIterVisible) {\n                    return 1;\n                } else {\n                    return \"20\";\n                }\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                preIterVisible = true;\n                return 2;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-32",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-32.js",
    "description": "Array.prototype.reduceRight - Exception in getter terminate iteration on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx <= 1) {\n                accessed = true;\n            }\n        }\n\n        var obj = { 0: 0, 1: 1, length: 3 };\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                throw new RangeError(\"unhandle exception happened in getter\");\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn);\n            return false;\n        } catch (ex) {\n            return (ex instanceof RangeError) && !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-33",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-33.js",
    "description": "Array.prototype.reduceRight - Exception in getter terminate iteration on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx <= 1) {\n                accessed = true;\n            }\n        }\n\n        var arr = [0, 1];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                throw new RangeError(\"unhandle exception happened in getter\");\n            },\n            configurable: true\n        });\n\n        try {\n            arr.reduceRight(callbackfn);\n            return false;\n        } catch (ex) {\n            return (ex instanceof RangeError) && !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-4.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        try {\n            Array.prototype[2] = \"11\";\n            [0, 1, 2].reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-5.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === \"20\");\n            }\n        }\n\n        var proto = {};\n\n        Object.defineProperty(proto, \"2\", {\n            get: function () {\n                return 11;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n        child[0] = \"0\";\n        child[1] = \"1\";\n        Object.defineProperty(proto, \"2\", {\n            value: \"20\",\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-6.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                get: function () {\n                    return \"2\";\n                },\n                configurable: true\n            });\n            [0, 1, 2].reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[2];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-7.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var proto = { 0: 0, 1: 1, 2: 2, length: 3 };\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n\n        Array.prototype.reduceRight.call(child, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-8.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        try {\n            Array.prototype[0] = 0;\n            Array.prototype[1] = 1;\n            Array.prototype[2] = 2;\n            [, , ,].reduceRight(callbackfn);\n            return testResult;\n\n        } finally {\n            delete Array.prototype[0];\n            delete Array.prototype[1];\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && ![, 1].hasOwnProperty(0))"
   },
   {
    "id": "15.4.4.22-8-b-iii-1-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-b-iii-1-9.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 2);\n            }\n        }\n\n        var obj = { 0: 0, 1: 1, length: 3 };\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                return 2;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-8-c-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-1.js",
    "description": "Array.prototype.reduceRight throws TypeError when Array is empty and initialValue is not present",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n  }\n\n  var arr = new Array(10);\n  try {\n    arr.reduceRight(callbackfn);\n  } \n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-c-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-2.js",
    "description": "Array.prototype.reduceRight throws TypeError when elements assigned values are deleted by reducign array length and initialValue is not present",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n  }\n\n  var arr = new Array(10);\n  arr[9] = 1;\n  arr.length = 5;\n  try {\n    arr.reduceRight(callbackfn);\n  } \n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-c-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-3.js",
    "description": "Array.prototype.reduceRight throws TypeError when elements assigned values are deleted and initialValue is not present",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n  }\n\n  var arr = [1,2,3,4,5];\n  delete arr[0];\n  delete arr[1];\n  delete arr[2];\n  delete arr[3];\n  delete arr[4];\n  try {\n    arr.reduceRight(callbackfn);\n  } \n  catch(e) {\n    if(e instanceof TypeError)\n      return true;  \n  }\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-8-c-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-4.js",
    "description": "Array.prototype.reduceRight doesn't throw error when array has no own properties but prototype contains a single property",
    "test": "assertTrue((function testcase() {\n\n        var arr = [, , , ];\n\n        try {\n            Array.prototype[1] = \"prototype\";\n            arr.reduceRight(function () { });\n            return true;\n        } catch (ex) {\n            return false;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && ![, 1].hasOwnProperty(0))"
   },
   {
    "id": "15.4.4.22-8-c-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-5.js",
    "description": "Array.prototype.reduceRight - side effects produced by step 2 are visible when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = { };\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                accessed = true;\n                return 2;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-8-c-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-6.js",
    "description": "Array.prototype.reduceRight - side effects produced by step 3 are visible when an exception occurs",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var accessed = false;\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        accessed = true;\n                        return \"2\";\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError) && accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-8-c-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-7.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 2",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                throw new SyntaxError();\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-8-c-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-8-c-8.js",
    "description": "Array.prototype.reduceRight - the exception is not thrown if exception was thrown by step 3",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                return {\n                    toString: function () {\n                        throw new SyntaxError();\n                    }\n                };\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, function () { });\n            return false;\n        } catch (ex) {\n            return !(ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-9-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-1.js",
    "description": "Array.prototype.reduceRight doesn't consider new elements which index is larger than array original length added to array after it is called, consider new elements which index is smaller than array length",
    "test": "assertTrue((function testcase() {\n        function callbackfn(prevVal, curVal, idx, obj) {\n            arr[5] = 6;\n            arr[2] = 3;\n            return prevVal + curVal;\n        }\n\n        var arr = ['1', 2, , 4, '5'];\n        return arr.reduceRight(callbackfn) === \"54321\";\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-2.js",
    "description": "Array.prototype.reduceRight considers new value of elements in array after it is called",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n    arr[3] = -2;\n    arr[0] = -1;\n    return prevVal + curVal;\n  }\n\n  var arr = [1,2,3,4,5];\n  if(arr.reduceRight(callbackfn) === 13)\n    return true;  \n  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-3.js",
    "description": "Array.prototype.reduceRight doesn't consider unvisited deleted elements in array after the call",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)  \n  {\n    delete arr[1];\n    delete arr[4];\n    return prevVal + curVal;    \n  }\n\n  var arr = ['1',2,3,4,5];\n  if(arr.reduceRight(callbackfn) === \"121\" )    // two elements deleted\n    return true;  \n  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-4.js",
    "description": "Array.prototype.reduceRight doesn't consider unvisited deleted elements when Array.length is decreased",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n    arr.length = 2;\n    return prevVal + curVal;\n  }\n\n  var arr = [1,2,3,4,5];\n  if(arr.reduceRight(callbackfn) === 12 )\n    return true;  \n  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-5.js",
    "description": "Array.prototype.reduceRight - callbackfn not called for array with one element",
    "test": "assertTrue((function testcase() { \n \n  var callCnt = 0;\n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n    callCnt++;\n    return 2;\n  }\n\n  var arr = [1];\n  if(arr.reduceRight(callbackfn) === 1 && callCnt === 0 )\n    return true;    \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-6.js",
    "description": "Array.prototype.reduceRight visits deleted element in array after the call when same index is also present in prototype",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)  \n  {\n    delete arr[1];\n    delete arr[2];\n    return prevVal + curVal;    \n  }\n  Array.prototype[2] = 6;\n  var arr = ['1',2,3,4,5];\n  var res = arr.reduceRight(callbackfn);\n  delete Array.prototype[2];\n\n  if(res === \"151\" )    //one element deleted\n    return true;  \n  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-7.js",
    "description": "Array.prototype.reduceRight not affect call when the array is deleted during the call",
    "test": "assertTrue((function testcase() {\n        function callbackfn(prevVal, curVal, idx, obj) {\n            delete o.arr;\n            return prevVal + curVal;\n        }\n\n        var o = new Object();\n        o.arr = ['1', 2, 3, 4, 5];\n        return o.arr.reduceRight(callbackfn) === \"141\" && !o.hasOwnProperty(\"arr\");\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-8.js",
    "description": "Array.prototype.reduceRight - no observable effects occur if 'len' is 0",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn() {\n            accessed = true;\n        }\n\n        var obj = { length: 0 };\n\n        Object.defineProperty(obj, \"5\", {\n            get: function () {\n                accessed = true;\n                return 10;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, function () { }, \"initialValue\");\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-9.js",
    "description": "Array.prototype.reduceRight - modifications to length will change number of iterations",
    "test": "assertTrue((function testcase() {\n        var called = 0;\n        function callbackfn(preVal, val, idx, obj) {\n            called++;\n        }\n\n        var arr = [0, 1, 2, 3];\n        Object.defineProperty(arr, \"4\", {\n            get: function () {\n                arr.length = 2;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n\n        return called === 3;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-1.js",
    "description": "Array.prototype.reduceRight returns initialvalue when Array is empty and initialValue is not present",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n  }\n\n  var arr = new Array(10);\n  \n  if(arr.reduceRight(callbackfn,5) === 5)\n    return true;  \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-b-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-10.js",
    "description": "Array.prototype.reduceRight - deleting property of prototype in step 8 causes deleted index property not to be visited on an Array-like Object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(preVal, val, idx, obj) {\n            accessed = true;\n            if (idx === 3) {\n                testResult = false;\n            }\n        }\n\n        var obj = { 2: 2, length: 20 };\n\n        Object.defineProperty(obj, \"5\", {\n            get: function () {\n                delete Object.prototype[3];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Object.prototype[3] = 1;\n            Array.prototype.reduceRight.call(obj, callbackfn);\n            return testResult && accessed;\n        } finally {\n            delete Object.prototype[3];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-11.js",
    "description": "Array.prototype.reduceRight - deleting property of prototype in step 8 causes deleted index property not to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var arr = [0, , , ];\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                delete Array.prototype[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype[1] = 1;\n            arr.reduceRight(callbackfn);\n            return testResult && accessed;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-12.js",
    "description": "Array.prototype.reduceRight - deleting own property with prototype property in step 8 causes prototype index property to be visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n\n        var obj = { 0: 0, 1: 111, length: 10 };\n\n        Object.defineProperty(obj, \"4\", {\n            get: function () {\n                delete obj[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Object.prototype[1] = 1;\n            Array.prototype.reduceRight.call(obj, callbackfn);\n            return testResult;\n        } finally {\n            delete Object.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-13.js",
    "description": "Array.prototype.reduceRight - deleting own property with prototype property in step 8 causes prototype index property to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n        var arr = [0, 111];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                delete arr[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype[1] = 1;\n            arr.reduceRight(callbackfn);\n            return testResult;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-14.js",
    "description": "Array.prototype.reduceRight - decreasing length of array in step 8 causes deleted index property not to be visited",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 2) {\n                testResult = false;\n            }\n        }\n\n        var arr = [0, 1, 2, 3];\n\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                arr.length = 2;\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-15.js",
    "description": "Array.prototype.reduceRight - decreasing length of array with prototype property in step 8 causes prototype index property to be visited",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2 && curVal === \"prototype\") {\n                testResult = true;\n            }\n        }\n        var arr = [0, 1, 2, 3];\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                get: function () {\n                    return \"prototype\";\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(arr, \"3\", {\n                get: function () {\n                    arr.length = 2;\n                    return 1;\n                },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn);\n\n            return testResult;\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-16",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-16.js",
    "description": "Array.prototype.reduceRight - decreasing length of array in step 8 does not delete non-configurable properties",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2 && curVal === \"unconfigurable\") {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, 1, 2, 3];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                return \"unconfigurable\";\n            },\n            configurable: false\n        });\n\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                arr.length = 2;\n                return 1;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-17.js",
    "description": "Array.prototype.reduceRight - properties added into own object are visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 0 && curVal === 0) {\n                testResult = true;\n            }\n        }\n\n        var obj = { length: 2 };\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                Object.defineProperty(obj, \"0\", {\n                    get: function () {\n                        return 0;\n                    },\n                    configurable: true\n                });\n                return 1;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-18.js",
    "description": "Array.prototype.reduceRight - properties added into own object are visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                Object.defineProperty(arr, \"1\", {\n                    get: function () {\n                        return 1;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-19.js",
    "description": "Array.prototype.reduceRight - properties added to prototype are visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 6.99) {\n                testResult = true;\n            }\n        }\n\n        var obj = { length: 6 };\n\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                Object.defineProperty(Object.prototype, \"1\", {\n                    get: function () {\n                        return 6.99;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n            return testResult;\n        } finally {\n            delete Object.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-2.js",
    "description": "Array.prototype.reduceRight - added properties in step 2 are visible here",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2 && curVal === \"2\") {\n                testResult = true;\n            }\n        }\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                obj[2] = \"2\";\n                return 3;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-9-b-20",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-20.js",
    "description": "Array.prototype.reduceRight - properties added to prototype can be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 6.99) {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                Object.defineProperty(Array.prototype, \"1\", {\n                    get: function () {\n                        return 6.99;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-21",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-21.js",
    "description": "Array.prototype.reduceRight - deleting own property causes deleted index property not to be visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var obj = { 0: 10, length: 10 };\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                return 6.99;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"5\", {\n            get: function () {\n                delete obj[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-22",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-22.js",
    "description": "Array.prototype.reduceRight - deleting own property causes deleted index property not to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var arr = [1, 2, 4];\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                return \"6.99\";\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                delete arr[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-23",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-23.js",
    "description": "Array.prototype.reduceRight - deleting property of prototype causes deleted index property not to be visited on an Array-like Object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 3) {\n                testResult = false;\n            }\n        }\n\n        var obj = { 2: 2, length: 20 };\n\n        Object.defineProperty(obj, \"5\", {\n            get: function () {\n                delete Object.prototype[3];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Object.prototype[3] = 1;\n            Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n            return testResult && accessed;\n        } finally {\n            delete Object.prototype[3];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-24",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-24.js",
    "description": "Array.prototype.reduceRight - deleting property of prototype causes deleted index property not to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var arr = [0, , , ];\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                delete Array.prototype[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype[1] = 1;\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult && accessed;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-25",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-25.js",
    "description": "Array.prototype.reduceRight - deleting own property with prototype property causes prototype index property to be visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n\n        var obj = { 0: 0, 1: 111, 4: 10, length: 10 };\n\n        Object.defineProperty(obj, \"4\", {\n            get: function () {\n                delete obj[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Object.prototype[1] = 1;\n            Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n            return testResult;\n        } finally {\n            delete Object.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-26",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-26.js",
    "description": "Array.prototype.reduceRight - deleting own property with prototype property causes prototype index property to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n        var arr = [0, 111];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                delete arr[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype[1] = 1;\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-27",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-27.js",
    "description": "Array.prototype.reduceRight - decreasing length of array causes deleted index property not to be visited",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 2) {\n                testResult = false;\n            }\n        }\n\n        var arr = [0, 1, 2, 3];\n\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                arr.length = 2;\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-28",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-28.js",
    "description": "Array.prototype.reduceRight - decreasing length of array with prototype property causes prototype index property to be visited",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2 && curVal === \"prototype\") {\n                testResult = true;\n            }\n        }\n        var arr = [0, 1, 2, 3];\n\n        try {\n            Object.defineProperty(Array.prototype, \"2\", {\n                get: function () {\n                    return \"prototype\";\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(arr, \"3\", {\n                get: function () {\n                    arr.length = 2;\n                    return 1;\n                },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn, \"initialValue\");\n\n            return testResult;\n        } finally {\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-29",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-29.js",
    "description": "Array.prototype.reduceRight - decreasing length of array does not delete non-configurable properties",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2 && curVal === \"unconfigurable\") {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, 1, 2, 3];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                return \"unconfigurable\";\n            },\n            configurable: false\n        });\n\n        Object.defineProperty(arr, \"3\", {\n            get: function () {\n                arr.length = 2;\n                return 1;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-3.js",
    "description": "Array.prototype.reduceRight - deleted properties in step 2 are visible here",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 2) {\n                testResult = false;\n            }\n        }\n\n        var obj = { 2: \"2\", 3: 10 };\n\n        Object.defineProperty(obj, \"length\", {\n            get: function () {\n                delete obj[2];\n                return 5;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n\n        return accessed && testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.22-9-b-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-4.js",
    "description": "Array.prototype.reduceRight - properties added into own object in step 8 can be visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            if (idx === 0 && curVal === 0) {\n                testResult = true;\n            }\n        }\n\n        var obj = { length: 2 };\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                Object.defineProperty(obj, \"0\", {\n                    get: function () {\n                        return 0;\n                    },\n                    configurable: true\n                });\n                return 1;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-5.js",
    "description": "Array.prototype.reduceRight - properties added into own object in step 8 can be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 1) {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                Object.defineProperty(arr, \"1\", {\n                    get: function () {\n                        return 1;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-6.js",
    "description": "Array.prototype.reduceRight - properties added to prototype in step 8 visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 6.99) {\n                testResult = true;\n            }\n        }\n\n        var obj = { length: 6 };\n\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                Object.defineProperty(Object.prototype, \"1\", {\n                    get: function () {\n                        return 6.99;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn);\n            return testResult;\n        } finally {\n            delete Object.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-7.js",
    "description": "Array.prototype.reduceRight - properties added to prototype in step 8 visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            if (idx === 1 && curVal === 6.99) {\n                testResult = true;\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                Object.defineProperty(Array.prototype, \"1\", {\n                    get: function () {\n                        return 6.99;\n                    },\n                    configurable: true\n                });\n                return 0;\n            },\n            configurable: true\n        });\n\n        try {\n            arr.reduceRight(callbackfn);\n            return testResult;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-b-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-8.js",
    "description": "Array.prototype.reduceRight - deleting own property in step 8 causes deleted index property not to be visited on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(preVal, val, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var obj = { 0: 10, length: 10 };\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                return 6.99;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"5\", {\n            get: function () {\n                delete obj[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn);\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-b-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-b-9.js",
    "description": "Array.prototype.reduceRight - deleting own property in step 8 causes deleted index property not to be visited on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var testResult = true;\n\n        function callbackfn(preVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                testResult = false;\n            }\n        }\n\n        var arr = [0];\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                return \"6.99\";\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                delete arr[1];\n                return 0;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn);\n        return testResult && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-1.js",
    "description": "Array.prototype.reduceRight - callbackfn not called for indexes never been assigned values",
    "test": "assertTrue((function testcase() { \n \n  var callCnt = 0;\n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n    callCnt++;\n    return curVal;\n  }\n\n  var arr = new Array(10);\n  arr[0] = arr[1] = undefined; //explicitly assigning a value\n  if( arr.reduceRight(callbackfn) === undefined && callCnt === 1)\n    return true;    \n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-1.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 0) {\n                testResult = (curVal === 0);\n            }\n        }\n\n        var obj = { 0: 0, 1: 1, 2: 2, length: 2 };\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-10.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property on an Array",
    "test": "assertTrue((function testcase() {\n    \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                return 1;\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-11.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        var proto = { 0: 0, 1: 11, 2: 2 };\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Object.defineProperty(child, \"1\", {\n            get: function () {\n                return \"1\";\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-12.js",
    "description": " Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n        \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        try {\n            Array.prototype[1] = 11;\n            var arr = [0, ,2];\n\n            Object.defineProperty(arr, \"1\", {\n                get: function () {\n                    return \"1\";\n                },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-13.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n        \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        var proto = { 0: 0, 2: 2};\n\n        Object.defineProperty(proto, \"1\", {\n            get: function () {\n                return 11;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Object.defineProperty(child, \"1\", {\n            get: function () {\n                return \"1\";\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-14.js",
    "description": " Array.prototype.reduceRight - element to be retrieved is own accessor property that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return 11;\n                },\n                configurable: true\n            });\n\n            var arr = [0, ,2];\n\n            Object.defineProperty(arr, \"1\", {\n                get: function () {\n                    return \"1\";\n                },\n                configurable: true\n            });\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-15",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-15.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var proto = { 0: 0, 2: 2 };\n\n        Object.defineProperty(proto, \"1\", {\n            get: function () {\n                return 1;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-16",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-16.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return 1;\n                },\n                configurable: true\n            });\n\n            var arr = [0, , 2];\n\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-17.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        var obj = { 0: 0, 2: 2, length: 3 };\n\n        Object.defineProperty(obj, \"1\", {\n            set: function () { },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-18.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"1\", {\n            set: function () { },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult;\n         \n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-19.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        try {\n            Object.prototype[1] = 1;\n\n            var obj = { 0: 0, 2: 2, length: 3 };\n            Object.defineProperty(obj, \"1\", {\n                set: function () { },\n                configurable: true\n            });\n\n            Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n            return testResult;\n        } finally {\n            delete Object.prototype[1];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-2.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var arr = [0, 1, 2];\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-20",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-20.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property without a get function that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        try {\n            Array.prototype[1] = 1;\n            var arr = [0, ,2];\n            Object.defineProperty(arr, \"1\", {\n                set: function () { },\n                configurable: true\n            });\n\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-21",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-21.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property without a get function on an Array-like object",
    "test": "assertTrue((function testcase() {\n    \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        var proto = { 0: 0, 2: 2 };\n\n        Object.defineProperty(proto, \"1\", {\n            set: function () { },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-22",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-22.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited accessor property without a get function on an Array",
    "test": "assertTrue((function testcase() {\n    \n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (typeof curVal === \"undefined\");\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                set: function () { },\n                configurable: true\n            });\n\n            var arr = [0, , 2];\n\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && ![, 1].hasOwnProperty(0) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-23",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-23.js",
    "description": "Array.prototype.reduceRight - This object is an global object which contains index property",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        try {\n            var oldLen = fnGlobalObject().length;\n            fnGlobalObject()[0] = 0;\n            fnGlobalObject()[1] = 1;\n            fnGlobalObject()[2] = 2;\n            fnGlobalObject().length = 3;\n\n            Array.prototype.reduceRight.call(fnGlobalObject(), callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete fnGlobalObject()[0];\n            delete fnGlobalObject()[1];\n            delete fnGlobalObject()[2];\n            fnGlobalObject().length = oldLen;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-25",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-25.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments is less than number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn, \"initialValue\");\n        };\n\n        func(0, 1);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-26",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-26.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments equals number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2) {\n                testResult = (curVal === 2);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn, \"initialValue\");\n        };\n\n        func(0, 1, 2);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-27",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-27.js",
    "description": "Array.prototype.reduceRight - This object is the Arguments object which implements its own property get method (number of arguments is greater than number of parameters)",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 3) {\n                testResult = (curVal === 3);\n            }\n        }\n\n        var func = function (a, b, c) {\n            Array.prototype.reduceRight.call(arguments, callbackfn, \"initialValue\");\n        };\n\n        func(0, 1, 2, 3);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-28",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-28.js",
    "description": "Array.prototype.reduceRight applied to String object, which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        var str = new String(\"012\");\n        Array.prototype.reduceRight.call(str, callbackfn, \"initialValue\");\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-29",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-29.js",
    "description": "Array.prototype.reduceRight applied to Function object which implements its own property get method",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        var initialValue = 0;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var obj = function (a, b, c) {\n            return a + b + c;\n        };\n        obj[0] = 0;\n        obj[1] = 1;\n        obj[2] = 2;\n        obj[3] = 3;\n\n        Array.prototype.reduceRight.call(obj, callbackfn, initialValue);\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-3.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === \"1\");\n            }\n        }\n\n        var proto = { 0: 10, 1: 11, 2: 12, length: 2 };\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child[1] = \"1\";\n        child[2] = \"2\";\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-30",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-30.js",
    "description": "Array.prototype.reduceRight - element changed by getter on previous iterations is observed on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var arr = [, ,];\n        var preIterVisible = false;\n\n        Object.defineProperty(arr, \"2\", {\n            get: function () {\n                preIterVisible = true;\n                return 0;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                if (preIterVisible) {\n                    return 1;\n                } else {\n                    return \"11\";\n                }\n            },\n            configurable: true\n        });\n\n        arr.reduceRight(callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-31",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-31.js",
    "description": "Array.prototype.reduceRight - element changed by getter on previous iterations is observed on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var obj = { length: 3 };\n        var preIterVisible = false;\n\n        Object.defineProperty(obj, \"2\", {\n            get: function () {\n                preIterVisible = true;\n                return 0;\n            },\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                if (preIterVisible) {\n                    return 1;\n                } else {\n                    return \"11\";\n                }\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-32",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-32.js",
    "description": "Array.prototype.reduceRight - unnhandled exceptions happened in getter terminate iteration on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx <= 1) {\n                accessed = true;\n            }\n        }\n\n\n        var obj = { 0: 0, 2: 2, length: 3 };\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                throw new RangeError(\"unhandle exception happened in getter\");\n            },\n            configurable: true\n        });\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n            return false;\n        } catch (ex) {\n            return (ex instanceof RangeError) && !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-33",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-33.js",
    "description": "Array.prototype.reduceRight - unnhandled exceptions happened in getter terminate iteration on an Array",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx <= 1) {\n                accessed = true;\n            }\n        }\n\n        var arr = [0, , 2];\n\n        Object.defineProperty(arr, \"1\", {\n            get: function () {\n                throw new RangeError(\"unhandle exception happened in getter\");\n            },\n            configurable: true\n        });\n\n        try {\n            arr.reduceRight(callbackfn, \"initialValue\");\n            return true;\n        } catch (ex) {\n            return (ex instanceof RangeError) && !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-4.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        try {\n            Array.prototype[1] = \"11\";\n            [0, 1, 2].reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-5.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 0) {\n                testResult = (curVal === \"0\");\n            }\n        }\n\n        var proto = {};\n\n        Object.defineProperty(proto, \"0\", {\n            get: function () {\n                return 10;\n            },\n            configurable: true\n        });\n\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 2;\n        Object.defineProperty(child, \"0\", {\n            value: \"0\",\n            configurable: true\n        });\n        child[1] = \"1\";\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-i-6",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-6.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own data property that overrides an inherited accessor property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return \"11\";\n                },\n                configurable: true\n            });\n            [0, 1, 2].reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[1];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.4.4.22-9-c-i-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-7.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited data property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var proto = { 0: 0, 1: 1, 2: 2 };\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var child = new Con();\n        child.length = 3;\n\n        Array.prototype.reduceRight.call(child, callbackfn, \"initialValue\");\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-i-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-8.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is inherited data property on an Array",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        try {\n            Array.prototype[0] = 0;\n            Array.prototype[1] = 1;\n            Array.prototype[2] = 2;\n            [, , , ].reduceRight(callbackfn, \"initialValue\");\n            return testResult;\n\n        } finally {\n            delete Array.prototype[0];\n            delete Array.prototype[1];\n            delete Array.prototype[2];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && ![, 1].hasOwnProperty(0))"
   },
   {
    "id": "15.4.4.22-9-c-i-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-i-9.js",
    "description": "Array.prototype.reduceRight - element to be retrieved is own accessor property on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (curVal === 1);\n            }\n        }\n\n        var obj = { 0: 0, 2: 2, length: 3 };\n        Object.defineProperty(obj, \"1\", {\n            get: function () {\n                return 1;\n            },\n            configurable: true\n        });\n\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return testResult;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight) && fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.4.4.22-9-c-ii-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-1.js",
    "description": "Array.prototype.reduceRight - callbackfn called with correct parameters (initialvalue not passed)",
    "test": "assertTrue((function testcase() { \n \n  function callbackfn(prevVal, curVal, idx, obj)\n  {\n    if(idx+1 < obj.length && obj[idx] === curVal && obj[idx+1] === prevVal)\n      return curVal;\n    else \n      return false;\n  }\n\n  var arr = [0,1,true,null,new Object(),\"five\"];\n  if( arr.reduceRight(callbackfn) === 0) \n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-10",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-10.js",
    "description": "Array.prototype.reduceRight - callbackfn is called with 1 formal parameter",
    "test": "assertTrue((function testcase() {\n\n        var called = 0;\n\n        function callbackfn(prevVal) {\n            called++;\n            return prevVal;\n        }\n\n        return [11, 12].reduceRight(callbackfn, 100) === 100 && 2 === called;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-11",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-11.js",
    "description": "Array.prototype.reduceRight - callbackfn is called with 2 formal parameter",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal) {\n            if (prevVal === 100) {\n                testResult = true;\n            }\n            return curVal > 10;\n        }\n\n        return [11].reduceRight(callbackfn, 100) === true && testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-12",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-12.js",
    "description": "Array.prototype.reduceRight - callbackfn is called with 3 formal parameter",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n        var arr = [11, 12, 13];\n        var initVal = 6.99;\n\n        function callbackfn(prevVal, curVal, idx) {\n            if (idx === 2) {\n                testResult = (prevVal === initVal);\n            }\n            return curVal > 10 && arguments[3][idx] === curVal;\n        }\n\n        return arr.reduceRight(callbackfn, initVal) === true && testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-13",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-13.js",
    "description": "Array.prototype.reduceRight - callbackfn is called with 4 formal parameter",
    "test": "assertTrue((function testcase() {\n\n        var arr = [11, 12, 13];\n        var initVal = 6.99;\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 2) {\n                testResult = (prevVal === initVal);\n            }\n            return curVal > 10 && obj[idx] === curVal;\n        }\n\n        return arr.reduceRight(callbackfn, initVal) === true && testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-14",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-14.js",
    "description": "Array.prototype.reduceRight - callbackfn uses arguments",
    "test": "assertTrue((function testcase() {\n\n        function callbackfn() {\n            return arguments[0] === 100 && arguments[3][arguments[2]] === arguments[1];\n        }\n\n        return [11].reduceRight(callbackfn, 100) === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-16",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-16.js",
    "description": "Array.prototype.reduceRight - non-indexed properties are not called on an Array-like object",
    "test": "assertTrue((function testcase() {\n\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (prevVal === 8 || curVal === 8) {\n                testResult = true;\n            }\n        }\n\n        var obj = { 0: 11, 10: 12, non_index_property: 8, length: 20 };\n        Array.prototype.reduceRight.call(obj, callbackfn, \"initialValue\");\n        return !testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-17",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-17.js",
    "description": "Array.prototype.reduceRight - 'accumulator' used for current iteration is the result of previous iteration on an Array",
    "test": "assertTrue((function testcase() {\n\n        var arr = [11, 12, 13];\n        var testResult = true;\n        var initVal = 6.99;\n        var preResult = initVal;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (prevVal !== preResult) {\n                testResult = false;\n            }\n            preResult = curVal;\n            return curVal;\n        }\n\n        arr.reduceRight(callbackfn, initVal);\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-18",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-18.js",
    "description": "Array.prototype.reduceRight - 'accumulator' used for first iteration is the value of 'initialValue' when it is present on an Array",
    "test": "assertTrue((function testcase() {\n\n        var arr = [11, 12];\n        var testResult = false;\n        var initVal = 6.99;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === initVal);\n            }\n            return curVal;\n        }\n\n        arr.reduceRight(callbackfn, initVal);\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-19",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-19.js",
    "description": "Array.prototype.reduceRight - value of 'accumulator' used for first iteration is the value of max index property which is not undefined when 'initialValue' is not present on an Array",
    "test": "assertTrue((function testcase() {\n\n        var arr = [11, 12, 13];\n        var testResult = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === 1) {\n                testResult = (prevVal === 13);\n            }\n            return curVal;\n        }\n        arr.reduceRight(callbackfn);\n\n        return testResult;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-2",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-2.js",
    "description": "Array.prototype.reduceRight - callbackfn called with correct parameters (initialvalue passed)",
    "test": "assertTrue((function testcase() {\n        var bParCorrect = false;\n        var arr = [0, 1, true, null, new Object(), \"five\"];\n        var initialValue = 5.5;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx === obj.length - 1 && obj[idx] === curVal && prevVal === initialValue)\n                return curVal;\n            else if (idx + 1 < obj.length && obj[idx] === curVal && obj[idx + 1] === prevVal)\n                return curVal;\n            else\n                return false;\n        }\n        return arr.reduceRight(callbackfn, initialValue) === 0;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-20",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-20.js",
    "description": "Array.prototype.reduceRight - undefined can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return typeof prevVal === \"undefined\";\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, undefined) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-21",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-21.js",
    "description": "Array.prototype.reduceRight - null can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === null;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, null) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-22",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-22.js",
    "description": "Array.prototype.reduceRight - boolean primitive can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === false;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, false) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-23",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-23.js",
    "description": "Array.prototype.reduceRight - number primitive can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === 12;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 12) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-24",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-24.js",
    "description": "Array.prototype.reduceRight - string primitive can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === \"hello_\";\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, \"hello_\") === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-25",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-25.js",
    "description": "Array.prototype.reduceRight - Function Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objFunction = function () { };\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objFunction;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objFunction) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-26",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-26.js",
    "description": "Array.prototype.reduceRight - Array Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objArray = [];\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objArray;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objArray) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-27",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-27.js",
    "description": "Array.prototype.reduceRight - String Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objString = new String();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objString;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objString) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-28",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-28.js",
    "description": "Array.prototype.reduceRight - Boolean Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objBoolean = new Boolean();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objBoolean;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objBoolean) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-29",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-29.js",
    "description": "Array.prototype.reduceRight - Number Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objNumber = new Number();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objNumber;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objNumber) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-3",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-3.js",
    "description": "Array.prototype.reduceRight - callbackfn takes 4 arguments",
    "test": "assertTrue((function testcase() { \n \n  var bCalled = false;\n  function callbackfn(prevVal, curVal, idx, obj)\n  { \n    bCalled = true;\n    if(prevVal === true && arguments.length === 4)   \n      return true;\n    else\n      return false;\n  }\n  var arr = [0,1,2,3,4,5,6,7,8,9];\n  if(arr.reduceRight(callbackfn,true) === true && bCalled === true)\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-30",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-30.js",
    "description": "Array.prototype.reduceRight - the Math Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === Math;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, Math) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-31",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-31.js",
    "description": "Array.prototype.reduceRight - Date Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objDate = new Date();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objDate;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objDate) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-32",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-32.js",
    "description": "Array.prototype.reduceRight - RegExp Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objRegExp = new RegExp();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objRegExp;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objRegExp) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-33",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-33.js",
    "description": "Array.prototype.reduceRight - the JSON can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === JSON;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, JSON) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-34",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-34.js",
    "description": "Array.prototype.reduceRight - Error Object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var objError = new RangeError();\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === objError;\n        }\n\n        var obj = { 0: 11, length: 1 };\n        \n\n        return Array.prototype.reduceRight.call(obj, callbackfn, objError) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-35",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-35.js",
    "description": "Array.prototype.reduceRight - the Arguments object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var arg;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === arg;\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        (function fun() {\n            arg = arguments;\n        }(10, 11, 12, 13));\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, arg) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-37",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-37.js",
    "description": "Array.prototype.reduceRight - the global object can be used as accumulator",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            return prevVal === fnGlobalObject();\n        }\n\n        var obj = { 0: 11, length: 1 };\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, fnGlobalObject()) === true && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-4-s",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22-9-c-ii-4-s.js",
    "description": "Array.prototype.reduceRight - undefined passed as thisValue to strict callbackfn",
    "test": "assertTrue((function testcase() { \n  var innerThisCorrect = false;\n  function callbackfn(prevVal, curVal, idx, obj)\n  { \n     \"use strict\";\n     innerThisCorrect = this===undefined;\n     return true;\n  }\n  [0].reduceRight(callbackfn,true);\n  return innerThisCorrect;    \n }).call(this));\n",
    "precondition": "(fnSupportsStrict() && fnExists(Array.prototype.reduceRight))",
    "strict_only": ""
   },
   {
    "id": "15.4.4.22-9-c-ii-4",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-4.js",
    "description": "Array.prototype.reduceRight - k values are passed in acending numeric order",
    "test": "assertTrue((function testcase() {\n\n        var arr = [0, 1, 2, 3, 4, 5];\n        var lastIdx = arr.length - 1;\n        var accessed = false;\n        var result = true;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (lastIdx !== idx) {\n                result = false;\n            } else {\n                lastIdx--;\n            }\n        }\n        arr.reduceRight(callbackfn, 1);\n        return result && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-5",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-5.js",
    "description": "Array.prototype.reduceRight - k values are accessed during each iteration and not prior to starting the loop on an Array",
    "test": "assertTrue((function testcase() {\n        var arr = [11, 12, 13, 14];\n        var kIndex = [];\n        var result = true;\n        var called = 0;\n\n        //By below way, we could verify that k would be setted as 0, 1, ..., length - 1 in order, and each value will be setted one time.\n        function callbackfn(preVal, curVal, idx, o) {\n            //Each position should be visited one time, which means k is accessed one time during iterations.\n            called++;\n            if (typeof kIndex[idx] === \"undefined\") {\n                //when current position is visited, its next index should has been visited.\n                if (idx !== arr.length - 1 && typeof kIndex[idx + 1] === \"undefined\") {\n                    result = false;\n                }\n                kIndex[idx] = 1;\n            } else {\n                result = false;\n            }\n        }\n\n        arr.reduceRight(callbackfn, 1);\n        return result && called === 4;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-7",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-7.js",
    "description": "Array.prototype.reduceRight - unhandled exceptions happened in callbackfn terminate iteration",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n\n        function callbackfn(prevVal, curVal, idx, obj) {\n            if (idx < 10) {\n                accessed = true;\n            }\n            if (idx === 10) {\n                throw new Error(\"Exception occurred in callbackfn\");\n            }\n        }\n\n        var obj = { 0: 11, 4: 10, 10: 8, length: 20 };\n\n        try {\n            Array.prototype.reduceRight.call(obj, callbackfn, 1);\n            return false;\n        } catch (ex) {\n            return !accessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-8",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-8.js",
    "description": "Array.prototype.reduceRight - element changed by callbackfn on previous iterations is observed",
    "test": "assertTrue((function testcase() {\n\n        var accessed = false;\n        var obj = { 0: 11, 1: 12, length: 2 };\n        function callbackfn(prevVal, curVal, idx, obj) {\n            accessed = true;\n            if (idx === 1) {\n                obj[idx - 1] = 8;\n            }\n            return curVal > 10;\n        }\n\n        return Array.prototype.reduceRight.call(obj, callbackfn, 1) === false && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.4.4.22-9-c-ii-9",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-9.js",
    "description": "Array.prototype.reduceRight - callbackfn is called with 0 formal parameter",
    "test": "assertTrue((function testcase() {\n\n        var called = 0;\n\n        function callbackfn() {\n            called++;\n            return true;\n        }\n\n        return [11, 12].reduceRight(callbackfn, 11) === true && 2 === called;\n    }).call(this));\n",
    "precondition": "(fnExists(Array.prototype.reduceRight))"
   }
  ]
 }
}
