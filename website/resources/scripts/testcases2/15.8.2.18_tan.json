{
 "testCollection": {
  "name": "15.8.2.18_tan",
  "numTests": 7,
  "tests": [
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(NaN) is NaN",
    "test": "// CHECK#1\nvar x = NaN;\nif (!isNaN(Math.tan(x)))\n{\n\t$ERROR(\"#1: 'var x=NaN; isNaN(Math.tan(x)) === false'\");\n}\n",
    "id": "S15.8.2.18_A1"
   },
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(+0) equals to +0",
    "test": "// CHECK#1\nvar x = +0;\nif (Math.tan(x) !== +0)\n{\n\t$ERROR(\"#1: 'var x=+0; Math.tan(x) !== +0'\");\n}\n",
    "id": "S15.8.2.18_A2"
   },
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(-0) equals to -0",
    "test": "// CHECK#1\nvar x = -0;\nif (Math.tan(x) !== -0)\n{\n\t$ERROR(\"#1: 'var x=-0; Math.tan(x) !== -0'\");\n}\n",
    "id": "S15.8.2.18_A3"
   },
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(+Infinity) is NaN",
    "test": "// CHECK#1\nvar x = +Infinity;\nif (!isNaN(Math.tan(x)))\n{\n\t$ERROR(\"#1: 'var x=+Infinity; isNaN(Math.tan(x)) === false'\");\n}\n",
    "id": "S15.8.2.18_A4"
   },
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(-Infinity) is NaN",
    "test": "// CHECK#1\nvar x = -Infinity;\nif (!isNaN(Math.tan(x)))\n{\n\t$ERROR(\"#1: 'var x=-Infinity; isNaN(Math.tan(x)) === false'\");\n}\n",
    "id": "S15.8.2.18_A5"
   },
   {
    "section": "15.8.2.18",
    "description": "Checking if Math.tan(x) equals to Math.tan(x+n*Math.PI) with precision 0.000000000003, where n is an integer from 1 to 100 and x is one of 10 float point values from 0 to Math.PI",
    "test": "// CHECK#1\n  prec = 0.00000000003;\n//prec = 0.000000000000001;\nperiod = Math.PI;\npernum = 100;\n\na = -pernum * period + period/2;\nb = pernum * period - period/2;\nsnum = 9; \nstep = period/(snum + 2);\nx = new Array();\nfor (i = 0; i <= snum; i++)    //// We exlude special points \n{\t\t\t\t\t\t\t   ////           in this cycle.\n\tx[i] = a + (i+1)*step;     ////\n}\t\t\t\t\t\t\t   ////\n\n\nvar curval;\nvar curx;\nvar j;\nfor (i = 0; i < snum; i++)\n{\n\tcurval = Math.tan(x[i]);\n\tcurx = x[i] + period;\n\tj = 0;\n\twhile (curx <= b)\n\t{\n\t\tcurx += period;\n\t\tj++;\n\t\tif (Math.abs(Math.tan(curx) - curval) >= prec)\n\t\t{\n\t\t\t$FAIL(\"#1: tan is found out to not be periodic:\\n Math.abs(Math.tan(\" + x[i] + \") - Math.tan(\" + x[i] + \" + 2*Math.PI*\" + j + \")) >= \" + prec + \"\\n Math.tan(\" + x[i] + \") === \" + curval + \"\\n Math.tan(\" + curx + \") === \" + Math.tan(curx));\n\t\t}\n\t}\n}\n",
    "id": "S15.8.2.18_A6"
   },
   {
    "section": "15.8.2.18",
    "description": ": Checking if Math.tan is approximately equals to its mathematical values on the set of 64 argument values; all the sample values is calculated with LibC;",
    "test": "$INCLUDE(\"math_precision.js\");\n$INCLUDE(\"math_isequal.js\");\n\n// CHECK#1\nvnum = 64;\nvar x = new Array();\nx[0] = -1.57079632679489660000;\nx[1] = -1.52092977673791570000;\nx[2] = -1.47106322668093490000;\nx[3] = -1.42119667662395410000;\nx[4] = -1.37133012656697330000;\nx[5] = -1.32146357650999220000;\nx[6] = -1.27159702645301140000;\nx[7] = -1.22173047639603060000;\nx[8] = -1.17186392633904980000;\nx[9] = -1.12199737628206900000;\nx[10] = -1.07213082622508820000;\nx[11] = -1.02226427616810730000;\nx[12] = -0.97239772611112640000;\nx[13] = -0.92253117605414559000;\nx[14] = -0.87266462599716477000;\nx[15] = -0.82279807594018395000;\nx[16] = -0.77293152588320302000;\nx[17] = -0.72306497582622220000;\nx[18] = -0.67319842576924138000;\nx[19] = -0.62333187571226056000;\nx[20] = -0.57346532565527975000;\nx[21] = -0.52359877559829870000;\nx[22] = -0.47373222554131811000;\nx[23] = -0.42386567548433729000;\nx[24] = -0.37399912542735625000;\nx[25] = -0.32413257537037543000;\nx[26] = -0.27426602531339461000;\nx[27] = -0.22439947525641379000;\nx[28] = -0.17453292519943298000;\nx[29] = -0.12466637514245216000;\nx[30] = -0.07479982508547133900;\nx[31] = -0.02493327502849052000;\nx[32] = 0.02493327502849052000;\nx[33] = 0.07479982508547133900;\nx[34] = 0.12466637514245216000;\nx[35] = 0.17453292519943298000;\nx[36] = 0.22439947525641379000;\nx[37] = 0.27426602531339461000;\nx[38] = 0.32413257537037543000;\nx[39] = 0.37399912542735625000;\nx[40] = 0.42386567548433707000;\nx[41] = 0.47373222554131766000;\nx[42] = 0.52359877559829915000;\nx[43] = 0.57346532565527975000;\nx[44] = 0.62333187571226034000;\nx[45] = 0.67319842576924138000;\nx[46] = 0.72306497582622198000;\nx[47] = 0.77293152588320302000;\nx[48] = 0.82279807594018406000;\nx[49] = 0.87266462599716466000;\nx[50] = 0.92253117605414570000;\nx[51] = 0.97239772611112629000;\nx[52] = 1.02226427616810730000;\nx[53] = 1.07213082622508840000;\nx[54] = 1.12199737628206900000;\nx[55] = 1.17186392633905000000;\nx[56] = 1.22173047639603060000;\nx[57] = 1.27159702645301120000;\nx[58] = 1.32146357650999220000;\nx[59] = 1.37133012656697330000;\nx[60] = 1.42119667662395390000;\nx[61] = 1.47106322668093490000;\nx[62] = 1.52092977673791550000;\nx[63] = 1.57079632679489660000;\n\n\n\nvar y = new Array();\ny[0] = -16331239353195370.00000000000000000000;\ny[1] = -20.03689788997828100000;\ny[2] = -9.99349498241742220000;\ny[3] = -6.63456649978931170000;\ny[4] = -4.94671494494940060000;\ny[5] = -3.92724714760272690000;\ny[6] = -3.24192037576928720000;\ny[7] = -2.74747741945462160000;\ny[8] = -2.37228029184788760000;\ny[9] = -2.07652139657233640000;\ny[10] = -1.83630792973623100000;\ny[11] = -1.63642745273401610000;\ny[12] = -1.46673061342097340000;\ny[13] = -1.32018331365488460000;\ny[14] = -1.19175359259421000000;\ny[15] = -1.07774368351222650000;\ny[16] = -0.97537247158200291000;\ny[17] = -0.88250523616465493000;\ny[18] = -0.79747338888240393000;\ny[19] = -0.71895103828786056000;\ny[20] = -0.64586847728552887000;\ny[21] = -0.57735026918962551000;\ny[22] = -0.51267008667516678000;\ny[23] = -0.45121718317830323000;\ny[24] = -0.39247107881010240000;\ny[25] = -0.33598213147817668000;\ny[26] = -0.28135637451595324000;\ny[27] = -0.22824347439014994000;\ny[28] = -0.17632698070846500000;\ny[29] = -0.12531625823730441000;\ny[30] = -0.07493964001908703900;\ny[31] = -0.02493844305504610100;\ny[32] = 0.02493844305504610100;\ny[33] = 0.07493964001908703900;\ny[34] = 0.12531625823730441000;\ny[35] = 0.17632698070846500000;\ny[36] = 0.22824347439014994000;\ny[37] = 0.28135637451595324000;\ny[38] = 0.33598213147817668000;\ny[39] = 0.39247107881010240000;\ny[40] = 0.45121718317830301000;\ny[41] = 0.51267008667516623000;\ny[42] = 0.57735026918962618000;\ny[43] = 0.64586847728552887000;\ny[44] = 0.71895103828786022000;\ny[45] = 0.79747338888240393000;\ny[46] = 0.88250523616465459000;\ny[47] = 0.97537247158200291000;\ny[48] = 1.07774368351222670000;\ny[49] = 1.19175359259420950000;\ny[50] = 1.32018331365488510000;\ny[51] = 1.46673061342097320000;\ny[52] = 1.63642745273401610000;\ny[53] = 1.83630792973623190000;\ny[54] = 2.07652139657233640000;\ny[55] = 2.37228029184788890000;\ny[56] = 2.74747741945462160000;\ny[57] = 3.24192037576928450000;\ny[58] = 3.92724714760272690000;\ny[59] = 4.94671494494940060000;\ny[60] = 6.63456649978930190000;\ny[61] = 9.99349498241742220000;\ny[62] = 20.03689788997819200000;\ny[63] = 16331239353195370.00000000000000000000;\n\n\nvar val;\nfor (i = 0; i < vnum; i++)\n{\n\tval = Math.tan(x[i]);\n\tif (!isEqual(val, y[i]))\n\t{\n\t\t$ERROR(\"\\nx = \" + x[i] + \"\\nlibc.tan(x) = \" + y[i] + \"\\nMath.tan(x) = \" + Math.tan(x[i]) + \"\\nMath.abs(libc.tan(x) - Math.tan(x)) > \" + prec + \"\\n\\n\"); \n\t}\n}\n",
    "id": "S15.8.2.18_A7"
   }
  ]
 }
}
