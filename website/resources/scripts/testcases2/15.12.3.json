{
 "testCollection": {
  "name": "15.12.3",
  "numTests": 53,
  "tests": [
   {
    "id": "15.12.3-0-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-0-1.js",
    "description": "JSON.stringify must exist as be a function",
    "test": "assertTrue((function testcase() {\n  var f = JSON.stringify;\n\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(JSON !== undefined)"
   },
   {
    "id": "15.12.3-0-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-0-2.js",
    "description": "JSON.stringify must exist as be a function taking 3 parameters",
    "test": "assertTrue((function testcase() {\n  var f = JSON.stringify;\n\n  if (typeof(f) === \"function\" && f.length === 3) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(JSON !== undefined)"
   },
   {
    "id": "15.12.3-0-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-0-3.js",
    "description": "JSON.stringify must be deletable (configurable)",
    "test": "assertTrue((function testcase() {\n  var o = JSON;\n  var desc = Object.getOwnPropertyDescriptor(o, \"stringify\");\n  if (desc.configurable === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(function preq() {\n  return typeof JSON != \"undefined\" && fnExists(Object.getOwnPropertyDescriptor)\n  }).call(this)"
   },
   {
    "id": "15.12.3-11-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-1.js",
    "description": "JSON.stringify(undefined) returns undefined",
    "test": "assertTrue((JSON.stringify(undefined) === undefined));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-10",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-10.js",
    "description": "A JSON.stringify replacer function applied to a top level scalar value can return undefined.",
    "test": "assertTrue((JSON.stringify(42, function(k, v) { return undefined }) === undefined));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-11",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-11.js",
    "description": "A JSON.stringify replacer function applied to a top level Object can return undefined.",
    "test": "assertTrue((JSON.stringify({prop:1}, function(k, v) { return undefined }) === undefined));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-12",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-12.js",
    "description": "A JSON.stringify replacer function applied to a top level scalar can return an Array.",
    "test": "assertTrue((JSON.stringify(42, function(k, v) { return v==42 ?[4,2]:v }) === '[4,2]'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-13",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-13.js",
    "description": "A JSON.stringify replacer function applied to a top level scalar can return an Object.",
    "test": "assertTrue((JSON.stringify(42, function(k, v) { return v==42 ? {forty:2}: v}) === '{\"forty\":2}'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-14",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-14.js",
    "description": "Applying JSON.stringify to a  function returns undefined.",
    "test": "assertTrue((JSON.stringify(function() {}) === undefined));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-15",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-15.js",
    "description": "Applying JSON.stringify with a replacer function to a function returns the replacer value.",
    "test": "assertTrue((JSON.stringify(function() {}, function(k,v) {return 99}) === '99'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-16",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-16.js",
    "description": "JSON.stringify - stringifying an object where property name is the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\": \"John\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1); \n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-17",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-17.js",
    "description": "JSON.stringify - stringifying an object where property name starts with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001Fname\": \"John\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-18",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-18.js",
    "description": "JSON.stringify - stringifying an object where property name ends with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\": \"John\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-19",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-19.js",
    "description": "JSON.stringify - stringifying an object where property name starts and ends with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001Fname\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\": \"John\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1 && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-2.js",
    "description": "A JSON.stringify replacer function works is applied to a top level undefined value.",
    "test": "assertTrue((JSON.stringify(undefined, function(k, v) { return \"replacement\" }) === '\"replacement\"'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-20",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-20.js",
    "description": "JSON.stringify - stringifying an object where property name middles with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"na\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001Fme\": \"John\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-21",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-21.js",
    "description": "JSON.stringify - stringifying an object where property value is the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-22",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-22.js",
    "description": "JSON.stringify - stringifying an object where property value starts with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001FJohn\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-23",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-23.js",
    "description": "JSON.stringify - stringifying an object where property value ends with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\": \"John\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-24",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-24.js",
    "description": "JSON.stringify - stringifying an object where property value starts and ends with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001FJohn\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001F\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1 && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-25",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-25.js",
    "description": "JSON.stringify - stringifying an object where property value middles with the union of all null character (The abstract operation Quote(value) step 2.c)",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var expectedNullChars = new Array();\n        expectedNullChars[0] = \"\\\\u0000\";\n        expectedNullChars[1] = \"\\\\u0001\";\n        expectedNullChars[2] = \"\\\\u0002\";\n        expectedNullChars[3] = \"\\\\u0003\";\n        expectedNullChars[4] = \"\\\\u0004\";\n        expectedNullChars[5] = \"\\\\u0005\";\n        expectedNullChars[6] = \"\\\\u0006\";\n        expectedNullChars[7] = \"\\\\u0007\";\n        expectedNullChars[8] = \"\\\\b\";\n        expectedNullChars[9] = \"\\\\t\";\n        expectedNullChars[10] = \"\\\\n\";\n        expectedNullChars[11] = \"\\\\u000b\";\n        expectedNullChars[12] = \"\\\\f\";\n        expectedNullChars[13] = \"\\\\r\";\n        expectedNullChars[14] = \"\\\\u000e\";\n        expectedNullChars[15] = \"\\\\u000f\";\n        expectedNullChars[16] = \"\\\\u0010\";\n        expectedNullChars[17] = \"\\\\u0011\";\n        expectedNullChars[18] = \"\\\\u0012\";\n        expectedNullChars[19] = \"\\\\u0013\";\n        expectedNullChars[20] = \"\\\\u0014\";\n        expectedNullChars[21] = \"\\\\u0015\";\n        expectedNullChars[22] = \"\\\\u0016\";\n        expectedNullChars[23] = \"\\\\u0017\";\n        expectedNullChars[24] = \"\\\\u0018\";\n        expectedNullChars[25] = \"\\\\u0019\";\n        expectedNullChars[26] = \"\\\\u001a\";\n        expectedNullChars[27] = \"\\\\u001b\";\n        expectedNullChars[28] = \"\\\\u001c\";\n        expectedNullChars[29] = \"\\\\u001d\";\n        expectedNullChars[30] = \"\\\\u001e\";\n        expectedNullChars[31] = \"\\\\u001f\";\n\n        for (var index in expectedNullChars) {\n\n            var str = JSON.stringify({ \"name\": \"Jo\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\\u0009\\u000A\\u000B\\u000C\\u000D\\u000E\\u000F\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001A\\u001B\\u001C\\u001D\\u001E\\u001Fhn\" });\n            result = (result && str.indexOf(expectedNullChars[index]) !== -1 && str.indexOf(expectedNullChars[index]) !== -1);\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-26",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-26.js",
    "description": "JSON.stringify - the last element of the concatenation is ']' (The abstract operation JA(value) step 10.b.iii)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        arrObj[0] = \"a\";\n        arrObj[1] = \"b\";\n        arrObj[2] = \"c\";\n\n        var jsonText = JSON.stringify(arrObj, undefined, \"\").toString();\n        return jsonText.substr(jsonText.length - 1, 1) === \"]\";\n    }).call(this));\n"
   },
   {
    "id": "15.12.3-11-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-3.js",
    "description": "A JSON.stringify correctly works on top level string values.",
    "test": "assertTrue((JSON.stringify(\"a string\") === '\"a string\"'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-4",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-4.js",
    "description": "JSON.stringify correctly works on top level Number values.",
    "test": "assertTrue((JSON.stringify(123) === '123'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-5",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-5.js",
    "description": "JSON.stringify correctly works on top level Boolean values.",
    "test": "assertTrue((JSON.stringify(true) === 'true'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-6",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-6.js",
    "description": "JSON.stringify correctly works on top level null values.",
    "test": "assertTrue((JSON.stringify(null) === 'null'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-7",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-7.js",
    "description": "JSON.stringify correctly works on top level Number objects.",
    "test": "assertTrue((JSON.stringify(new Number(42)) === '42'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-8",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-8.js",
    "description": "JSON.stringify correctly works on top level String objects.",
    "test": "assertTrue((JSON.stringify(new String('wrappered')) === '\"wrappered\"'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-11-9",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-11-9.js",
    "description": "JSON.stringify correctly works on top level Boolean objects.",
    "test": "assertTrue((JSON.stringify(new Boolean(false)) === 'false'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-4-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-4-1.js",
    "description": "JSON.stringify ignores replacer aruguments that are not functions or arrays..",
    "test": "assertTrue((function testcase() {\n  try {\n     return JSON.stringify([42],{})=== '[42]';\n     }\n   catch (e) {return  false}\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-5-a-i-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-5-a-i-1.js",
    "description": "JSON.stringify converts Number wrapper object space aruguments to Number values",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, new Number(5))=== JSON.stringify(obj,null, 5);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-5-b-i-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-5-b-i-1.js",
    "description": "JSON.stringify converts String wrapper object space aruguments to String values",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, new String('xxx'))=== JSON.stringify(obj,null, 'xxx');\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-a-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-a-1.js",
    "description": "JSON.stringify treats numeric space arguments greater than 10 the same as a  space argument of 10.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, 10)=== JSON.stringify(obj,null, 100);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-a-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-a-2.js",
    "description": "JSON.stringify truccates non-integer numeric space arguments to their integer part.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, 5.99999)=== JSON.stringify(obj,null, 5);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-b-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-b-1.js",
    "description": "JSON.stringify treats numeric space arguments less than 1 (0.999999)the same as emptry string space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, 0.999999)=== JSON.stringify(obj);  /* emptry string should be same as no space arg */\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-b-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-b-2.js",
    "description": "JSON.stringify treats numeric space arguments less than 1 (0)the same as emptry string space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, 0)=== JSON.stringify(obj);  /* emptry string should be same as no space arg */\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-b-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-b-3.js",
    "description": "JSON.stringify treats numeric space arguments less than 1 (-5) the same as emptry string space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, -5)=== JSON.stringify(obj);  /* emptry string should be same as no space arg */\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-6-b-4",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-6-b-4.js",
    "description": "JSON.stringify treats numeric space arguments (in the range 1..10) is equivalent to a string of spaces of that length.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  var fiveSpaces = '     ';\n  //               '12345'\n  return JSON.stringify(obj,null, 5)=== JSON.stringify(obj, null, fiveSpaces);  \n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-7-a-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-7-a-1.js",
    "description": "JSON.stringify only uses the first 10 characters of a string space arguments.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj,null, '0123456789xxxxxxxxx')=== JSON.stringify(obj,null, '0123456789');  \n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-8-a-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-8-a-1.js",
    "description": "JSON.stringify treats an empty string space argument the same as a missing space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj)=== JSON.stringify(obj,null, '');\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-8-a-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-8-a-2.js",
    "description": "JSON.stringify treats an Boolean space argument the same as a missing space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj)=== JSON.stringify(obj,null, true);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-8-a-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-8-a-3.js",
    "description": "JSON.stringify treats an null space argument the same as a missing space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj)=== JSON.stringify(obj,null, null);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-8-a-4",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-8-a-4.js",
    "description": "JSON.stringify treats an Boolean wrapper space argument the same as a missing space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj)=== JSON.stringify(obj,null, new Boolean(true));\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3-8-a-5",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3-8-a-5.js",
    "description": "JSON.stringify treats non-Number or String object space arguments the same as a missing space argument.",
    "test": "assertTrue((function testcase() {\n  var obj = {a1: {b1: [1,2,3,4], b2: {c1: 1, c2: 2}},a2: 'a2'};\n  return JSON.stringify(obj)=== JSON.stringify(obj,null, obj);\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-2-b-i-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-2-b-i-1.js",
    "description": "JSON.stringify converts string wrapper objects returned from a toJSON call to literal strings.",
    "test": "assertTrue((function testcase() {\n  var obj = {\n    prop:42,\n    toJSON: function () {return 'fortytwo objects'}\n    };\n  return JSON.stringify([obj]) === '[\"fortytwo objects\"]';\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-2-b-i-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-2-b-i-2.js",
    "description": "JSON.stringify converts Number wrapper objects returned from a toJSON call to literal Number.",
    "test": "assertTrue((function testcase() {\n  var obj = {\n    prop:42,\n    toJSON: function () {return new Number(42)}\n    };\n  return JSON.stringify([obj]) === '[42]';\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-2-b-i-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-2-b-i-3.js",
    "description": "JSON.stringify converts Boolean wrapper objects returned from a toJSON call to literal Boolean values.",
    "test": "assertTrue((function testcase() {\n  var obj = {\n    prop:42,\n    toJSON: function () {return new Boolean(true)}\n    };\n  return JSON.stringify([obj]) === '[true]';\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-3-a-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-3-a-1.js",
    "description": "JSON.stringify converts string wrapper objects returned from replacer functions to literal strings.",
    "test": "assertTrue((JSON.stringify([42], function(k,v) {return v===42? new String('fortytwo'):v}) === '[\"fortytwo\"]'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-3-a-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-3-a-2.js",
    "description": "JSON.stringify converts Number wrapper objects returned from replacer functions to literal numbers.",
    "test": "assertTrue((JSON.stringify([42], function(k,v) {return v===42? new Number(84):v}) === '[84]'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_2-3-a-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_2-3-a-3.js",
    "description": "JSON.stringify converts Boolean wrapper objects returned from replacer functions to literal numbers.",
    "test": "assertTrue((JSON.stringify([42], function(k,v) {return v===42? new Boolean(false):v}) === '[false]'));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_4-1-1",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_4-1-1.js",
    "description": "JSON.stringify a circular object throws a error",
    "test": "assertTrue((function testcase() {\n  var obj = {};\n  obj.prop = obj;\n  try {\n     JSON.stringify(obj);\n     return false;  // should not reach here\n     }\n   catch (e) {return true}\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_4-1-2",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_4-1-2.js",
    "description": "JSON.stringify a circular object throws a TypeError",
    "test": "assertTrue((function testcase() {\n  var obj = {};\n  obj.prop = obj;\n  try {\n     JSON.stringify(obj);\n     return false;  // should not reach here\n     }\n   catch (e) {return e.name==='TypeError'}\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   },
   {
    "id": "15.12.3_4-1-3",
    "path": "TestCases/chapter15/15.12/15.12.3/15.12.3_4-1-3.js",
    "description": "JSON.stringify a indirectly circular object throws a error",
    "test": "assertTrue((function testcase() {\n  var obj = {p1: {p2: {}}};\n  obj.p1.p2.prop = obj;\n  try {\n     JSON.stringify(obj);\n     return false;  // should not reach here\n     }\n   catch (e) {return  true}\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.stringify))"
   }
  ]
 }
}
