{
 "testCollection": {
  "name": "11.1.5",
  "numTests": 28,
  "tests": [
   {
    "id": "11.1.5-0-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-0-1.js",
    "description": "Object literal - get set property",
    "test": "assertTrue((function testcase() {\n  var s1 = \"In getter\";\n  var s2 = \"In setter\";\n  var s3 = \"Modified by setter\";\n  eval(\"var o = {get foo(){ return s1;},set foo(arg){return s2 = s3}};\");\n  if(o.foo !== s1) \n    return false;\n  o.foo=10;\n  if(s2 !== s3) \n    return false;\n  return true;\n }).call(this));\n"
   },
   {
    "id": "11.1.5-0-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-0-2.js",
    "description": "Object literal - multiple get set properties",
    "test": "assertTrue((function testcase() {\n  var s1 = \"First getter\";\n  var s2 = \"First setter\";\n  var s3 = \"Second getter\";\n  eval(\"var o = {get foo(){ return s1;},set foo(arg){return s2 = s3}, get bar(){ return s3}, set bar(arg){ s3 = arg;}};\");\n  if(o.foo !== s1) \n    return false;\n  o.foo = 10;\n  if(s2 !== s3) \n    return false;\n  if(o.bar !== s3)\n    return false;\n  o.bar = \"Second setter\";\n  if(o.bar !== \"Second setter\")\n    return false;\n  return true;\n }).call(this));\n"
   },
   {
    "id": "11.1.5-1-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-1-s.js",
    "description": "Strict Mode - SyntaxError is thrown when 'eval' occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code",
    "test": "assertTrue((function testcase() {\n        \"use strict\";\n\n        try {\n            eval(\"var obj = {set _11_1_5_1_fun(eval) {}};\");\n            return false;\n        } catch (e) {\n            return (e instanceof SyntaxError);\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5-2-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-2-s.js",
    "description": "Strict Mode - SyntaxError is thrown when 'arguments' occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code",
    "test": "assertTrue((function testcase() {\n         \"use strict\";\n\n        try {\n            eval(\"var obj = {set _11_1_5_2_fun(arguments) {} };\");\n             return false;\n        } catch (e) {\n            return (e instanceof SyntaxError);\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5-3-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-3-s.js",
    "description": "Strict Mode - SyntaxError is thrown when  'evals'  occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment  if its FunctionBody is strict code",
    "test": "assertTrue((function testcase() {\n\n        try {\n            eval(\"var obj = {set _11_1_5_3_fun(eval) { \\\"use strict\\\"; }};\");\n            return false;\n        } catch (e) {\n            return (e instanceof SyntaxError);\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5-4-4-a-1-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-4-4-a-1-s.js",
    "description": "Object literal - SyntaxError for duplicate date property name in strict mode",
    "test": "assertTrue((function testcase() {\n  \n  try\n  {\n    eval(\"'use strict'; ({foo:0,foo:1});\");\n    return false;\n  }\n  catch(e)\n  {\n    return (e instanceof SyntaxError);\n  }\n }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5-4-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5-4-s.js",
    "description": "Strict Mode - SyntaxError is thrown when 'arguments'  occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment  if its FunctionBody is strict code",
    "test": "assertTrue((function testcase() {\n\n        try {\n            eval(\"var obj = {set _11_1_5_4_fun(arguments) {\\\"use strict\\\";}};\");\n            return false;\n        } catch (e) {\n            return (e instanceof SyntaxError);\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5_3-3-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_3-3-1.js",
    "description": "Object initialization using PropertyNameAndValueList (PropertyAssignment) when property (read-only) exists in Object.prototype (step 3)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Object.prototype, \"prop\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n            var obj = { prop: 12 };\n\n            return obj.hasOwnProperty(\"prop\") && obj.prop === 12;\n        } finally {\n            delete Object.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "11.1.5_4-4-a-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-a-2.js",
    "description": "Object literal - Duplicate data property name allowed if not in strict mode",
    "test": "assertTrue((function testcase() {\n  \n  eval(\"({foo:0,foo:1});\");\n  return true;\n  }).call(this));\n"
   },
   {
    "id": "11.1.5_4-4-a-3",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-a-3.js",
    "description": "Object literal - Duplicate data property name allowed gets last defined value",
    "test": "assertTrue((function testcase() {\n  \n  var o = eval(\"({foo:0,foo:1});\");\n  return o.foo===1;\n  }).call(this));\n"
   },
   {
    "id": "11.1.5_4-4-b-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-b-1.js",
    "description": "Object literal - SyntaxError if a data property definition is followed by get accessor definition with the same name",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({foo : 1, get foo(){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-b-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-b-2.js",
    "description": "Object literal - SyntaxError if a data property definition is followed by set accessor definition with the same name",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({foo : 1, set foo(x){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-c-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-c-1.js",
    "description": "Object literal - SyntaxError if a get accessor property definition is followed by a data property definition with the same name",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({get foo(){}, foo : 1});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-c-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-c-2.js",
    "description": "Object literal - SyntaxError if a set accessor property definition is followed by a data property definition with the same name",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({set foo(x){}, foo : 1});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false};\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-d-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-d-1.js",
    "description": "Object literal - SyntaxError for duplicate property name (get,get)",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({get foo(){}, get foo(){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-d-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-d-2.js",
    "description": "Object literal - SyntaxError for duplicate property name (set,set)",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({set foo(arg){}, set foo(arg1){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-d-3",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-d-3.js",
    "description": "Object literal - SyntaxError for duplicate property name (get,set,get)",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({get foo(){}, set foo(arg){}, get foo(){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-4-d-4",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-4-d-4.js",
    "description": "Object literal - SyntaxError for duplicate property name (set,get,set)",
    "test": "assertTrue((function testcase() {\n  try\n  {\n    eval(\"({set foo(arg){}, get foo(){}, set foo(arg1){}});\");\n    return false;\n  }\n  catch(e)\n  {\n    return e instanceof SyntaxError;\n  }\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return true;\n}).call(this)"
   },
   {
    "id": "11.1.5_4-5-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_4-5-1.js",
    "description": "Object initialization using PropertyNameAndValueList (PropertyNameAndValueList , PropertyAssignment) when property (read-only) exists in Object.prototype (Step 5)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Object.prototype, \"prop2\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n\n            var obj = { prop1: 101, prop2: 12 };\n\n            return obj.hasOwnProperty(\"prop2\");\n        } finally {\n            delete Object.prototype.prop2;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "11.1.5_5-4-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_5-4-1.js",
    "description": "Object literal - property descriptor for assignment expression",
    "test": "assertTrue((function testcase() {\n\n  var o = {foo : 1};\n  var desc = Object.getOwnPropertyDescriptor(o,\"foo\");\n  if(desc.value === 1 &&\n     desc.writable === true &&\n     desc.enumerable === true &&\n     desc.configurable === true)\n    return true;\n }).call(this));\n",
    "precondition": "(fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "11.1.5_6-2-1-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_6-2-1-s.js",
    "description": "Strict Mode - SyntaxError is thrown when an assignment to a reserved word or a future reserved word is contained in strict code",
    "test": "assertTrue((function testcase() {\n        \"use strict\";\n\n        try {\n            eval(\"var obj = {\\\n                get _11_1_5_6_2_1() {\\\n                   public = 42;\\\n                   return public;\\\n                }\\\n            };\");\n\n            var _11_1_5_6_2_1 = obj._11_1_5_6_2_1;\n            return false;\n        } catch (e) {\n            return e instanceof SyntaxError;\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5_6-2-2-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_6-2-2-s.js",
    "description": "Strict Mode - SyntaxError is thrown when an assignment to a reserved word or a future reserved word is made inside a strict mode FunctionBody of a PropertyAssignment",
    "test": "assertTrue((function testcase() {\n\n        try {\n            eval(\"var obj = {\\\n                get _11_1_5_6_2_2() {\\\n                   \\\"use strict\\\";\\\n                   public = 42;\\\n                   return public;\\\n                }\\\n            };\\\n            var _11_1_5_6_2_2 = obj._11_1_5_6_2_2;\");\n            return false;\n        } catch (e) {\n            return e instanceof SyntaxError;\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5_6-3-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_6-3-1.js",
    "description": "Object literal - property descriptor for get property assignment",
    "test": "assertTrue((function testcase() {\n\n  eval(\"var o = {get foo(){return 1;}};\");\n  var desc = Object.getOwnPropertyDescriptor(o,\"foo\");\n  if(desc.enumerable === true &&\n     desc.configurable === true)\n    return true;\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return fnExists(Object.getOwnPropertyDescriptor);\n}).call(this)"
   },
   {
    "id": "11.1.5_6-3-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_6-3-2.js",
    "description": "Object literal - property descriptor for get property assignment should not create a set function",
    "test": "assertTrue((function testcase() {\n\n  eval(\"var o = {get foo(){return 1;}};\");\n  var desc = Object.getOwnPropertyDescriptor(o,\"foo\");\n  return desc.set === undefined\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return fnExists(Object.getOwnPropertyDescriptor);;\n}).call(this)"
   },
   {
    "id": "11.1.5_7-2-1-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_7-2-1-s.js",
    "description": "Strict Mode - SyntaxError is thrown when an assignment to a reserved word is contained in strict code",
    "test": "assertTrue((function testcase() {\n        \"use strict\";\n\n        try {\n            eval(\"var data = \\\"data\\\";\\\n            var obj = {\\\n                set _11_1_5_7_2_1(value) {\\\n                    public = 42;\\\n                    data = value;\\\n                }\\\n            };\\\n            obj._11_1_5_7_2_1 = 1;\");\n            return false;\n        } catch (e) {\n            return e instanceof SyntaxError;\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5_7-2-2-s",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_7-2-2-s.js",
    "description": "Strict Mode - SyntaxError is thrown when an assignment to a reserved word is made in  a strict FunctionBody of a PropertyAssignment",
    "test": "assertTrue((function testcase() {\n        \"use strict\";\n\n        try {\n            eval(\"var data = \\\"data\\\";\\\n            var obj = {\\\n                set _11_1_5_7_2_2(value) {\\\n                    public = 42;\\\n                    data = value;\\\n                }\\\n            };\\\n            obj._11_1_5_7_2_2 = 1;\");\n            return false;\n        } catch (e) {\n            return e instanceof SyntaxError;\n        }\n    }).call(this));\n",
    "precondition": "(fnSupportsStrict())",
    "strict_only": ""
   },
   {
    "id": "11.1.5_7-3-1",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_7-3-1.js",
    "description": "Object literal - property descriptor for set property assignment",
    "test": "assertTrue((function testcase() {\n\n  eval(\"var o = {set foo(arg){return 1;}};\");\n  var desc = Object.getOwnPropertyDescriptor(o,\"foo\");\n  if(desc.enumerable === true &&\n     desc.configurable === true)\n    return true;\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return fnExists(Object.getOwnPropertyDescriptor);;\n}).call(this)"
   },
   {
    "id": "11.1.5_7-3-2",
    "path": "TestCases/chapter11/11.1/11.1.5/11.1.5_7-3-2.js",
    "description": "Object literal - property descriptor for set property assignment should not create a get function",
    "test": "assertTrue((function testcase() {\n\n  eval(\"var o = {set foo(arg){}};\");\n  var desc = Object.getOwnPropertyDescriptor(o,\"foo\");\n  return desc.get === undefined\n }).call(this));\n",
    "precondition": "(function () {\n   //accessor properties in object literals must be allowed\n  try {eval(\"({set foo(x) {}, get foo(){}});\");}\n  catch(e) {return false}\n  return fnExists(Object.getOwnPropertyDescriptor);;\n}).call(this)"
   }
  ]
 }
}
