{
 "testCollection": {
  "name": "12.10",
  "numTests": 12,
  "tests": [
   {
    "id": "12.10-0-1",
    "path": "TestCases/chapter12/12.10/12.10-0-1.js",
    "description": "with does not change declaration scope - vars in with are visible outside",
    "test": "assertTrue((function testcase() {\n  var o = {};\n  var f = function () {\n\t/* capture foo binding before executing with */\n\treturn foo;\n      }\n\n  with (o) {\n    var foo = \"12.10-0-1\";\n  }\n\n  return f()===\"12.10-0-1\"\n\n }).call(this));\n"
   },
   {
    "id": "12.10-0-10",
    "path": "TestCases/chapter12/12.10/12.10-0-10.js",
    "description": "with introduces scope - name lookup finds function parameter",
    "test": "assertTrue((function testcase() {\n  function f(o) {\n\n    function innerf(o, x) {\n      with (o) {\n        return x;\n      }\n    }\n\n    return innerf(o, 42);\n  }\n  \n  if (f({}) === 42) {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "12.10-0-11",
    "path": "TestCases/chapter12/12.10/12.10-0-11.js",
    "description": "with introduces scope - name lookup finds inner variable",
    "test": "assertTrue((function testcase() {\n  function f(o) {\n\n    function innerf(o) {\n      var x = 42;\n\n      with (o) {\n        return x;\n      }\n    }\n\n    return innerf(o);\n  }\n  \n  if (f({}) === 42) {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "12.10-0-12",
    "path": "TestCases/chapter12/12.10/12.10-0-12.js",
    "description": "with introduces scope - name lookup finds property",
    "test": "assertTrue((function testcase() {\n  function f(o) {\n\n    function innerf(o) {\n      with (o) {\n        return x;\n      }\n    }\n\n    return innerf(o);\n  }\n  \n  if (f({x:42}) === 42) {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "12.10-0-3",
    "path": "TestCases/chapter12/12.10/12.10-0-3.js",
    "description": "with introduces scope - that is captured by function expression",
    "test": "assertTrue((function testcase() {\n  var o = {prop: \"12.10-0-3 before\"};\n  var f;\n\n  with (o) {\n    f = function () { return prop; }\n  }\n  o.prop = \"12.10-0-3 after\";\n  return f()===\"12.10-0-3 after\"\n }).call(this));\n"
   },
   {
    "id": "12.10-0-7",
    "path": "TestCases/chapter12/12.10/12.10-0-7.js",
    "description": "with introduces scope - scope removed when exiting with statement",
    "test": "assertTrue((function testcase() {\n  var o = {foo: 1};\n\n  with (o) {\n    foo = 42;\n  }\n\n  try {\n    foo;\n  }\n  catch (e) {\n     return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "12.10-0-8",
    "path": "TestCases/chapter12/12.10/12.10-0-8.js",
    "description": "with introduces scope - var initializer sets like named property",
    "test": "assertTrue((function testcase() {\n  var o = {foo: 42};\n\n  with (o) {\n    var foo = \"set in with\";\n  }\n\n  return o.foo === \"set in with\";\n }).call(this));\n"
   },
   {
    "id": "12.10-0-9",
    "path": "TestCases/chapter12/12.10/12.10-0-9.js",
    "description": "with introduces scope - name lookup finds outer variable",
    "test": "assertTrue((function testcase() {\n  function f(o) {\n    var x = 42;\n\n    function innerf(o) {\n      with (o) {\n        return x;\n      }\n    }\n\n    return innerf(o);\n  }\n  \n  if (f({}) === 42) {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "12.10-2-1",
    "path": "TestCases/chapter12/12.10/12.10-2-1.js",
    "description": "with - expression being Number",
    "test": "assertTrue((function testcase() {\n  var o = 2;\n  var foo = 1;\n  try\n  {\n    with (o) {\n      foo = 42;\n    }\n  }\n  catch(e)\n  {\n  }\n  return true;\n  \n }).call(this));\n"
   },
   {
    "id": "12.10-2-2",
    "path": "TestCases/chapter12/12.10/12.10-2-2.js",
    "description": "with - expression being Boolean",
    "test": "assertTrue((function testcase() {\n  var o = true;\n  var foo = 1;\n  try\n  {\n    with (o) {\n      foo = 42;\n    }\n  }\n  catch(e)\n  {\n  }\n  return true;\n  \n }).call(this));\n"
   },
   {
    "id": "12.10-2-3",
    "path": "TestCases/chapter12/12.10/12.10-2-3.js",
    "description": "with - expression being string",
    "test": "assertTrue((function testcase() {\n  var o = \"str\";\n  var foo = 1;\n  try\n  {\n    with (o) {\n      foo = 42;\n    }\n  }\n  catch(e)\n  {\n  }\n  return true;\n  \n }).call(this));\n"
   },
   {
    "id": "12.10-7-1",
    "path": "TestCases/chapter12/12.10/12.10-7-1.js",
    "description": "with introduces scope - restores the earlier environment on exit",
    "test": "assertTrue((function testcase() {\n  var a = 1;\n\n  var o = {a : 2};\n  try\n  {\n    with (o) {\n      a = 3;\n      throw 1;\n      a = 4;\n    }\n  }\n  catch(e)\n  {}\n\n  if (a === 1 && o.a === 3) {\n      return true;\n  }\n\n }).call(this));\n"
   }
  ]
 }
}
