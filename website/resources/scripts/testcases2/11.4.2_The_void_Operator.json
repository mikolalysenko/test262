{
 "testCollection": {
  "name": "11.4.2_The_void_Operator",
  "numTests": 9,
  "tests": [
   {
    "section": "11.4.2",
    "description": "Checking by using eval",
    "test": "//CHECK#1\nif (eval(\"void\\u00090\") !== undefined) {\n  $ERROR('#1: void\\\\u00090 === undefined');\n}\n\n//CHECK#2\nif (eval(\"void\\u000B0\") !== undefined) {\n  $ERROR('#2: void\\\\u000B0 === undefined');  \n}\n\n//CHECK#3\nif (eval(\"void\\u000C0\") !== undefined) {\n  $ERROR('#3: void\\\\u000C0 === undefined');\n}\n\n//CHECK#4\nif (eval(\"void\\u00200\") !== undefined) {\n  $ERROR('#4: void\\\\u00200 === undefined');\n}\n\n//CHECK#5\nif (eval(\"void\\u00A00\") !== undefined) {\n  $ERROR('#5: void\\\\u00A00 === undefined');\n}\n\n//CHECK#6\nif (eval(\"void\\u000A0\") !== undefined) {\n  $ERROR('#6: void\\\\u000A0 === undefined');  \n}\n\n//CHECK#7\nif (eval(\"void\\u000D0\") !== undefined) {\n  $ERROR('#7: void\\\\u000D0 === undefined');\n}\n\n//CHECK#8\nif (eval(\"void\\u20280\") !== undefined) {\n  $ERROR('#8: void\\\\u20280 === undefined');\n}\n\n//CHECK#9\nif (eval(\"void\\u20290\") !== undefined) {\n  $ERROR('#9: void\\\\u20290 === undefined');\n}\n\n//CHECK#10\nif (eval(\"void\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u20290\") !== undefined) {\n  $ERROR('#10: void\\\\u0009\\\\u000B\\\\u000C\\\\u0020\\\\u00A0\\\\u000A\\\\u000D\\\\u2028\\\\u20290 === undefined');\n}\n",
    "id": "S11.4.2_A1"
   },
   {
    "section": "11.4.2",
    "description": "Either Type(x) is not Reference or GetBase(x) is not null",
    "test": "//CHECK#1\nif (void 0 !== undefined) {\n  $ERROR('#1: void 0 === undefined. Actual: ' + (void 0));\n}\n\n//CHECK#2\nvar x = 0;\nif (void x !== undefined) {\n  $ERROR('#2: var x = 0; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#3\nvar x = new Object();\nif (void x !== undefined) {\n  $ERROR('#3: var x = new Object(); void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A2_T1"
   },
   {
    "section": "11.4.2",
    "description": "If GetBase(x) is null, throw ReferenceError",
    "negative": "",
    "test": "//CHECK#1\nvoid x;\n",
    "id": "S11.4.2_A2_T2"
   },
   {
    "section": "11.4.2",
    "description": "Type(x) is boolean primitive or Boolean object",
    "test": "//CHECK#1\nvar x = false; \nif (void x !== undefined) {\n  $ERROR('#1: var x = false; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#2\nvar x = new Boolean(true);\nif (void x !== undefined) {\n  $ERROR('#2: var x = new Boolean(true); void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A4_T1"
   },
   {
    "section": "11.4.2",
    "description": "Type(x) is number primitive or Number object",
    "test": "//CHECK#1\nvar x = 0.1;\nif (void x !== undefined) {\n  $ERROR('#1: var x = 0.1; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#2\nvar x = new Number(-1.1);\nif (void x !== undefined) {\n  $ERROR('#2: var x = new Number(-1.1); void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A4_T2"
   },
   {
    "section": "11.4.2",
    "description": "Type(x) is string primitive of String object",
    "test": "//CHECK#1\nvar x = \"1\";\nif (void x !== undefined) {\n  $ERROR('#1: var x = \"1\"; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#2\nvar x = \"x\"; \nif (isNaN(void x) !== true) {\n  $ERROR('#2: var x = \"x\"; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#3\nvar x = new String(\"-1\");\nif (void x !== undefined) {\n  $ERROR('#3: var x = new String(\"-1\"); void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A4_T3"
   },
   {
    "section": "11.4.2",
    "description": "Type(x) is undefined or null",
    "test": "//CHECK#1\nvar x; \nif (isNaN(void x) !== true) {\n  $ERROR('#1: var x; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#2\nvar x = null;\nif (void x !== undefined) {\n  $ERROR('#2: var x = null; void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A4_T4"
   },
   {
    "section": "11.4.2",
    "description": "Type(x) is Object object or Function object",
    "test": "//CHECK#1\nvar x = {}; \nif (isNaN(void x) !== true) {\n  $ERROR('#1: var x = {}; void x === undefined. Actual: ' + (void x));\n}\n\n//CHECK#2\nvar x = function(){return 1}; \nif (isNaN(void x) !== true) {\n  $ERROR('#2: var x = function(){return 1}; void x === undefined. Actual: ' + (void x));\n}\n",
    "id": "S11.4.2_A4_T5"
   },
   {
    "section": "11.4.2",
    "description": "Checking Simple Assignment operator",
    "test": "//CHECK#1\nvar x = 0;\nif (void (x = 1) !== undefined) {\n  $ERROR('#1: var x = 0; void (x = 1) === undefined. Actual: ' + (void (x = 1)));\n} else {\n  if (x !== 1) {\n    $ERROR('#1: var x = 0; void (x = 1); x === 1. Actual: ' + (x));\n  } \n}\n",
    "id": "S11.4.2_A4_T6"
   }
  ]
 }
}
