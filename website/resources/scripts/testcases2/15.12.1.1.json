{
 "testCollection": {
  "name": "15.12.1.1",
  "numTests": 32,
  "tests": [
   {
    "id": "15.12.1.1-0-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-1.js",
    "description": "The JSON lexical grammar treats whitespace as a token seperator",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('12\\t\\r\\n 34'); // should produce a syntax error as whitespace results in two tokens\n    }\n  catch (e) {\n      if (e.name === 'SyntaxError') return true;\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-2.js",
    "description": "<VT> is not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\u000b1234'); // should produce a syntax error \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-3.js",
    "description": "<FF> is not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\u000c1234'); // should produce a syntax error \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-4",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-4.js",
    "description": "<NBSP> is not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\u00a01234'); // should produce a syntax error \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-5",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-5.js",
    "description": "<ZWSPP> is not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\u200b1234'); // should produce a syntax error \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-6",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-6.js",
    "description": "<BOM> is not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\ufeff1234'); // should produce a syntax error a\n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-7",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-7.js",
    "description": "other category z spaces are not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    // the following should produce a syntax error \n    JSON.parse('\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u30001234'); \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n     }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-8",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-8.js",
    "description": "U+2028 and U+2029 are not valid JSON whitespace as specified by the production JSONWhitespace.",
    "test": "assertTrue((function testcase() {\n  \n  try {\n    JSON.parse('\\u2028\\u20291234'); // should produce a syntax error \n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse(' 1234')===1234)"
   },
   {
    "id": "15.12.1.1-0-9",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-0-9.js",
    "description": "Whitespace characters can appear before/after any JSONtoken",
    "test": "assertTrue((function testcase() {\n\n    JSON.parse('\\t\\r \\n{\\t\\r \\n'+\n                   '\"property\"\\t\\r \\n:\\t\\r \\n{\\t\\r \\n}\\t\\r \\n,\\t\\r \\n' +\n                   '\"prop2\"\\t\\r \\n:\\t\\r \\n'+\n                        '[\\t\\r \\ntrue\\t\\r \\n,\\t\\r \\nnull\\t\\r \\n,123.456\\t\\r \\n]'+\n                     '\\t\\r \\n}\\t\\r \\n');  // should JOSN parse without error\n    return true;\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-g1-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g1-1.js",
    "description": "The JSON lexical grammar treats <TAB> as a whitespace character",
    "test": "assertTrue((function testcase() {\n  if (JSON.parse('\\t1234')!==1234) return false; // <TAB> should be ignored\n  try {\n    JSON.parse('12\\t34'); // <TAB> should produce a syntax error as whitespace results in two tokens\n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-g1-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g1-2.js",
    "description": "The JSON lexical grammar treats <CR> as a whitespace character",
    "test": "assertTrue((function testcase() {\n  if (JSON.parse('\\r1234')!==1234) return false; // <cr> should be ignored\n  try {\n    JSON.parse('12\\r34'); // <CR> should produce a syntax error as whitespace results in two tokens\n    }\n  catch (e) {\n      if (e.name === 'SyntaxError') return true;\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-g1-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g1-3.js",
    "description": "The JSON lexical grammar treats <LF> as a whitespace character",
    "test": "assertTrue((function testcase() {\n  if (JSON.parse('\\n1234')!==1234) return false; // <LF> should be ignored\n  try {\n    JSON.parse('12\\n34'); // <LF> should produce a syntax error as whitespace results in two tokens\n    }\n  catch (e) {\n      if (e.name === 'SyntaxError') return true;\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-g1-4",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g1-4.js",
    "description": "The JSON lexical grammar treats <SP> as a whitespace character",
    "test": "assertTrue((function testcase() {\n if (JSON.parse(' 1234')!=1234) return false; // <SP> should be ignored\n  try {\n    JSON.parse('12 34'); // <SP> should produce a syntax error as whitespace results in two tokens\n    }\n  catch (e) {\n      if (e.name === 'SyntaxError') return true;\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('1234')===1234)"
   },
   {
    "id": "15.12.1.1-g2-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g2-1.js",
    "description": "JSONStrings can be written using double quotes",
    "test": "assertTrue((JSON.parse('\"abc\"')===\"abc\"));\n",
    "precondition": "(JSON && fnExists(JSON.parse))"
   },
   {
    "id": "15.12.1.1-g2-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g2-2.js",
    "description": "A JSONString may not be delimited by single quotes ",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n    try {\n        if (JSON.parse(\"'abc'\") ==='abc') return false;\n       }\n     catch (e) {\n        return true;\n        }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&&  JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g2-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g2-3.js",
    "description": "A JSONString may not be delimited by Uncode escaped quotes ",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n    try {\n        if (JSON.parse(\"\\\\u0022abc\\\\u0022\") ==='abc') return false;\n       }\n     catch (e) {\n        return true;\n        }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g2-4",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g2-4.js",
    "description": "A JSONString must both begin and end with double quotes",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n    try {\n        if (JSON.parse('\"ab'+\"c'\") ==='abc') return false;\n       }\n     catch (e) {\n        return true;\n        }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g2-5",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g2-5.js",
    "description": "A JSONStrings can contain no JSONStringCharacters (Empty JSONStrings)",
    "test": "assertTrue((JSON.parse('\"\"')===\"\"));\n",
    "precondition": "(JSON && fnExists(JSON.parse) && JSON.parse('\"1234\"')==='1234')"
   },
   {
    "id": "15.12.1.1-g4-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g4-1.js",
    "description": "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0000 thru U+0007",
    "test": "assertTrue((function testcase() {\n  try {\n    JSON.parse('\"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\"'); // invalid string characters should produce a syntax error\n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g4-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g4-2.js",
    "description": "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0008 thru U+000F",
    "test": "assertTrue((function testcase() {\n  try {\n    JSON.parse('\"\\u0008\\u0009\\u000a\\u000b\\u000c\\u000d\\u000e\\u000f\"'); // invalid string characters should produce a syntax error\n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g4-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g4-3.js",
    "description": "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0010 thru U+0017",
    "test": "assertTrue((function testcase() {\n  try {\n    JSON.parse('\"\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\"'); // invalid string characters should produce a syntax error\n    }\n  catch (e) {\n      return true; // treat any exception as a pass, other tests ensure that JSON.parse throws SyntaxError exceptions\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g4-4",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g4-4.js",
    "description": "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0018 thru U+001F",
    "test": "assertTrue((function testcase() {\n  try {\n    JSON.parse('\"\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f\"'); // invalid string characters should produce a syntax error\n    }\n  catch (e) {\n      if (e.name === 'SyntaxError') return true;\n      }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g5-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g5-1.js",
    "description": "The JSON lexical grammar allows Unicode escape sequences in a JSONString",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((JSON.parse('\"\\\\u0058\"')==='X'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& '\\u0058'==='X' && JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g5-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g5-2.js",
    "description": "A JSONStringCharacter UnicodeEscape may not have fewer than 4 hex characters",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n    try {\n        JSON.parse('\"\\\\u005\"') \n       }\n     catch (e) {\n        return e.name==='SyntaxError'\n        }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& '\\u0058'==='X' && JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g5-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g5-3.js",
    "description": "A JSONStringCharacter UnicodeEscape may not include any non=hex characters",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n    try {\n        JSON.parse('\"\\\\u0X50\"') \n       }\n     catch (e) {\n        return e.name==='SyntaxError'\n        }\n  }).call(this));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& '\\u0058'==='X' && JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-1",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-1.js",
    "description": "The JSON lexical grammer allows '/' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\/\"')==='/'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-2",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-2.js",
    "description": "The JSON lexical grammer allows '' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\\\\\\"')==='\\\\'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-3",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-3.js",
    "description": "The JSON lexical grammer allows 'b' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\b\"')==='\\b'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-4",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-4.js",
    "description": "The JSON lexical grammer allows 'f' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\f\"')==='\\f'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-5",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-5.js",
    "description": "The JSON lexical grammer allows 'n' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\n\"')==='\\n'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-6",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-6.js",
    "description": "The JSON lexical grammer allows 'r' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\r\"')==='\\r'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   },
   {
    "id": "15.12.1.1-g6-7",
    "path": "TestCases/chapter15/15.12/15.12.1/15.12.1.1/15.12.1.1-g6-7.js",
    "description": "The JSON lexical grammer allows 't' as a JSONEscapeCharacter after '' in a JSONString",
    "test": "assertTrue((JSON.parse('\"\\\\t\"')==='\\t'));\n",
    "precondition": "(JSON && fnExists(JSON.parse)&& JSON.parse('\"1234\"')===\"1234\")"
   }
  ]
 }
}
