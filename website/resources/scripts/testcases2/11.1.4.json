{
 "testCollection": {
  "name": "11.1.4",
  "numTests": 3,
  "tests": [
   {
    "id": "11.1.4-0",
    "path": "TestCases/chapter11/11.1/11.1.4/11.1.4-0.js",
    "description": "elements elided at the end of an array do not contribute to its length",
    "test": "assertTrue((function testcase() {\n  var a = [,];\n  if (a.length === 1) {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "11.1.4_4-5-1",
    "path": "TestCases/chapter11/11.1/11.1.4/11.1.4_4-5-1.js",
    "description": "Initialize array using ElementList (Elisionopt AssignmentExpression) when index property (read-only) exists in Array.prototype (step 5)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n            var arr = [101];\n\n            return arr.hasOwnProperty(\"0\") && arr[0] === 101;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "11.1.4_5-6-1",
    "path": "TestCases/chapter11/11.1/11.1.4/11.1.4_5-6-1.js",
    "description": "Initialize array using ElementList (ElementList , Elisionopt AssignmentExpression) when index property (read-only) exists in Array.prototype (step 6)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n            var arr = [101, 12];\n\n            return arr.hasOwnProperty(\"1\") && arr[1] === 12;\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   }
  ]
 }
}
