{
 "testCollection": {
  "name": "15.12.2",
  "numTests": 13,
  "tests": [
   {
    "id": "15.12.2-0-1",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-0-1.js",
    "description": "JSON.parse must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = JSON.parse;\n\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(JSON !== undefined)"
   },
   {
    "id": "15.12.2-0-2",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-0-2.js",
    "description": "JSON.parse must exist as a function taking 2 parameters",
    "test": "assertTrue((function testcase() {\n  var f = JSON.parse;\n\n  if (typeof(f) === \"function\" && f.length === 2) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(JSON !== undefined)"
   },
   {
    "id": "15.12.2-0-3",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-0-3.js",
    "description": "JSON.parse must be deletable (configurable)",
    "test": "assertTrue((function testcase() {\n  var o = JSON;\n  var desc = Object.getOwnPropertyDescriptor(o, \"parse\");\n  return desc.configurable === true;\n }).call(this));\n",
    "precondition": "(function preq() {\n    return typeof JSON != \"undefined\" && fnExists(Object.getOwnPropertyDescriptor)\n  }).call(this)"
   },
   {
    "id": "15.12.2-2-1",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-1.js",
    "description": "JSON.parse - parsing an object where property name is a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ ' + nullChars[index] + ' : \"John\" } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-10",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-10.js",
    "description": "JSON.parse - parsing an object where property value middles with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ \"name\" : ' + \"Jo\" + nullChars[index] + \"hn\" + ' } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-2",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-2.js",
    "description": "JSON.parse - parsing an object where property name starts with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ ' + nullChars[index] + \"name\" + ' : \"John\" } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-3",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-3.js",
    "description": "JSON.parse - parsing an object where property name ends with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{' + \"name\" + nullChars[index] + ' : \"John\" } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-4",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-4.js",
    "description": "JSON.parse - parsing an object where property name starts and ends with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{' + nullChars[index] + \"name\" + nullChars[index] + ' : \"John\" } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-5",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-5.js",
    "description": "JSON.parse - parsing an object where property name middles with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ ' + \"na\" + nullChars[index] + \"me\" + ' : \"John\" } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-6",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-6.js",
    "description": "JSON.parse - parsing an object where property value is a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ \"name\" : ' + nullChars[index] + ' } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-7",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-7.js",
    "description": "JSON.parse - parsing an object where property value starts with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ \"name\" : ' + nullChars[index] + \"John\" + ' } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-8",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-8.js",
    "description": "JSON.parse - parsing an object where property value ends with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ \"name\" : ' + \"John\" + nullChars[index] + ' } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   },
   {
    "id": "15.12.2-2-9",
    "path": "TestCases/chapter15/15.12/15.12.2/15.12.2-2-9.js",
    "description": "JSON.parse - parsing an object where property value starts and ends with a null character",
    "test": "assertTrue((function testcase() {\n\n        var result = true;\n\n        var nullChars = new Array();\n        nullChars[0] = '\\\"\\u0000\\\"';\n        nullChars[1] = '\\\"\\u0001\\\"';\n        nullChars[2] = '\\\"\\u0002\\\"';\n        nullChars[3] = '\\\"\\u0003\\\"';\n        nullChars[4] = '\\\"\\u0004\\\"';\n        nullChars[5] = '\\\"\\u0005\\\"';\n        nullChars[6] = '\\\"\\u0006\\\"';\n        nullChars[7] = '\\\"\\u0007\\\"';\n        nullChars[8] = '\\\"\\u0008\\\"';\n        nullChars[9] = '\\\"\\u0009\\\"';\n        nullChars[10] = '\\\"\\u000A\\\"';\n        nullChars[11] = '\\\"\\u000B\\\"';\n        nullChars[12] = '\\\"\\u000C\\\"';\n        nullChars[13] = '\\\"\\u000D\\\"';\n        nullChars[14] = '\\\"\\u000E\\\"';\n        nullChars[15] = '\\\"\\u000F\\\"';\n        nullChars[16] = '\\\"\\u0010\\\"';\n        nullChars[17] = '\\\"\\u0011\\\"';\n        nullChars[18] = '\\\"\\u0012\\\"';\n        nullChars[19] = '\\\"\\u0013\\\"';\n        nullChars[20] = '\\\"\\u0014\\\"';\n        nullChars[21] = '\\\"\\u0015\\\"';\n        nullChars[22] = '\\\"\\u0016\\\"';\n        nullChars[23] = '\\\"\\u0017\\\"';\n        nullChars[24] = '\\\"\\u0018\\\"';\n        nullChars[25] = '\\\"\\u0019\\\"';\n        nullChars[26] = '\\\"\\u001A\\\"';\n        nullChars[27] = '\\\"\\u001B\\\"';\n        nullChars[28] = '\\\"\\u001C\\\"';\n        nullChars[29] = '\\\"\\u001D\\\"';\n        nullChars[30] = '\\\"\\u001E\\\"';\n        nullChars[31] = '\\\"\\u001F\\\"';\n\n        for (var index in nullChars) {\n            try {\n                var obj = JSON.parse('{ \"name\" : ' + nullChars[index] + \"John\" + nullChars[index] + ' } ');\n                result = (result && false);\n            } catch (e) {\n                result = (result && (e instanceof SyntaxError));\n            }\n        }\n        return result;\n    }).call(this));\n"
   }
  ]
 }
}
