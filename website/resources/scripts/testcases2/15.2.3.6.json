{
 "testCollection": {
  "name": "15.2.3.6",
  "numTests": 1114,
  "tests": [
   {
    "id": "15.2.3.6-0-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-0-1.js",
    "description": "Object.defineProperty must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = Object.defineProperty;\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "15.2.3.6-0-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-0-2.js",
    "description": "Object.defineProperty must exist as a function taking 3 parameters",
    "test": "assertTrue((Object.defineProperty.length === 3));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-1-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-1-1.js",
    "description": "Object.defineProperty applied to undefined throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(undefined, \"foo\", {});\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-1-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-1-2.js",
    "description": "Object.defineProperty applied to null throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(null, \"foo\", {});\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-1-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-1-3.js",
    "description": "Object.defineProperty applied to number primitive throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(5, \"foo\", {});\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-1-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-1-4.js",
    "description": "Object.defineProperty applied to string primitive throws a TypeError",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(\"hello\\nworld\\\\!\", \"foo\", {});\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-1.js",
    "description": "Object.defineProperty throws TypeError if type of first param is not Object",
    "test": "assertTrue((function testcase() {\n    try {\n      Object.defineProperty(true, \"foo\", {});\n    }\n    catch (e) {\n      if (e instanceof TypeError) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-1.js",
    "description": "Object.defineProperty - argument 'P' is undefined that converts to string 'undefined'",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, undefined, {});\n\n        return obj.hasOwnProperty(\"undefined\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-10.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is a negative number)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, -20, {});\n\n        return obj.hasOwnProperty(\"-20\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-11.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is Infinity)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, Infinity, {});\n\n        return obj.hasOwnProperty(\"Infinity\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-12.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is +Infinity)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, +Infinity, {});\n\n        return obj.hasOwnProperty(\"Infinity\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-13.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is -Infinity)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, -Infinity, {});\n\n        return obj.hasOwnProperty(\"-Infinity\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-14.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 20 zeros))",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 100000000000000000000, {});\n\n        return obj.hasOwnProperty(\"100000000000000000000\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-15.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 21 zeros))",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1000000000000000000000, {});\n\n        return obj.hasOwnProperty(\"1e+21\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-16.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 22 zeros))",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 10000000000000000000000, {});\n\n        return obj.hasOwnProperty(\"1e+22\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-17-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-17-1.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(trailing 5 zeros))",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 000001, {});\n\n        return obj.hasOwnProperty(\"1\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-17.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1e+20)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e+20, {});\n\n        return obj.hasOwnProperty(\"100000000000000000000\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-18",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-18.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to string (value is 1e+21)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e+21, {});\n\n        return obj.hasOwnProperty(\"1e+21\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-19",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-19.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to string (value is 1e+22)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e+22, {});\n\n        return obj.hasOwnProperty(\"1e+22\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-2.js",
    "description": "Object.defineProperty - argument 'P' is null that converts to string 'null'",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, null, {});\n\n        return obj.hasOwnProperty(\"null\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-20",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-20.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 0.000001)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 0.000001, {});\n\n        return obj.hasOwnProperty(\"0.000001\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-21",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-21.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 0.0000001)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 0.0000001, {});\n\n        return obj.hasOwnProperty(\"1e-7\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-22",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-22.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 0.00000001)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 0.00000001, {});\n\n        return obj.hasOwnProperty(\"1e-8\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-23",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-23.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1e-7)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e-7, {});\n\n        return obj.hasOwnProperty(\"1e-7\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-24",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-24.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1e-6)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e-6, {});\n\n        return obj.hasOwnProperty(\"0.000001\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-25",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-25.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1e-5)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1e-5, {});\n\n        return obj.hasOwnProperty(\"0.00001\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-26",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-26.js",
    "description": "Object.defineProperty - argument 'P' is an integer that converts to a string (value is 123)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 123, {});\n\n        return obj.hasOwnProperty(\"123\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-27",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-27.js",
    "description": "Object.defineProperty - argument 'P' is a decimal that converts to a string (value is 123.456)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 123.456, {});\n\n        return obj.hasOwnProperty(\"123.456\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-28",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-28.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 19 zeros).1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 10000000000000000000.1, {});\n\n        return obj.hasOwnProperty(\"10000000000000000000\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-29",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-29.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 20 zeros).1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 100000000000000000000.1, {});\n\n        return obj.hasOwnProperty(\"100000000000000000000\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-3.js",
    "description": "Object.defineProperty - argument 'P' is a boolean whose value is false",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, false, {});\n\n        return obj.hasOwnProperty(\"false\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-30",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-30.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 21 zeros).1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 1000000000000000000000.1, {});\n\n        return obj.hasOwnProperty(\"1e+21\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-31",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-31.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 1(following 22 zeros).1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 10000000000000000000000.1, {});\n\n        return obj.hasOwnProperty(\"1e+22\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-32",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-32.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 123.1234567)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 123.1234567, {});\n\n        return obj.hasOwnProperty(\"123.1234567\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-33",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-33.js",
    "description": "Object.defineProperty - argument 'P' is applied to an empty string ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"\", {});\n\n        return obj.hasOwnProperty(\"\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-34",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-34.js",
    "description": "Object.defineProperty - argument 'P' is applied to string 'AB\n\\cd' ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"AB\\n\\\\cd\", {});\n\n        return obj.hasOwnProperty(\"AB\\n\\\\cd\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-35",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-35.js",
    "description": "Object.defineProperty - argument 'P' is applied to string 'undefined' ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"undefined\", {});\n\n        return obj.hasOwnProperty(\"undefined\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-36",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-36.js",
    "description": "Object.defineProperty - argument 'P' is applied to string 'null' ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"null\", {});\n\n        return obj.hasOwnProperty(\"null\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-37",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-37.js",
    "description": "Object.defineProperty - argument 'P' is applied to string '123αβπcd' ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"123αβπcd\", {});\n\n        return obj.hasOwnProperty(\"123αβπcd\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-38",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-38.js",
    "description": "Object.defineProperty - argument 'P' is applied to string '1' ",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"1\", {});\n\n        return obj.hasOwnProperty(\"1\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-39",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-39.js",
    "description": "Object.defineProperty - argument 'P' is an array that converts to a string",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, [1, 2], {});\n\n        return obj.hasOwnProperty(\"1,2\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-4.js",
    "description": "Object.defineProperty - argument 'P' is a boolean whose value is true",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, true, {});\n\n        return obj.hasOwnProperty(\"true\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-40",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-40.js",
    "description": "Object.defineProperty - argument 'P' is a String Object that converts to a string",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, new String(\"Hello\"), {});\n\n        return obj.hasOwnProperty(\"Hello\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-41",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-41.js",
    "description": "Object.defineProperty - argument 'P' is a Boolean Object that converts to a string",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, new Boolean(false), {});\n\n        return obj.hasOwnProperty(\"false\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-42",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-42.js",
    "description": "Object.defineProperty - argument 'P' is a Number Object that converts to a string",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, new Number(123), {});\n\n        return obj.hasOwnProperty(\"123\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-43",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-43.js",
    "description": "Object.defineProperty - argument 'P' is an object that has an own toString method",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var ownProp = {\n            toString: function () {\n                return \"abc\";\n            }\n        };\n\n        Object.defineProperty(obj, ownProp, {});\n\n        return obj.hasOwnProperty(\"abc\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-44",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-44.js",
    "description": "Object.defineProperty - argument 'P' is an object that has an own valueOf method",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var ownProp = {\n            valueOf: function () {\n                return \"abc\";\n            },\n            toString: undefined\n        };\n\n        Object.defineProperty(obj, ownProp, {});\n\n        return obj.hasOwnProperty(\"abc\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-45",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-45.js",
    "description": "Object.defineProperty - argument 'P' is an object whose toString method returns an object and whose valueOf method returns a primitive value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var ownProp = {\n            toString: function () {\n                toStringAccessed = true;\n                return {};\n            },\n            valueOf: function () {\n                valueOfAccessed = true;\n                return \"abc\";\n            }\n        };\n\n        Object.defineProperty(obj, ownProp, {});\n\n        return obj.hasOwnProperty(\"abc\") && valueOfAccessed && toStringAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-46",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-46.js",
    "description": "Object.defineProperty - argument 'P' is an object that has an own toString and valueOf method",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var ownProp = {\n            toString: function () {\n                toStringAccessed = true;\n                return \"abc\";\n            },\n            valueOf: function () {\n                valueOfAccessed = true;\n                return \"prop\";\n            }\n        };\n        Object.defineProperty(obj, ownProp, {});\n\n        return obj.hasOwnProperty(\"abc\") && !valueOfAccessed && toStringAccessed;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-47",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-47.js",
    "description": "Object.defineProperty - TypeError exception is thrown  when 'P' is an object that neither toString nor valueOf returns a primitive value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var ownProp = {\n            toString: function () {\n                toStringAccessed = true;\n                return {};\n            },\n            valueOf: function () {\n                valueOfAccessed = true;\n                return {};\n            }\n        };\n\n        try {\n            Object.defineProperty(obj, ownProp, {});\n            return false;\n        } catch (e) {\n            return valueOfAccessed && toStringAccessed && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-48",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-48.js",
    "description": "Object.defineProperty - an inherited toString method  is invoked when 'P' is an object with an own valueOf and an inherited toString methods",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var proto = {\n            toString: function () {\n                toStringAccessed = true;\n                return \"test\";\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.valueOf = function () {\n            valueOfAccessed = true;\n            return \"10\";\n        };\n\n        Object.defineProperty(obj, child, {});\n\n        return obj.hasOwnProperty(\"test\") && !valueOfAccessed && toStringAccessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-5.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is NaN)",
    "test": "/// Copyright (c) 2009 Microsoft Corporation \n/// \n/// Redistribution and use in source and binary forms, with or without modification, are permitted provided\n/// that the following conditions are met: \n///    * Redistributions of source code must retain the above copyright notice, this list of conditions and\n///      the following disclaimer. \n///    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and \n///      the following disclaimer in the documentation and/or other materials provided with the distribution.  \n///    * Neither the name of Microsoft nor the names of its contributors may be used to\n///      endorse or promote products derived from this software without specific prior written permission.\n/// \n/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n/// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n/// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n/// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n/// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n/// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n/// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, NaN, {});\n\n        return obj.hasOwnProperty(\"NaN\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-6.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is 0)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 0, {});\n\n        return obj.hasOwnProperty(\"0\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-7.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is +0)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, +0, {});\n\n        return obj.hasOwnProperty(\"0\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-8.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is -0)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, -0, {});\n\n        return obj.hasOwnProperty(\"0\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-2-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-2-9.js",
    "description": "Object.defineProperty - argument 'P' is a number that converts to a string (value is a positive number)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, 30, {});\n\n        return obj.hasOwnProperty(\"30\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-1.js",
    "description": "Object.defineProperty throws TypeError if desc has 'get' and 'value' present(8.10.5 step 9.a)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n\n    // dummy getter\n    var getter = function () { return 1; }\n    var desc = { get: getter, value: 101};\n  \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-10.js",
    "description": "Object.defineProperty throws TypeError if setter is not callable but not undefined (Number)(8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy setter\n    var setter = 42;\n    var desc = { set: setter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-100",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-100.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is null (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: null });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-101",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-101.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is true (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: true });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-102",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-102.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is false (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: false });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-103",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-103.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is 0 (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: 0 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-104",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-104.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is +0 (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: +0 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-105",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-105.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is -0 (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: -0 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-106",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-106.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is NaN (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: NaN });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-107",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-107.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a positive number (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: 12345 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-108",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-108.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a negative number (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: -12345 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-109",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-109.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is an empty string (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: \"\" });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-11.js",
    "description": "Object.defineProperty throws TypeError if setter is not callable but not undefined (Boolean)(8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy setter\n    var setter = true;\n    var desc = { set: setter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-110",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-110.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a non-empty string (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: \"       \" });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-111",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-111.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a Function object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            configurable: function () { }\n        });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-112",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-112.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is an Array object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: [1, 2, 3] });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-113",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-113.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a String object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: new String(\"bbq\") });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-114",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-114.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a Boolean object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: new Boolean(true) });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-115",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-115.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a Number object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: new Number(0) });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-116",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-116.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is the Math object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: Math });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-117",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-117.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a Date object (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { configurable: new Date() });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-118",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-118.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a RegExp object  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: new RegExp()\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-119",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-119.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is the JSON object  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: JSON\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-12.js",
    "description": "Object.defineProperty throws TypeError if setter is not callable but not undefined (String)(8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy setter\n    var setter = \"abc\";\n    var desc = { set: setter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-120",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-120.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is a Error object  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: new SyntaxError()\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-121",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-121.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is the Argument object  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })(1, true, \"a\");\n\n        var attr = {\n            configurable: argObj\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-123",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-123.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is the global object  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: fnGlobalObject()\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-124",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-124.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is treated as true when it is a string (value is 'false')  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: \"false\"\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-125",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-125.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is treated as true when it is new Boolean(false)  (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            configurable: new Boolean(false)\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-126",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-126.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is present  (8.10.5 step 5)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = { value: 100 };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        return obj.property === 100;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-127",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-127.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is not present  (8.10.5 step 5)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = {\n            writable: true\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        return obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-129",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-129.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is an inherited data property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {\n            value: \"inheritedDataProperty\"\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"inheritedDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-13.js",
    "description": "Object.defineProperty throws TypeError if the setter in desc is not callable (Null)(8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy setter\n    var setter = null;\n    var desc = { set: setter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-130",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-130.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own data property that overrides an inherited data property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = { value: \"inheritedDataProperty\" };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        child.value = \"ownDataProperty\";\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-131",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-131.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own data property that overrides an inherited accessor property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {};\n\n        Object.defineProperty(proto, \"value\", {\n            get: function () {\n                return \"inheritedAccessorProperty\";\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"value\", {\n            value: \"ownDataProperty\"\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-132",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-132.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own accessor property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = {};\n        Object.defineProperty(attr, \"value\", {\n            get: function () {\n                return \"ownAccessorProperty\";\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-133",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-133.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is an inherited accessor property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {};\n        Object.defineProperty(proto, \"value\", {\n            get: function () {\n                return \"inheritedAccessorProperty\";\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"inheritedAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-134",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-134.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own accessor property that overrides an inherited data property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {\n            value: \"inheritedDataProperty\"\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"value\", {\n            get: function () {\n                return \"ownAccessorProperty\";\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-135",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-135.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own accessor property that overrides an inherited accessor property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"value\", {\n            get: function () {\n                return \"inheritedAccessorProperty\";\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"value\", {\n            get: function () {\n                return \"ownAccessorProperty\";\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-136",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-136.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own accessor property without a get function  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {};\n        Object.defineProperty(attr, \"value\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        return obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-137",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-137.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {};\n        Object.defineProperty(proto, \"value\", {\n            get: function () {\n                return \"inheritedAccessorProperty\";\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"value\", {\n            set : function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-138",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-138.js",
    "description": "Object.defineProperty - 'value' property in 'Attributes' is an inherited accessor property without a get function  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { property : 120 };\n\n        var proto = {};\n        Object.defineProperty(proto, \"value\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-139-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-139-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Function.prototype.value = \"Function\";\n            var funObj = function (a, b) {\n                return a + b;\n            };\n\n            Object.defineProperty(obj, \"property\", funObj);\n\n            return obj.property === \"Function\";\n        } finally {\n            delete Function.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-139",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-139.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var funObj = function (a, b) {\n            return a + b;\n        };\n\n        funObj.value = \"Function\";\n\n        Object.defineProperty(obj, \"property\", funObj);\n\n        return obj.property === \"Function\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-14.js",
    "description": "Object.defineProperty throws TypeError if setter is not callable but not undefined (Object)(8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var setter = { a: 1 };\n    var desc = { set: setter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-140-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-140-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Array.prototype.value = \"Array\";\n            var arrObj = [1, 2, 3];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n\n            return obj.property === \"Array\";\n        } finally {\n            delete Array.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-140",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-140.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var arrObj = [1, 2, 3];\n\n        arrObj.value = \"Array\";\n\n        Object.defineProperty(obj, \"property\", arrObj);\n\n        return obj.property === \"Array\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-141-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-141-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            String.prototype.value = \"String\";\n            var strObj = new String(\"abc\");\n\n            Object.defineProperty(obj, \"property\", strObj);\n\n            return obj.property === \"String\";\n        } finally {\n            delete String.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-141",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-141.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var strObj = new String(\"abc\");\n\n        strObj.value = \"String\";\n\n        Object.defineProperty(obj, \"property\", strObj);\n\n        return obj.property === \"String\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-142-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-142-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Boolean.prototype.value = \"Boolean\";\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n\n            return obj.property === \"Boolean\";\n        } finally {\n            delete Boolean.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-142",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-142.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var boolObj = new Boolean(true);\n\n        boolObj.value = \"Boolean\";\n\n        Object.defineProperty(obj, \"property\", boolObj);\n\n        return obj.property === \"Boolean\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-143-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-143-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Number.prototype.value = \"Number\";\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n\n            return obj.property === \"Number\";\n        } finally {\n            delete Number.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-143",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-143.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var numObj = new Number(-2);\n\n        numObj.value = \"Number\";\n\n        Object.defineProperty(obj, \"property\", numObj);\n\n        return obj.property === \"Number\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-144-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-144-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.value = \"Math\";\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            return obj.property === \"Math\";\n        } finally {\n            delete Object.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-144",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-144.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Math.value = \"Math\";\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            return obj.property === \"Math\";\n        } finally {\n            delete Math.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-145-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-145-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Date.prototype.value = \"Date\";\n            var dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n\n            return obj.property === \"Date\";\n        } finally {\n            delete Date.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-145",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-145.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var dateObj = new Date();\n\n        dateObj.value = \"Date\";\n\n        Object.defineProperty(obj, \"property\", dateObj);\n\n        return obj.property === \"Date\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-146-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-146-1.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            RegExp.prototype.value = \"RegExp\";\n            var regObj = new RegExp();\n\n            Object.defineProperty(obj, \"property\", regObj);\n\n            return obj.property === \"RegExp\";\n        } finally {\n            delete RegExp.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-146",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-146.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var regObj = new RegExp();\n\n        regObj.value = \"RegExp\";\n\n        Object.defineProperty(obj, \"property\", regObj);\n\n        return obj.property === \"RegExp\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-147-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-147-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.value = \"JSON\";\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            return obj.property === \"JSON\";\n        } finally {\n            delete Object.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-147",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-147.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            JSON.value = \"JSON\";\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            return obj.property === \"JSON\";\n        } finally {\n            delete JSON.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-148-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-148-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'value' property of prototype object  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Error.prototype.value = \"Error\";\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n\n            return obj.property === \"Error\";\n        } finally {\n            delete Error.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-148",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-148.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var errObj = new Error();\n\n        errObj.value = \"Error\";\n\n        Object.defineProperty(obj, \"property\", errObj);\n\n        return obj.property === \"Error\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-149-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-149-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'value' property of prototype object (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Object.prototype.value = \"arguments\";\n            var argObj = (function () { return arguments; })();\n\n\n            Object.defineProperty(obj, \"property\", argObj);\n\n            return obj.property === \"arguments\";\n        } finally {\n            delete Object.prototype.value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-149",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-149.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })();\n\n        argObj.value = \"arguments\";\n\n        Object.defineProperty(obj, \"property\", argObj);\n\n        return obj.property === \"arguments\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-15.js",
    "description": "Object.defineProperty - 'Attributes' is undefined  (8.10.5 step 1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        try {\n            Object.defineProperty(obj, \"property\", undefined);\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-151",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-151.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'value' property  (8.10.5 step 5.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            fnGlobalObject().value = \"global\";\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n\n            return obj.property === \"global\";\n        } finally {\n            delete fnGlobalObject().value;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-152",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-152.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is present (8.10.5 step 6)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            writable: false\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-153",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-153.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is not present  (8.10.5 step 6)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {\n            value: 100\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-154",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-154.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own data property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = {\n            writable: true\n        };\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-155",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-155.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is an inherited data property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {\n            writable: true\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-156",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-156.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own data property that overrides an inherited data property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {\n            writable: false \n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.writable = true;\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-157",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-157.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own data property that overrides an inherited accessor property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = { };\n        Object.defineProperty(proto, \"writable\", {\n            get : function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"writable\", {\n            value: true\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-158",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-158.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own accessor property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = { };\n        Object.defineProperty(attr, \"writable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-159",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-159.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is an inherited accessor property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"writable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-16.js",
    "description": "Object.defineProperty - 'Attributes' is null (8.10.5 step 1)",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.defineProperty({}, \"property\", null);\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-160",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-160.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own accessor property that overrides an inherited data property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {\n            writable: false\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"writable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-161",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-161.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own accessor property that overrides an inherited accessor property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"writable\", {\n            get: function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"writable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-162",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-162.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own accessor property without a get function  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attr = {};\n        Object.defineProperty(attr, \"writable\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-163",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-163.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"writable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"writable\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-164",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-164.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is an inherited accessor property without a get function  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"writable\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-165-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-165-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Function.prototype.writable = true;\n            var funObj = function (a, b) {\n                return a + b;\n            };\n\n            Object.defineProperty(obj, \"property\", funObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Function.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-165",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-165.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var funObj = function (a, b) {\n            return a + b;\n        };\n\n        funObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", funObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-166-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-166-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Array.prototype.writable = true;\n            var arrObj = [1, 2, 3];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Array.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-166",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-166.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var arrObj = [1, 2, 3];\n\n        arrObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", arrObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-167-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-167-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            String.prototype.writable = true;\n            var strObj = new String(\"abc\");\n\n            Object.defineProperty(obj, \"property\", strObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete String.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-167",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-167.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var strObj = new String(\"abc\");\n\n        strObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", strObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-168-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-168-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Boolean.prototype.writable = true;\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Boolean.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-168",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-168.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var boolObj = new Boolean(true);\n\n        boolObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", boolObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-169-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-169-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Number.prototype.writable = true;\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Number.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-169",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-169.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var numObj = new Number(-2);\n\n        numObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", numObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-17.js",
    "description": "Object.defineProperty - 'Attributes' is a boolean primitive (8.10.5 step 1)",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.defineProperty({}, \"property\", true);\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-170-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-170-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.writable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Object.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-170",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-170.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Math.writable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Math.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-171-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-171-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Date.prototype.writable = true;\n\n            dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Date.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-171",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-171.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var dateObj = new Date();\n\n        dateObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", dateObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-172-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-172-1.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            RegExp.prototype.writable = true;\n\n            var regObj = new RegExp();\n\n            Object.defineProperty(obj, \"property\", regObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete RegExp.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-172",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-172.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var regObj = new RegExp();\n\n        regObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", regObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-173-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-173-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.writable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Object.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-173",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-173.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            JSON.writable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete JSON.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-174-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-174-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Error.prototype.writable = true;\n\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Error.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-174",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-174.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var errObj = new Error();\n\n        errObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", errObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-175-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-175-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'writable' property of prototype object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Object.prototype.writable = true;\n\n            var argObj = (function () { return arguments; })();\n\n            Object.defineProperty(obj, \"property\", argObj);\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete Object.prototype.writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-175",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-175.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })();\n\n        argObj.writable = true;\n\n        Object.defineProperty(obj, \"property\", argObj);\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-177",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-177.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'writable' property  (8.10.5 step 6.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            fnGlobalObject().writable = true;\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n\n            var beforeWrite = obj.hasOwnProperty(\"property\");\n\n            obj.property = \"isWritable\";\n\n            var afterWrite = (obj.property === \"isWritable\");\n\n            return beforeWrite === true && afterWrite === true;\n        } finally {\n            delete fnGlobalObject().writable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-178",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-178.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is undefined  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            writable: undefined\n        });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-179",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-179.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is null  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { writable: null });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-18",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-18.js",
    "description": "Object.defineProperty - 'Attributes' is a number primitive (8.10.5 step 1)",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.defineProperty({}, \"property\", 12);\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-180",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-180.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is true  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: true });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-181",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-181.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is false  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { writable: false });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-182",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-182.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is 0  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { writable: 0 });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-183",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-183.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is +0  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: +0 });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-184",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-184.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is -0  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { writable: -0 });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-185",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-185.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is NaN  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { writable:  NaN});\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-186",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-186.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a positive number  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: 12345 });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-187",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-187.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a negative number  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: -12345 });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-188",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-188.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is an empty string  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: \"\" });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (typeof (obj.property) === \"undefined\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-189",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-189.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a non-empty string  (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: \"      \" });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-19",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-19.js",
    "description": "Object.defineProperty - 'Attributes' is a string primitive (8.10.5 step 1)",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.defineProperty({}, \"property\", \"abc\");\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-190",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-190.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a Function object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            writable: function () { }\n        });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-191",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-191.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is an Array object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: [1, 2, 3] });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-192",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-192.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a String object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new String(\"bbq\") });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-193",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-193.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a Boolean object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new Boolean(true) });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-194",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-194.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a Number object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new Number(123) });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-195",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-195.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is the Math object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: Math });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-196",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-196.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a Date object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new Date() });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-197",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-197.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a RegExp object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            writable: new RegExp()\n        });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\";\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite && afterWrite;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-198",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-198.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is the JSON object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: JSON });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-199",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-199.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is a Error object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new SyntaxError() });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-2.js",
    "description": "Object.defineProperty throws TypeError if desc has 'get' and 'writable' present(8.10.5 step 9.a)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = function () { return 1; }\n    var desc = { get: getter, writable: false };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-20",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-20.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is present (8.10.5 step 3)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var accessed = false;\n        Object.defineProperty(obj, \"property\", {\n            enumerable: false\n        });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed && obj.hasOwnProperty(\"property\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-200",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-200.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is the Argument object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })(1, true, \"a\");\n\n        Object.defineProperty(obj, \"property\", { writable: argObj });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-202",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-202.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is the global object (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            writable: fnGlobalObject()\n        });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-203",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-203.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is treated as true when it is a string(value is 'false') (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: \"false\" });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-204",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-204.js",
    "description": "Object.defineProperty - 'writable' property in 'Attributes' is treated as true when it is new Boolean(false) (8.10.5 step 6.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", { writable: new Boolean(false) });\n\n        var beforeWrite = obj.hasOwnProperty(\"property\");\n\n        obj.property = \"isWritable\";\n\n        var afterWrite = (obj.property === \"isWritable\");\n\n        return beforeWrite === true && afterWrite === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-205",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-205.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is present (8.10.5 step 7)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return \"present\";\n            }\n        });\n\n        return obj.property === \"present\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-206",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-206.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is not present (8.10.5 step 7)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            set: function () {}\n        });\n\n        return typeof obj.property === \"undefined\" && obj.hasOwnProperty(\"property\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-207",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-207.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own data property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var attributes = {\n            get: function () {\n                return \"ownDataProperty\";\n            }\n        };\n\n        Object.defineProperty(obj, \"property\", attributes);\n\n        return obj.property === \"ownDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-208",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-208.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is an inherited data property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {\n            get: function () {\n                return \"inheritedDataProperty\";\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"inheritedDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-209",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-209.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own data property that overrides an inherited data property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {\n            get: function () {\n                return \"inheritedDataProperty\";\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.get = function () {\n            return \"ownDataProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-21",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-21.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is not present (8.10.5 step 3)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var attr = {};\n        var accessed = false;\n        Object.defineProperty(obj, \"property\", attr);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-210",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-210.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own data property that overrides an inherited accessor property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        var fun = function () {\n            return \"inheritedAccessorProperty\";\n        };\n        Object.defineProperty(proto, \"get\", {\n            get: function () {\n                return fun;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"get\", {\n            value: function () {\n                return \"ownDataProperty\";\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownDataProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-211",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-211.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own accessor property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attributes = {};\n        Object.defineProperty(attributes, \"get\", {\n            get: function () {\n                return function () {\n                    return \"ownAccessorProperty\";\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attributes);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-212",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-212.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is an inherited accessor property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        Object.defineProperty(proto, \"get\", {\n            get: function () {\n                return function () {\n                    return \"inheritedAccessorProperty\";\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"inheritedAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-213",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-213.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own accessor property that overrides an inherited data property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {\n            get: function () {\n                return \"inheritedDataProperty\";\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"get\", {\n            get: function () {\n                return function () {\n                    return \"ownAccessorProperty\";\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-214",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-214.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own accessor property that overrides an inherited accessor property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        Object.defineProperty(proto, \"get\", {\n            get: function () {\n                return function () {\n                    return \"inheritedAccessorProperty\";\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"get\", {\n            get: function () {\n                return function () {\n                    return \"ownAccessorProperty\";\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.property === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-215",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-215.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own accessor property without a get function (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attributes = {};\n        Object.defineProperty(attributes, \"get\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attributes);\n\n        return typeof obj.property === \"undefined\" && obj.hasOwnProperty(\"property\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-216",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-216.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        Object.defineProperty(proto, \"get\", {\n            get: function () {\n                return function () {\n                    return \"inheritedAccessorProperty\";\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"get\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-217",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-217.js",
    "description": "Object.defineProperty - 'get' property in 'Attributes' is an inherited accessor property without a get function (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        Object.defineProperty(proto, \"get\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-218-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-218-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Function.prototype.get = function () {\n                return \"functionGetProperty\";\n            };\n            var funObj = function () { };\n\n            Object.defineProperty(obj, \"property\", funObj);\n\n            return obj.property === \"functionGetProperty\";\n        } finally {\n            delete Function.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-218",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-218.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var funObj = function () { };\n\n        funObj.get = function () {\n            return \"functionGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", funObj);\n\n        return obj.property === \"functionGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-219-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-219-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Array.prototype.get = function () {\n                return \"arrayGetProperty\";\n            };\n            var arrObj = [];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n\n            return obj.property === \"arrayGetProperty\";\n        } finally {\n            delete Array.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-219",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-219.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var arrObj = [];\n\n        arrObj.get = function () {\n            return \"arrayGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", arrObj);\n\n        return obj.property === \"arrayGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-22",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-22.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own data property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", {\n            enumerable: true\n        });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-220-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-220-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            String.prototype.get = function () {\n                return \"stringGetProperty\";\n            };\n            var strObj = new String();\n\n            Object.defineProperty(obj, \"property\", strObj);\n\n            return obj.property === \"stringGetProperty\";\n        } finally {\n            delete String.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-220",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-220.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var strObj = new String();\n\n        strObj.get = function () {\n            return \"stringGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", strObj);\n\n        return obj.property === \"stringGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-221-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-221-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Boolean.prototype.get = function () {\n                return \"booleanGetProperty\";\n            };\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n\n            return obj.property === \"booleanGetProperty\";\n        } finally {\n            delete Boolean.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-221",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-221.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var boolObj = new Boolean(true);\n\n        boolObj.get = function () {\n            return \"booleanGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", boolObj);\n\n        return obj.property === \"booleanGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-222-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-222-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Number.prototype.get = function () {\n                return \"numberGetProperty\";\n            };\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n\n            return obj.property === \"numberGetProperty\";\n        } finally {\n            delete Number.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-222",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-222.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var numObj = new Number(-2);\n\n        numObj.get = function () {\n            return \"numberGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", numObj);\n\n        return obj.property === \"numberGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-223-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-223-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.get = function () {\n                return \"mathGetProperty\";\n            };\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            return obj.property === \"mathGetProperty\";\n        } finally {\n            delete Object.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-223",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-223.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Math.get = function () {\n                return \"mathGetProperty\";\n            };\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            return obj.property === \"mathGetProperty\";\n        } finally {\n            delete Math.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-224-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-224-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Date.prototype.get = function () {\n                return \"dateGetProperty\";\n            };\n            var dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n\n            return obj.property === \"dateGetProperty\";\n        } finally {\n            delete Date.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-224",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-224.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var dateObj = new Date();\n\n        dateObj.get = function () {\n            return \"dateGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", dateObj);\n\n        return obj.property === \"dateGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-225-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-225-1.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            RegExp.prototype.get = function () {\n                return \"regExpGetProperty\";\n            };\n            var regObj = new RegExp();\n\n\n            Object.defineProperty(obj, \"property\", regObj);\n\n            return obj.property === \"regExpGetProperty\";\n        } finally {\n            delete RegExp.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-225",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-225.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var regObj = new RegExp();\n\n        regObj.get = function () {\n            return \"regExpGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", regObj);\n\n        return obj.property === \"regExpGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-226-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-226-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.get = function () {\n                return \"jsonGetProperty\";\n            };\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            return obj.property === \"jsonGetProperty\";\n        } finally {\n            delete Object.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-226",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-226.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            JSON.get = function () {\n                return \"jsonGetProperty\";\n            };\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            return obj.property === \"jsonGetProperty\";\n        } finally {\n            delete JSON.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-227-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-227-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Error.prototype.get = function () {\n                return \"errorGetProperty\";\n            };\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n\n            return obj.property === \"errorGetProperty\";\n        } finally {\n            delete Error.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-227",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-227.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var errObj = new Error();\n\n        errObj.get = function () {\n            return \"errorGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", errObj);\n\n        return obj.property === \"errorGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-228-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-228-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'get' property of prototype object (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Object.prototype.get = function () {\n                return \"argumentGetProperty\";\n            };\n            var argObj = (function () { return arguments; })();\n\n            Object.defineProperty(obj, \"property\", argObj);\n\n            return obj.property === \"argumentGetProperty\";\n        } finally {\n            delete Object.prototype.get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-228",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-228.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })();\n\n        argObj.get = function () {\n            return \"argumentGetProperty\";\n        };\n\n        Object.defineProperty(obj, \"property\", argObj);\n\n        return obj.property === \"argumentGetProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-23",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-23.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is an inherited data property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var proto = {};\n        Object.defineProperty(proto, \"enumerable\", {\n            value: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-230",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-230.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'get' property (8.10.5 step 7.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            fnGlobalObject().get = function () {\n                return \"globalGetProperty\";\n            };\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n\n            return obj.property === \"globalGetProperty\";\n        } finally {\n            delete fnGlobalObject().get;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-231",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-231.js",
    "description": "Object.defineProperty - value of 'get' property in 'Attributes' is undefined (8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: undefined\n        });\n\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-232",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-232.js",
    "description": "Object.defineProperty - value of 'get' property in 'Attributes' is a function (8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return \"getFunction\";\n            }\n        });\n\n        return obj.hasOwnProperty(\"property\") && obj.property === \"getFunction\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-235",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-235.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is present (8.10.5 step 8)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        Object.defineProperty(obj, \"property\", {\n            set: function (value) {\n                data = value;\n            }\n        });\n\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-236",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-236.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is not present (8.10.5 step 8)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return 11;\n            }\n        });\n\n        obj.property = 14;\n        var desc = Object.getOwnPropertyDescriptor(obj, \"property\");\n        return obj.hasOwnProperty(\"property\") && obj.property === 11 && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-3-237",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-237.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own data property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        Object.defineProperty(obj, \"property\", {\n            set: function (value) {\n                data = value;\n            }\n        });\n\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-238",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-238.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is an inherited data property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var proto = {\n            set: function (value) {\n                data = value;\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-239",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-239.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own data property that overrides an inherited data property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data1 = \"data\";\n        var data2 = \"data\";\n        var proto = {\n            set: function (value) {\n                data1 = value;\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.set = function (value) {\n            data2 = value;\n        };\n\n        Object.defineProperty(obj, \"property\", child);\n\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data1 === \"data\" && data2 === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-24",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-24.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own data property that overrides an inherited data property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var proto = {};\n        Object.defineProperty(proto, \"enumerable\", {\n            value: false\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"enumerable\", {\n            value: true\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-240",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-240.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own data property that overrides an inherited accessor property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        var data1 = \"data\";\n        var data2 = \"data\";\n\n        Object.defineProperty(proto, \"set\", {\n            get: function () {\n                return function (value) {\n                    data1 = value;\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"set\", {\n            value: function (value) {\n                data2 = value;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data1 === \"data\" && data2 === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-241",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-241.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own accessor property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var attributes = {};\n        Object.defineProperty(attributes, \"set\", {\n            get: function () {\n                return function (value) {\n                    data = value;\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attributes);\n        obj.property = \"ownAccessorProperty\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-242",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-242.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is an inherited accessor property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        var data = \"data\";\n        Object.defineProperty(proto, \"set\", {\n            get: function () {\n                return function (value) {\n                    data = value;\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n        obj.property = \"inheritedAccessorProperty\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"inheritedAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-243",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-243.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own accessor property that overrides an inherited data property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data1 = \"data\";\n        var data2 = \"data\";\n\n        var proto = {\n            set: function (value) {\n                data1 = value;\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"set\", {\n            get: function () {\n                return function (value) {\n                    data2 = value;\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n        obj.property = \"ownAccessorProperty\";\n\n        return obj.hasOwnProperty(\"property\") && data1 === \"data\" && data2 === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-244",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-244.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own accessor property that overrides an inherited accessor property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        var data1 = \"data\";\n        var data2 = \"data\";\n        Object.defineProperty(proto, \"set\", {\n            get: function () {\n                return function (value) {\n                    data1 = value;\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"set\", {\n            get: function () {\n                return function (value) {\n                    data2 = value;\n                };\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n        obj.property = \"ownAccessorProperty\";\n\n        return obj.hasOwnProperty(\"property\") && data1 === \"data\" && data2 === \"ownAccessorProperty\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-245",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-245.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own accessor property without a get function (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var attributes = {};\n        Object.defineProperty(attributes, \"set\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attributes);\n\n        obj.property = \"overrideOwnData\";\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"property\");\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\" &&\n            typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-3-246",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-246.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        var data = \"data\";\n        Object.defineProperty(proto, \"set\", {\n            get: function () {\n                return function (value) {\n                    data = value;\n                };\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"set\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        obj.property = \"overrideData\";\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\" && data === \"data\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-247",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-247.js",
    "description": "Object.defineProperty - 'set' property in 'Attributes' is an inherited accessor property without a get function (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var proto = {};\n        Object.defineProperty(proto, \"set\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        obj.property = \"overrideData\";\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-248-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-248-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Function.prototype.set = function (value) {\n                data = value;\n            };\n            var funObj = function () { };\n\n            Object.defineProperty(obj, \"property\", funObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Function.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-248",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-248.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var funObj = function () { };\n\n        funObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", funObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-249-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-249-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Array.prototype.set = function (value) {\n                data = value;\n            };\n            var arrObj = [];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Array.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-249",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-249.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var arrObj = [];\n\n        arrObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", arrObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-25",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-25.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own data property that overrides an inherited accessor property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var proto = {};\n        Object.defineProperty(proto, \"enumerable\", {\n            get: function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"enumerable\", {\n            value:  true\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-250-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-250-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            String.prototype.set = function (value) {\n                data = value;\n            };\n            var strObj = new String();\n            var data = \"data\";\n\n            Object.defineProperty(obj, \"property\", strObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete String.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-250",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-250.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var strObj = new String();\n        var data = \"data\";\n\n        strObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", strObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-251-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-251-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Boolean.prototype.set = function (value) {\n                data = value;\n            };\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Boolean.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-251",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-251.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var boolObj = new Boolean(true);\n\n        boolObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", boolObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-252-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-252-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Number.prototype.set = function (value) {\n                data = value;\n            };\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Number.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-252",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-252.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var numObj = new Number(-2);\n\n        numObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", numObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-253-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-253-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            Object.prototype.set = function (value) {\n                data = value;\n            };\n\n            Object.defineProperty(obj, \"property\", Math);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Object.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-253",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-253.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            Math.set = function (value) {\n                data = value;\n            };\n\n            Object.defineProperty(obj, \"property\", Math);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Math.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-254-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-254-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Date.prototype.set = function (value) {\n                data = value;\n            };\n            var dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Date.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-254",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-254.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var dateObj = new Date();\n\n        dateObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", dateObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-255-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-255-1.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            RegExp.prototype.set = function (value) {\n                data = value;\n            };\n            var regObj = new RegExp();\n\n            Object.defineProperty(obj, \"property\", regObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete RegExp.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-255",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-255.js",
    "description": "Object.defineProperty - 'Attributes' is a RegExp object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var regObj = new RegExp();\n\n        regObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", regObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-256-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-256-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            Object.prototype.set = function (value) {\n                data = value;\n            };\n\n            Object.defineProperty(obj, \"property\", JSON);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Object.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-256",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-256.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            JSON.set = function (value) {\n                data = value;\n            };\n\n            Object.defineProperty(obj, \"property\", JSON);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete JSON.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-257-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-257-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            Error.prototype.set = function (value) {\n                data = value;\n            };\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Error.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-257",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-257.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var errObj = new Error();\n\n        errObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", errObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-258-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-258-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'set' property of prototype object (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        try {\n            Object.prototype.set = function (value) {\n                data = value;\n            };\n            var argObj = (function () { return arguments; })();\n\n            Object.defineProperty(obj, \"property\", argObj);\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete Object.prototype.set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-258",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-258.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n        var argObj = (function () { return arguments; })();\n        argObj.set = function (value) {\n            data = value;\n        };\n\n        Object.defineProperty(obj, \"property\", argObj);\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-26",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-26.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own accessor property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var attr = {};\n        Object.defineProperty(attr, \"enumerable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-260",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-260.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'set' property (8.10.5 step 8.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        try {\n            fnGlobalObject().set = function (value) {\n                data = value;\n            };\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n            obj.property = \"overrideData\";\n\n            return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n        } finally {\n            delete fnGlobalObject().set;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-261",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-261.js",
    "description": "Object.defineProperty - value of 'set' property in 'Attributes' is undefined (8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            set: undefined\n        });\n\n        obj.property = \"overrideData\";\n        var desc = Object.getOwnPropertyDescriptor(obj, \"property\");\n        return obj.hasOwnProperty(\"property\") && typeof obj.property === \"undefined\" &&\n            typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-3-262",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-262.js",
    "description": "Object.defineProperty - value of 'set' property in 'Attributes' is a function (8.10.5 step 8.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var data = \"data\";\n\n        Object.defineProperty(obj, \"property\", {\n            set: function (value) {\n                data = value;\n            }\n        });\n        obj.property = \"overrideData\";\n\n        return obj.hasOwnProperty(\"property\") && data === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-27",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-27.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is an inherited accessor property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var proto = {};\n        Object.defineProperty(proto, \"enumerable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-28",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-28.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own accessor property that overrides an inherited data property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var proto = { enumerable: false };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(child, \"enumerable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-29",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-29.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own accessor property that overrides an inherited accessor property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        var proto = {};\n\n        Object.defineProperty(proto, \"enumerable\", {\n            get: function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(child, \"enumerable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-3.js",
    "description": "Object.defineProperty throws TypeError if desc has 'set' and 'value' present(8.10.5 step 9.a)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n\n    // dummy setter\n    var setter = function () { }\n    var desc = { set: setter, value: 101};\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-30",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-30.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own accessor property without a get function (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var attr = {};\n        Object.defineProperty(attr, \"enumerable\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-31",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-31.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        var proto = {};\n\n        Object.defineProperty(proto, \"enumerable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(child, \"enumerable\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-32",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-32.js",
    "description": "Object.defineProperty - 'enumerable' property in 'Attributes' is an inherited accessor property without a get function (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        var proto = {};\n\n        Object.defineProperty(proto, \"enumerable\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-33-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-33-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Function.prototype.enumerable = true;\n            var fun = function () { };\n\n            Object.defineProperty(obj, \"property\", fun);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Function.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-33",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-33.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var fun = function () { };\n        fun.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", fun);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-34-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-34-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Array.prototype.enumerable = true;\n            var arrObj = [];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Array.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-34",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-34.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var arrObj = [];\n        arrObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", arrObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-35-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-35-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            String.prototype.enumerable = true;\n            var strObj = new String();\n\n            Object.defineProperty(obj, \"property\", strObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete String.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-35",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-35.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var strObj = new String();\n        strObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", strObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-36-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-36-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Boolean.prototype.enumerable = true;\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Boolean.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-36",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-36.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var boolObj = new Boolean(true);\n        boolObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", boolObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-37-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-37-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Number.prototype.enumerable = true;\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Number.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-37",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-37.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var numObj = new Number(-2);\n        numObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", numObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-38-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-38-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Object.prototype.enumerable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n            return accessed;\n        } finally {\n            delete Object.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-38",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-38.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        try {\n            Math.enumerable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n            return accessed;\n        } finally {\n            delete Math.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-39-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-39-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        try {\n            Date.prototype.enumerable = true;\n            var dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n            return accessed;\n        } finally {\n            delete Date.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-39",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-39.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var dateObj = new Date();\n        dateObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", dateObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-4.js",
    "description": "Object.defineProperty throws TypeError if desc has 'set' and 'writable' present(8.10.5 step 9.a)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var setter = function () { }\n    var desc = { set: setter, writable: false };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-40-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-40-1.js",
    "description": "Object.defineProperty - 'Attributes' is an RegExp object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            RegExp.prototype.enumerable = true;\n            var regObj = new RegExp();\n\n            Object.defineProperty(obj, \"property\", regObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete RegExp.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-40",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-40.js",
    "description": "Object.defineProperty - 'Attributes' is an RegExp object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var regObj = new RegExp();\n        regObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", regObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-41-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-41-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Object.prototype.enumerable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Object.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-41",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-41.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        try {\n            JSON.enumerable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete JSON.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-42-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-42-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Error.prototype.enumerable = true;\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Error.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-42",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-42.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var errObj = new Error();\n        errObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", errObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-43-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-43-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'enumerable' property of prototype object (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        try {\n            Object.prototype.enumerable = true;\n            var argObj = (function () { return arguments; })();\n\n            Object.defineProperty(obj, \"property\", argObj);\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete Object.prototype.enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-43",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-43.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        var argObj = (function () { return arguments; })();\n        argObj.enumerable = true;\n\n        Object.defineProperty(obj, \"property\", argObj);\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-45",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-45.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'enumerable' property (8.10.5 step 3.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        try {\n            fnGlobalObject().enumerable = true;\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n\n            for (var prop in obj) {\n                if (prop === \"property\") {\n                    accessed = true;\n                }\n            }\n\n            return accessed;\n        } finally {\n            delete fnGlobalObject().enumerable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-46",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-46.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is undefined (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", {\n            enumerable: undefined\n        });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-47",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-47.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is null (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: null });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-48",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-48.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is true (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: true });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-49",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-49.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is false (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: false });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-5.js",
    "description": "Object.defineProperty throws TypeError if getter is not callable but not undefined (Number)(8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = 42;\n    var desc = { get: getter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-50",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-50.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is 0 (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: 0 });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-51",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-51.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is +0 (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: +0 });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-52",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-52.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is -0 (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: -0 });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-53",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-53.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is NaN (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: NaN });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-54",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-54.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a positive number (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: 12 });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-55",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-55.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a negative number (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: -2 });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-56",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-56.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is an empty string (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: \"\" });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return !accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-57",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-57.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a non-empty string (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: \"AB\\n\\\\cd\" });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-58",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-58.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a Function object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", {\n            enumerable: function () { }\n        });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-59",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-59.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is an Array object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: [] });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-6.js",
    "description": "Object.defineProperty throws TypeError if getter is not callable but not undefined (Boolean)(8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = true;\n    var desc = { get: getter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-60",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-60.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a String Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new String() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-61",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-61.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a Boolean Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new Boolean() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-62",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-62.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a Number Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new Number() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-63",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-63.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is the Math Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: Math });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-64",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-64.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a Date Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new Date() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-65",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-65.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is a RegExp Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new RegExp() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-66",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-66.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is the JSON Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: JSON });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-67",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-67.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is an Error Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new Error() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-68",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-68.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is an Arguments Object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n        var argObj = (function () { return arguments; })(0, 1, 2);\n\n        Object.defineProperty(obj, \"property\", { enumerable: argObj });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-7.js",
    "description": "Object.defineProperty throws TypeError if getter is not callable but not undefined (String)(8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = \"abc\";\n    var desc = { get: getter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-70",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-70.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is the global object (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: fnGlobalObject() });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-71",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-71.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is treated as true when it is a string (value is 'false') (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: \"false\" });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-72",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-72.js",
    "description": "Object.defineProperty - value of 'enumerable' property in 'Attributes' is new Boolean(false) which is treated as true value (8.10.5 step 3.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var accessed = false;\n\n        Object.defineProperty(obj, \"property\", { enumerable: new Boolean(false) });\n\n        for (var prop in obj) {\n            if (prop === \"property\") {\n                accessed = true;\n            }\n        }\n        return accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-73",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-73.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is present (8.10.5 step 4)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            configurable: false\n        });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-74",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-74.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is not present (8.10.5 step 4)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { value: 100 });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = (obj.property === 100);\n\n        return beforeDeleted === true && afterDeleted === true;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-75",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-75.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own data property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", {\n            configurable: true\n        });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-76",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-76.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is an inherited data property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {\n            configurable: false\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n        return beforeDeleted && afterDeleted && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-77",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-77.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own data property that overrides an inherited data property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var proto = {\n            configurable: false\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.configurable = true;\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-78",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-78.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own data property that overrides an inherited accessor property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = { };\n\n        Object.defineProperty(proto, \"configurable\", {\n            get: function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"configurable\", {\n            value: true\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-79",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-79.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own accessor property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = {};\n        Object.defineProperty(attr, \"configurable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-8.js",
    "description": "Object.defineProperty throws TypeError if getter is not callable but not undefined (Null)(8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = null;\n    var desc = { get: getter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-80",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-80.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is an inherited accessor property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"configurable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-81",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-81.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own accessor property that overrides an inherited data property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {\n            configurable: false\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"configurable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-82",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-82.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own accessor property that overrides an inherited accessor property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"configurable\", {\n            get: function () {\n                return false;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"configurable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-83",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-83.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own accessor property without a get function (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var attr = {};\n        Object.defineProperty(attr, \"configurable\", {\n            set : function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", attr);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-84",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-84.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is own accessor property(without a get function) that overrides an inherited accessor property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"configurable\", {\n            get: function () {\n                return true;\n            }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        Object.defineProperty(child, \"configurable\", {\n            set: function () { }\n        });\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-85",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-85.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is an inherited accessor property without a get function (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var proto = {};\n        Object.defineProperty(proto, \"configurable\", {\n            set: function () { }\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", child);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-86-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-86-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'configurable' property of prototype object (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Function.prototype.configurable = true;\n            var funObj = function (a, b) {\n                return a + b;\n            };\n\n            Object.defineProperty(obj, \"property\", funObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Function.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-86",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-86.js",
    "description": "Object.defineProperty - 'Attributes' is a Function object which implements its own [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var funObj = function (a, b) {\n            return a + b;\n        };\n\n        funObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", funObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-87-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-87-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Array.prototype.configurable = true;\n            var arrObj = [1, 2, 3];\n\n            Object.defineProperty(obj, \"property\", arrObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Array.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-87",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-87.js",
    "description": "Object.defineProperty - 'Attributes' is an Array object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var arrObj = [1, 2, 3];\n\n        arrObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", arrObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-88-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-88-1.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            String.prototype.configurable = true;\n            var strObj = new String(\"abc\");\n\n            Object.defineProperty(obj, \"property\", strObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete String.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-88",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-88.js",
    "description": "Object.defineProperty - 'Attributes' is a String object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var strObj = new String(\"abc\");\n\n        strObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", strObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-89-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-89-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Boolean.prototype.configurable = true;\n            var boolObj = new Boolean(true);\n\n            Object.defineProperty(obj, \"property\", boolObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Boolean.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-89",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-89.js",
    "description": "Object.defineProperty - 'Attributes' is a Boolean object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var boolObj = new Boolean(true);\n\n        boolObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", boolObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-9.js",
    "description": "Object.defineProperty throws TypeError if getter is not callable but not undefined (Object)(8.10.5 step 7.b)",
    "test": "assertTrue((function testcase() {\n    var o = {};\n    \n    // dummy getter\n    var getter = { a: 1 };\n    var desc = { get: getter };\n    \n    try {\n      Object.defineProperty(o, \"foo\", desc);\n    }\n    catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-90-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-90-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Number.prototype.configurable = true;\n            var numObj = new Number(-2);\n\n            Object.defineProperty(obj, \"property\", numObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Number.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-90",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-90.js",
    "description": "Object.defineProperty - 'Attributes' is a Number object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var numObj = new Number(-2);\n\n        numObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", numObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-91-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-91-1.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.configurable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Object.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-91",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-91.js",
    "description": "Object.defineProperty - 'Attributes' is the Math object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Math.configurable = true;\n\n            Object.defineProperty(obj, \"property\", Math);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Math.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-92-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-92-1.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Date.prototype.configurable = true;\n            var dateObj = new Date();\n\n            Object.defineProperty(obj, \"property\", dateObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Date.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-92",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-92.js",
    "description": "Object.defineProperty - 'Attributes' is a Date object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var dateObj = new Date();\n\n        dateObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", dateObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-93-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-93-1.js",
    "description": "Object.defineProperty - 'Attributes' is an RegExp object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            RegExp.prototype.configurable = true;\n            var regObj = new RegExp();\n\n            Object.defineProperty(obj, \"property\", regObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete RegExp.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-93",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-93.js",
    "description": "Object.defineProperty - 'Attributes' is an RegExp object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var regObj = new RegExp();\n\n        regObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", regObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-94-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-94-1.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.configurable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Object.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-94",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-94.js",
    "description": "Object.defineProperty - 'Attributes' is the JSON object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            JSON.configurable = true;\n\n            Object.defineProperty(obj, \"property\", JSON);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete JSON.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-95-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-95-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        try {\n            Error.prototype.configurable = true;\n            var errObj = new Error();\n\n            Object.defineProperty(obj, \"property\", errObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Error.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-95",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-95.js",
    "description": "Object.defineProperty - 'Attributes' is an Error object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        var errObj = new Error();\n\n        errObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", errObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-96-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-96-1.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            Object.prototype.configurable = true;\n            var argObj = (function () { return arguments; })();\n\n            Object.defineProperty(obj, \"property\", argObj);\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete Object.prototype.configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-96",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-96.js",
    "description": "Object.defineProperty - 'Attributes' is an Arguments object which implements its own [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var argObj = (function () { return arguments; })();\n        argObj.configurable = true;\n\n        Object.defineProperty(obj, \"property\", argObj);\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\");\n\n        return beforeDeleted === true && afterDeleted === false;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-98",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-98.js",
    "description": "Object.defineProperty - 'Attributes' is the global object that uses Object's [[Get]] method to access the 'configurable' property (8.10.5 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        try {\n            fnGlobalObject().configurable = true;\n\n            Object.defineProperty(obj, \"property\", fnGlobalObject());\n\n            var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n            delete obj.property;\n\n            var afterDeleted = obj.hasOwnProperty(\"property\");\n\n            return beforeDeleted === true && afterDeleted === false;\n        } finally {\n            delete fnGlobalObject().configurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-3-99",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-3-99.js",
    "description": "Object.defineProperty - 'configurable' property in 'Attributes' is undefined (8.10.5 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"property\", { configurable: undefined });\n\n        var beforeDeleted = obj.hasOwnProperty(\"property\");\n\n        delete obj.property;\n\n        var afterDeleted = obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n\n        return beforeDeleted === true && afterDeleted === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-1.js",
    "description": "Object.defineProperty throws TypeError when adding properties to non-extensible objects(8.12.9 step 3)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n  Object.preventExtensions(o);\n\n  try {\n    var desc = { value: 1 };\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n      if (e instanceof TypeError &&\n          (o.hasOwnProperty(\"foo\") === false)) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.6-4-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-10.js",
    "description": "Object.defineProperty throws TypeError when changing [[Enumerable]] from false to true on non-configurable accessor properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy getter\n  var getter = function () { return 1; }\n  var d1 = { get: getter, enumerable: false, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, setting enumerable to true should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { get: getter, enumerable: true };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.get === getter &&\n          d2.enumerable === false &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-100",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-100.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, desc.value and name.value are two different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = 100; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 200\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 200, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-101",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-101.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, name.value is present and desc.value is undefined (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = 100; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: undefined });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-102",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-102.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, desc.value is present and name.value is undefined (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = undefined; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: 100 });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 100, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-103",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-103.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, name.writable and desc.writable are different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            writable: false, configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            writable: true\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-104",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-104.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, name.enumerable and desc.enumerable are different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: true\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-105",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-105.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, name.configurable = true and desc.configurable = false (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 200,\n            enumerable: true,\n            writable: true,\n            configurable: true \n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            configurable: false\n        });\n        \n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 200, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-106",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-106.js",
    "description": "Object.defineProperty - 'name' and 'desc' are data properties, several attributes values of name and desc are different (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: 100, \n            writable: true, \n            enumerable: true, \n            configurable: true \n        });\n        \n        Object.defineProperty(obj, \"foo\", { \n            value: 200, \n            writable: false, \n            enumerable: false \n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 200, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-107",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-107.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, both desc.[[Get]] and name.[[Get]] are two different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: true\n        });\n\n        function getFunc2() {\n            return 20;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc2\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc2, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-108",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-108.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties,  name.[[Get]] is present and desc.[[Get]] is undefined (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc,\n            get: undefined\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-109",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-109.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, name.[[Get]] is undefined and desc.[[Get]] is function (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n       \n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc,\n            get: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        function getFunc() {\n            return 10;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-11.js",
    "description": "Object.defineProperty throws TypeError when changing [[Enumerable]] from true to false on non-configurable accessor properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy getter\n  var getter = function () { return 1; }\n  var d1 = { get: getter, enumerable: true, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, setting enumerable to true should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { get: getter, enumerable: false };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.get === getter &&\n          d2.enumerable === true &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-110",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-110.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, both desc.[[Set]] and name.[[Set]] are two different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc1() {\n            return 10;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc1,\n            enumerable: true,\n            configurable: true\n        });\n\n        function setFunc2(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc2\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc2, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-111",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-111.js",
    "description": "Object.defineProperty  - 'name' and 'desc' are accessor properties, name.[[Set]] is present and desc.[[Set]] is undefined (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            set: undefined,\n            get: getFunc\n        });\n\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"foo\");\n        return obj.hasOwnProperty(\"foo\") && typeof (desc.set) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-112",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-112.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, name.[[Set]] is undefined and desc.[[Set]] is function (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: undefined,\n            get: getFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-113",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-113.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, name.enumerable and desc.enumerable are different values (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            enumerable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-114",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-114.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, name.configurable = true and desc.configurable = false (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        function getFunc() {\n            return 10;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            configurable: false\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-115",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-115.js",
    "description": "Object.defineProperty - 'name' and 'desc' are accessor properties, several attributes values of 'name' and 'desc' are different (8.12.9 step 12)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc1() {\n            return 10;\n        }\n        function setFunc1() {}\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc1,\n            set: setFunc1,\n            enumerable: true,\n            configurable: true\n        });\n\n        function getFunc2() {\n            return 20;\n        }\n        function setFunc2(value) {\n            obj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc2,\n            set: setFunc2,\n            enumerable: false\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc2, setFunc2, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-116",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-116.js",
    "description": "Object.defineProperty - 'O' is an Array, test the length property of 'O' is own data property (15.4.5.1 step 1)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        Object.defineProperty(arrObj, \"1\", {\n            value: 1,\n            configurable: false\n        });\n        try {\n            Object.defineProperty(arrObj, \"length\", { value: 1 });\n            return false;\n        } catch (e) {\n            var desc = Object.getOwnPropertyDescriptor(arrObj, \"length\");\n\n            return Object.hasOwnProperty.call(arrObj, \"length\") && desc.value === 2 &&\n                desc.writable === true && desc.configurable === false && desc.enumerable === false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-117",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-117.js",
    "description": "Object.defineProperty - 'O' is an Array, test the length property of 'O' is own data property that overrides an inherited data property (15.4.5.1 step 1)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [0, 1, 2];\n        var arrProtoLen;\n\n        try {\n            arrProtoLen = Array.prototype.length;\n            Array.prototype.length = 0;\n\n            \n            Object.defineProperty(arrObj, \"2\", {\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 3 && Array.prototype.length === 0;\n        } finally {\n            Array.prototype.length = arrProtoLen;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-118",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-118.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test every field in 'desc' is absent (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {});\n\n        var verifyValue = false;\n        if (arrObj.length === 0) {\n            verifyValue = true;\n        }\n\n        arrObj.length = 2;\n        var verifyWritable = arrObj.length === 2;\n\n        var verifyEnumerable = false;\n        for (var p in arrObj) {\n            if (p === \"length\" && arrObj.hasOwnProperty(p)) {\n                verifyEnumerable = true;\n            }\n        }\n\n        delete arrObj.length;\n        var verifyConfigurable = arrObj.hasOwnProperty(\"length\");\n\n        return verifyValue && verifyWritable && !verifyEnumerable && verifyConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-119",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-119.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test every field in 'desc' is same with corresponding attribute value of the length property in 'O' (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        Object.defineProperty(arrObj, \"length\", {\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n\n        var verifyValue = false;\n        if (arrObj.length === 0) {\n            verifyValue = true;\n        }\n\n        arrObj.length = 2;\n        var verifyWritable = arrObj.length === 2 ? true : false;\n\n        var verifyEnumerable = false;\n        for (var p in arrObj) {\n            if (p === \"length\" && arrObj.hasOwnProperty(p)) {\n                verifyEnumerable = true;\n            }\n        }\n\n        delete arrObj.length;\n        var verifyConfigurable = arrObj.hasOwnProperty(\"length\");\n\n        return verifyValue && verifyWritable && !verifyEnumerable && verifyConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-12.js",
    "description": "Object.defineProperty throws TypeError when changing non-configurable data properties to accessor properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property; all other attributes default to false.\n  var d1 = { value: 101, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // changing \"foo\" to be an accessor should fail, since [[Configurable]]\n  // on the original property will be false.\n\n  // dummy getter\n  var getter = function () { return 1; }\n\n  var desc = { get: getter };\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain a data valued property.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.value === 101 &&\n          d2.writable === false &&\n          d2.enumerable === false &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-120",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-120.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test TypeError is thrown when updating the [[Configurable]] attribute of the length property from false to true (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-121",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-121.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test TypeError is thrown when updating the [[Enumerable]] attribute of the length property from false to true (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                enumerable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-122",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-122.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test TypeError is thrown when 'desc' is accessor descriptor (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                get: function () {\n                    return 2;\n                }\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-123",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-123.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test TypeError is thrown when updating the [[Writable]] attribute of the length property from false to true (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                writable: false\n            });\n            Object.defineProperty(arrObj, \"length\", {\n                writable: true\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-124",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-124.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is absent, test updating the [[Writable]] attribute of the length property from true to false (15.4.5.1 step 3.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"length\", 0, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-125",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-125.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test that RangeError exception is thrown when  [[Value]] field of 'desc' is undefined (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: undefined\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-126",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-126.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is null (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: null\n        });\n        return arrObj.length === 0;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-127",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-127.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is a boolean with value false (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: false\n        });\n        return arrObj.length === 0 && !arrObj.hasOwnProperty(\"0\") && !arrObj.hasOwnProperty(\"1\");\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-128",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-128.js",
    "description": "Object.defineProperty -  'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is a boolean with value true (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: true\n        });\n        return arrObj.length === 1;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-129",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-129.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is not thrown when the [[Value]] field of 'desc' is 0 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 0\n        });\n        return arrObj.length === 0;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-13.js",
    "description": "Object.defineProperty throws TypeError when changing non-configurable accessor properties to data properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n \n  // dummy getter\n  var getter = function () { return 1; }\n  var d1 = { get: getter, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // changing \"foo\" to be a data property should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { value: 101 };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain an accessor property.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.get === getter &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-130",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-130.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is not thrown when the [[Value]] field of 'desc' is +0 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: +0\n        });\n        return arrObj.length === 0;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-131",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-131.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is not thrown when the [[Value]] field of 'desc' is -0 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: -0\n        });\n        return arrObj.length === 0;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-132",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-132.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is not thrown when the [[Value]] field of 'desc' is a positive number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 12\n        });\n        return arrObj.length === 12;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-133",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-133.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a negative number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: -9\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-134",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-134.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is +Infinity (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: +Infinity\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-135",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-135.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is -Infinity (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: -Infinity\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-136",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-136.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is NaN (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: NaN\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-137",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-137.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is not thrown when the [[Value]] field of 'desc' is a string containing a positive number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: \"2\"\n        });\n        return arrObj.length === 2;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-138",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-138.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a string containing a negative number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: \"-42\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-139",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-139.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a string containing a decimal number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: \"200.59\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-14.js",
    "description": "Object.defineProperty permits changing data property to accessor property for configurable properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data property. In this case,\n  // [[Enumerable]] and [[Configurable]] are true\n  o[\"foo\"] = 101;\n\n  // changing \"foo\" to be an accessor should succeed, since [[Configurable]]\n  // on the original property will be true. Existing values of [[Configurable]]\n  // and [[Enumerable]] need to be preserved and the rest need to be set to\n  // their default values\n\n  // dummy getter\n  var getter = function () { return 1; }\n  var d1 = { get: getter };\n  Object.defineProperty(o, \"foo\", d1);\n\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n  if (d2.get === getter &&\n      d2.enumerable === true &&\n      d2.configurable === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-140",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-140.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a string containing +Infinity (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: \"+Infinity\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-141",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-141.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a string containing -Infinity (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: \"-Infinity\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-142",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-142.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is a string containing an exponential number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: \"2E3\"\n        });\n        return arrObj.length === 2E3;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-143",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-143.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is a string containing a hex number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: \"0x00B\"\n        });\n        return arrObj.length === 0x00B;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-144",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-144.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is a string containing a number with leading zeros (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: \"0002.0\"\n        });\n        return arrObj.length === 2;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-145",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-145.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError exception is thrown when the [[Value]] field of 'desc' is a string which doesn't convert to a number (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: \"two\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-146",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-146.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is an object which has an own toString method (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: {\n                toString: function () {\n                    return '2';\n                } \n            }\n        });\n        return arrObj.length === 2;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-147",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-147.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is an Object which has an own valueOf method (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: {\n                valueOf: function () {\n                    return 2;\n                }\n            }\n        });\n        return arrObj.length === 2;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-148",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-148.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is an Object which has an own valueOf method that returns an object and toString method that returns a string (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: {\n                toString: function () {\n                    toStringAccessed = true;\n                    return '2';\n                },\n\n                valueOf: function () {\n                    valueOfAccessed = true;\n                    return {};\n                }\n            }\n        });\n        return arrObj.length === 2 && toStringAccessed && valueOfAccessed;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-149",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-149.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is an Object which has an own toString and valueOf method (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: {\n                toString: function () {\n                    toStringAccessed = true;\n                    return '2';\n                },\n\n                valueOf: function () {\n                    valueOfAccessed = true;\n                    return 3;\n                }\n            }\n        });\n        return arrObj.length === 3 && !toStringAccessed && valueOfAccessed;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-15.js",
    "description": "Object.defineProperty permits changing accessor property to data property for configurable properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // define an accessor property\n  // dummy getter\n  var getter = function () { return 1; }\n  var d1 = { get: getter, configurable: true };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // changing \"foo\" to be a data valued property should succeed, since\n  // [[Configurable]] on the original property will be true. Existing\n  // values of [[Configurable]] and [[Enumerable]] need to be preserved\n  // and the rest need to be set to their default values.\n  var desc = { value: 101 };\n  Object.defineProperty(o, \"foo\", desc);\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n  if (d2.value === 101 &&\n      d2.writable === false &&\n      d2.enumerable === false &&\n      d2.configurable === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-150",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-150.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test TypeError is thrown when the [[Value]] field of 'desc' is an Object that both toString and valueOf wouldn't return primitive value (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: {\n                    toString: function () {\n                        toStringAccessed = true;\n                        return {};\n                    },\n\n                    valueOf: function () {\n                        valueOfAccessed = true;\n                        return {};\n                    }\n                }\n            });\n            return false;\n\n        } catch (e) {\n            return e instanceof TypeError && toStringAccessed && valueOfAccessed;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-151",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-151.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', and the [[Value]] field of 'desc' is an Object with an own toString method and an inherited valueOf method (15.4.5.1 step 3.c), test that the inherited valueOf method is used",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        var toStringAccessed = false;\n        var valueOfAccessed = false;\n\n        var proto = {\n            valueOf: function () {\n                valueOfAccessed = true;\n                return 2;\n            }\n        };\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var child = new ConstructFun();\n        child.toString = function () {\n            toStringAccessed = true;\n            return 3;\n        };\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: child\n        });\n        return arrObj.length === 2 && !toStringAccessed && valueOfAccessed;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-152",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-152.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O',  test RangeError is thrown when the [[Value]] field of 'desc' is a positive non-integer values (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 123.5\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-153",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-153.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O',  test RangeError is thrown when the [[Value]] field of 'desc' is a negative non-integer values (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: -4294967294.5\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-154",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-154.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is boundary value 2^32 - 2 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 4294967294 \n        });\n\n        return arrObj.length === 4294967294;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-155",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-155.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test the [[Value]] field of 'desc' is boundary value 2^32 - 1 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 4294967295\n        });\n\n        return arrObj.length === 4294967295;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-156",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-156.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError is thrown when the [[Value]] field of 'desc' is boundary value 2^32 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 4294967296\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-157",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-157.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', test RangeError is thrown when the [[Value]] field of 'desc' is boundary value 2^32 + 1 (15.4.5.1 step 3.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 4294967297\n            });\n            return false;\n        } catch (e) {\n            return e instanceof RangeError;\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-159",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-159.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', set the [[Value]] field of 'desc' to a value greater than the existing value of length (15.4.5.1 step 3.f)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, , 2];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 5\n        });\n\n        return arrObj.length === 5 && arrObj[0] === 0 &&\n            !arrObj.hasOwnProperty(\"1\") && arrObj[2] === 2 &&\n            !arrObj.hasOwnProperty(\"4\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-16.js",
    "description": "Object.defineProperty throws TypeError when relaxing [[Writable]] on non-configurable data properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property; all other attributes default to false.\n  var d1 = { value: 101 };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, relaxing [[Writable]] on \"foo\" should fail, since both\n  // [[Configurable]] and [[Writable]] on the original property will be false.\n  var desc = { value: 101, writable: true };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.value === 101 &&\n          d2.writable === false &&\n          d2.enumerable === false &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-160",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-160.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', set the [[Value]] field of 'desc' to a value equal to the existing value of length (15.4.5.1 step 3.f)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, , 2];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 3\n        });\n\n        return arrObj.length === 3 && arrObj[0] === 0 && !arrObj.hasOwnProperty(\"1\") && arrObj[2] === 2;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-161",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-161.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', set the [[Value]] field of 'desc' to a value lesser than the existing value of length and test that indexes beyond the new length are deleted(15.4.5.1 step 3.f)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        \n        Object.defineProperty(arrObj, \"length\", {\n            value: 1\n        });\n        return arrObj.length === 1 && !arrObj.hasOwnProperty(\"1\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-162",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-162.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is greater than value of the length property, test TypeError is thrown when the length property is not writable (15.4.5.1 step 3.f.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 12\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-163",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-163.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' equals to value of the length property, test no TypeError is thrown when the length property is not writable (15.4.5.1 step 3.f.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 0\n            });\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-164",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-164.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test TypeError is thrown when the [[Writable]] attribute of the length property is false (15.4.5.1 step 3.g)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 0\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-165",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-165.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property,  test the [[Writable]] attribute of the length property is set to true after deleting properties with large index named if the [[Writable]] field of 'desc' is absent (15.4.5.1 step 3.h)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 1\n        });\n\n        var indexDeleted = !arrObj.hasOwnProperty(\"1\");\n\n        arrObj.length = 10;\n\n        return indexDeleted && arrObj.length === 10;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-166",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-166.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property,  test the [[Writable]] attribute of the length property is set to true after deleting properties with large index named if the [[Writable]] field of 'desc' is true (15.4.5.1 step 3.h)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 1,\n            writable: true\n        });\n\n        var indexDeleted = !arrObj.hasOwnProperty(\"1\");\n\n        arrObj.length = 10;\n\n        return indexDeleted && arrObj.length === 10;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-167",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-167.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Writable]] attribute of the length property is set to false after deleting properties with large index named if the [[Writable]] field of 'desc' is false (15.4.5.1 step 3.i.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 1,\n            writable: false\n        });\n\n        var indexDeleted = !arrObj.hasOwnProperty(\"1\");\n\n        arrObj.length = 10;\n\n        return indexDeleted && arrObj.length === 1;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-168",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-168.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', whose writable attribute is being changed to false and the [[Value]] field of 'desc' is less than value of  the length property and also lesser than an index of the array which is set to configurable:false, test that new length is set to a value greater than the non-deletable index by 1, writable attribute of length is set to false and TypeError exception is thrown (15.4.5.1 step 3.i.iii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1, 2];\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 0,\n                writable: false\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-169",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-169.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property and also lesser than an index of the array which is set to configurable: false, test that new length is set to a value greater than the non-deletable index by 1, and TypeError is thrown (15.4.5.1 step 3.l.i)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1, 2];\n\n        Object.defineProperty(arrObj, \"1\", {\n            configurable: false\n        });\n\n        Object.defineProperty(arrObj, \"2\", {\n            configurable: true\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && !arrObj.hasOwnProperty(\"2\");\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-17.js",
    "description": "Object.defineProperty throws TypeError when changing value of non-writable non-configurable data properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property; all other attributes default to false.\n  var d1 = { value: 101 };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, trying to change the value of \"foo\" should fail, since both\n  // [[Configurable]] and [[Writable]] on the original property will be false.\n  var desc = { value: 102 };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n      if (d2.value === 101 &&\n          d2.writable === false &&\n          d2.enumerable === false &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-170",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-170.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property and also lesser than an index of the array which is set to configurable: false, test that new length is set to a value greater than the non-deletable index by 1, writable attribute of length is set to false and TypeError exception is thrown (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\");\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-171",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-171.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of an inherited data property with large index named in 'O' can't stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Array.prototype[1] = 2; // Not setting the [[Configurable]] attribute of property \"1\" to false here, since Array.prototype is a global object, and non-configurbale property can't revert to configurable\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return arrObj.length === 1 && !arrObj.hasOwnProperty(\"1\");\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-172",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-172.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of own data property with large index named in 'O' that overrides an inherited data property can stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                configurable: false\n            });\n            \n            Array.prototype[1] = 2;\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\"); \n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-173",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-173.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of own data property with large index named in 'O' that overrides an inherited accessor property can stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                configurable: false\n            });\n\n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\");\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-174",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-174.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of own accessor property with large index named in 'O' can stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: function () {\n                    return 1;\n                },\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\");\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-175",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-175.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of an inherited accessor property with large index named in 'O' can't stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return 1;\n                },\n                configurable: true // Not setting the [[Configurable]] attribute of property \"1\" to false here, since Array.prototype is a global object, and non-configurbale property can't revert to configurable\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n\n            return arrObj.length === 1 && !arrObj.hasOwnProperty(\"1\");\n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-176",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-176.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of own accessor property with large index named in 'O' that overrides an inherited data property can stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: false\n            });\n            \n            Array.prototype[1] = 2;\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\"); \n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-177",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-177.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Configurable]] attribute of own accessor property with large index named in 'O' that overrides an inherited accessor property can stop deleting index named properties (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: function () {\n                    return 1;\n                },\n                configurable: false\n            });\n            \n            Object.defineProperty(Array.prototype, \"1\", {\n                get: function () {\n                    return 2;\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(arrObj, \"length\", {\n                value: 1\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.length === 2 && arrObj.hasOwnProperty(\"1\"); \n        } finally {\n            delete Array.prototype[1];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-178",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-178.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the configurable large index named property of 'O' is deleted (15.4.5.1 step 3.l.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 1\n        });\n\n        return !arrObj.hasOwnProperty(\"1\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-179-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-179-1.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is greater than value of  the length property, test value of the length property is same as [[Value]] (15.4.5.1 step 3.l.iii.1)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [0, 1, 2, 3];\n\n        Object.defineProperty(arrObj, \"1\", {\n            configurable: false\n        });\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 3\n        });          \n\n        return arrObj.length === 3;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-18",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-18.js",
    "description": "Object.defineProperty throws TypeError when changing setter of non-configurable accessor properties(8.12.9 step 11.a.i)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy getter\n  var getter = function () { return 1;}\n  var d1 = { get: getter };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, trying to change the setter should fail, since [[Configurable]]\n  // on the original property will be false.\n  var setter = function (x) {};\n  var desc = { set: setter };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.get === getter &&\n\t      d2.configurable === false &&\n          d2.enumerable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-181",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-181.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is the length property of 'O', the [[Value]] field of 'desc' is less than value of  the length property, test the [[Writable]] attribute of the length property is set to false at last when the [[Writable]] field of 'desc' is false and 'O' doesn't contain non-configurable large index named property (15.4.5.1 step 3.m)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [0, 1];\n\n        Object.defineProperty(arrObj, \"length\", {\n            value: 0,\n            writable: false\n        });\n            \n        arrObj.length = 10; //try to overwrite length value of arr\n        return !arrObj.hasOwnProperty(\"1\") && arrObj.length === 0;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-182",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-182.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is available String values that convert to numbers (15.4.5.1 step 4.a)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 12\n        });\n\n        return arrObj[0] === 12;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-183",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-183.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is boundary value 2^32 - 2 (15.4.5.1 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 4294967294, {\n            value: 100\n        });\n\n        return arrObj.hasOwnProperty(\"4294967294\") && arrObj.length === 4294967295 && arrObj[4294967294] === 100;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-184",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-184.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is boundary value 2^32 - 1 (15.4.5.1 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 4294967295, {\n            value: 100\n        });\n\n        return arrObj.hasOwnProperty(\"4294967295\") && arrObj.length === 0 && arrObj[4294967295] === 100; ;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-185",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-185.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is boundary value 2^32 (15.4.5.1 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 4294967296, {\n            value: 100\n        });\n\n        return arrObj.hasOwnProperty(\"4294967296\") && arrObj.length === 0 && arrObj[4294967296] === 100;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-186",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-186.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is boundary value 2^32 + 1 (15.4.5.1 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 4294967297, {\n            value: 100\n        });\n\n        return arrObj.hasOwnProperty(\"4294967297\") && arrObj.length === 0 && arrObj[4294967297] === 100;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-187",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-187.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test TypeError is not thrown if the [[Writable]] attribute of the length property in 'O' is false and value of 'name' is less than value of the length property (15.4.5.1 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [1, 2, 3];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, 1, {\n                value: \"abc\"\n            });\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-188",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-188.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test TypeError is thrown if the [[Writable]] attribute of the length property in 'O' is false and value of 'name' equals to value of the length property (15.4.5.1 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [1, 2, 3];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, 3, {\n                value: \"abc\"\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-189",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-189.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test TypeError is thrown if the [[Writable]] attribute of the length property in 'O' is false and value of 'name' is greater than value of the length property (15.4.5.1 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [1, 2, 3];\n\n        Object.defineProperty(arrObj, \"length\", {\n            writable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, 4, {\n                value: \"abc\"\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-19",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-19.js",
    "description": "Object.defineProperty permits setting a setter (if absent) of non-configurable accessor properties(8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy getter\n  var getter = function () { return 1;}\n  var d1 = { get: getter };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, trying to set the setter should succeed even though [[Configurable]]\n  // on the original property will be false.\n  var desc = { set: undefined };\n  Object.defineProperty(o, \"foo\", desc);\n\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n  if (d2.get === getter &&\n\t  d2.set === undefined &&\n\t  d2.configurable === false &&\n\t  d2.enumerable === false) {\n\treturn true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-190",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-190.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own data property, test TypeError is thrown on updating the configurable attribute from false to true (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        Object.defineProperty(arrObj, 0, {\n            value: \"ownDataProperty\",\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, 0, {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError &&\n                dataPropertyAttributesAreCorrect(arrObj, \"0\", \"ownDataProperty\", false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-191",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-191.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is an inherited data property, test that defining own index named property is successful (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 11,\n                configurable: true\n            });\n\n            var arrObj = [];\n\n            Object.defineProperty(arrObj, \"0\", {\n                configurable: false\n            });\n            return arrObj.hasOwnProperty(\"0\") && Array.prototype[0] === 11 && typeof arrObj[0] === \"undefined\";\n        } finally {\n            delete Array.prototype[0];\n        }\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-192",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-192.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own data property that overrides an inherited data property, test TypeError is thrown on updating the [[Configurable]] attribute from false to true (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 11,\n                configurable: true\n            });\n\n            var arrObj = [];\n            Object.defineProperty(arrObj, \"0\", {\n                value: 12,\n                configurable: false\n            });\n       \n            Object.defineProperty(arrObj, \"0\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && Array.prototype[0] === 11 && arrObj[0] === 12;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-193",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-193.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own data property that overrides an inherited accessor property, test TypeError is thrown when update the [[Configurable]] attribute to true and value of [[Configurable]] attribute of original is false  (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                get: function () {\n                    return 11;\n                },\n                configurable: true\n            });\n\n            var arrObj = [];\n            Object.defineProperty(arrObj, \"0\", {\n                value: 12,\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"0\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && Array.prototype[0] === 11 && arrObj[0] === 12;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-194",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-194.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own accessor property, test TypeError is thrown on updating the configurable attribute from false to true (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var getFunc = function () {\n            return 11;\n        };\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, undefined, undefined, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-195",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-195.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is an inherited accessor property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                get: function () {\n                    return 11;\n                },\n                configurable: true\n            });\n\n            var arrObj = [];\n\n            function getFunc() {\n                return arrObj.helpVerifySet;\n            }\n            function setFunc(value) {\n                arrObj.helpVerifySet = value;\n            }\n\n            Object.defineProperty(arrObj, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                configurable: false\n            });\n\n            arrObj[0] = 13;\n\n            return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"helpVerifySet\", false, false);\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-196",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-196.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own accessor property that overrides an inherited data property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 11,\n                configurable: true\n            });\n\n            var arrObj = [];\n            Object.defineProperty(arrObj, \"0\", {\n                get: function () { },\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"0\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-197",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-197.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is own accessor property that overrides an inherited accessor property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                get: function () { },\n                configurable: true\n            });\n\n            var arrObj = [];\n            Object.defineProperty(arrObj, \"0\", {\n                get: function () { },\n                configurable: false\n            });\n\n            Object.defineProperty(arrObj, \"0\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-198",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-198.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O', test TypeError is thrown when 'O' is not extensible (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        Object.preventExtensions(arrObj);\n\n        try {\n            var desc = { value: 1 };\n            Object.defineProperty(arrObj, \"0\", desc);\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && (arrObj.hasOwnProperty(\"0\") === false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.6-4-199",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-199.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O', test 'name' is defined as data property when 'desc' is generic descriptor (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            enumerable: true\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-2.js",
    "description": "Object.defineProperty sets missing attributes to their default values (data properties)(8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  var desc = { value: 1 };\n  Object.defineProperty(o, \"foo\", desc);\n  \n  var propDesc = Object.getOwnPropertyDescriptor(o, \"foo\");\n  \n  if (propDesc.value        === 1 &&          // this is the value that was set\n      propDesc.writable     === false &&      // false by default\n      propDesc.enumerable   === false &&      // false by default\n      propDesc.configurable === false) {      // false by default\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-20",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-20.js",
    "description": "Object.defineProperty throws TypeError when changing getter (if present) of non-configurable accessor properties(8.12.9 step 11.a.ii)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy getter/setter\n  var getter = function () { return 1;}\n  var d1 = { get: getter, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, trying to change the setter should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { get: undefined };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n      if (d2.get === getter &&\n\t      d2.configurable === false &&\n          d2.enumerable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-200",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-200.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O', test [[Value]] of 'name' property of 'Attributes' is set as undefined if [[Value]] is absent in data descriptor 'desc' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-201",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-201.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Writable]] is absent in data descriptor 'desc', test [[Writable]] attribute of  property 'name' is set to false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 1001,\n            enumerable: true,\n            configurable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 1001, false, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-202",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-202.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Enumerable]] is absent in data descriptor 'desc', test [[Enumerable]] of property 'name' is set to false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 1001,\n            writable: true,\n            configurable: true\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-203",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-203.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Configurable]] is absent in data descriptor 'desc', test [[Configurable]] of property 'name' is set to false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-204",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-204.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'desc' is data descriptor, test updating all attribute values of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [1]; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 1001,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 1001, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-205",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-205.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Get]] is absent in accessor descriptor 'desc', test [[Get]] attribute of property 'name' is set to undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var setFunc = function (value) {\n            arrObj.setVerifyHelpProp = value;\n        };\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-206",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-206.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O', test [[Set]] of 'name' property in 'Attributes' is set as undefined if [[Set]] is absent in accessor descriptor 'desc' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var getFunc = function () { };\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(arrObj, \"0\");\n\n        return arrObj.hasOwnProperty(\"0\") && desc.hasOwnProperty(\"set\") && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-207",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-207.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Enumerable]] is absent in accessor descriptor 'desc', test [[Enumerable]] attribute of property 'name' is set to false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        var setFunc = function (value) {\n            arrObj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () { };\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc,\n            get: getFunc,\n            configurable: true\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-208",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-208.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' property doesn't exist in 'O' and [[Configurable]] is absent in accessor descriptor 'desc', test [[Configurable]] attribute of property 'name' is set to false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var setFunc = function (value) {\n            arrObj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () { };\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc,\n            get: getFunc,\n            enumerable: true\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-209",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-209.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'desc' is accessor descriptor, test updating all attribute values of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var setFunc = function (value) {\n            arrObj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () {\n            return 14;\n        };\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: function () {\n                return 11;\n            },\n            set: function () { },\n            configurable: true,\n            enumerable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false,\n            enumerable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-21",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-21.js",
    "description": "Object.defineProperty permits setting a getter (if absent) of non-configurable accessor properties(8.12.9 step 11.a.ii)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create an accessor property; all other attributes default to false.\n  // dummy setter\n  var setter = function (x) {}\n  var d1 = { set: setter };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, trying to set the getter should succeed even though [[Configurable]]\n  // on the original property will be false. Existing values of need to be preserved.\n  var getter = undefined;\n  var desc = { get: getter };\n\n  Object.defineProperty(o, \"foo\", desc);\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n  if (d2.get === getter &&\n      d2.set === setter &&\n      d2.configurable === false &&\n      d2.enumerable === false) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-210",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-210.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' makes no change if every field in 'desc' is absent (name is data property) (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        arrObj[0] = 101; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(arrObj, \"0\", {});\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 101, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-211",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-211.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' makes no change if every field in 'desc' is absent(name is accessor property) (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        function getFunc() {\n            return 11;\n        }\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {});\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-212",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-212.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' makes no change if the value of every field in 'desc' is the same value as the corresponding field in 'name'(desc is data property) (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        arrObj[0] = 100; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 100,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-213",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-213.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' makes no change if the value of every field in 'desc' is the same value as the corresponding field in 'name'(desc is accessor property) (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var getFunc = function () {\n            return \"100\";\n        };\n        var setFunc = function (value) {\n            arrObj.setVerifyHelpProp = value;\n        };\n\n        var desc = {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        };\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", desc);\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-214",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-214.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property and its configurable and writable attributes are set to false, test TypeError is thrown when the type of the [[Value]] field of 'desc' is different from the type of the [[Value]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 0, {\n            value: 101,\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: \"abc\" });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", 101, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-215",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-215.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, both the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: undefined });\n\n        Object.defineProperty(arrObj, \"0\", { value: undefined });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-216",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-216.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, both the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are null  (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: null });\n\n        Object.defineProperty(arrObj, \"0\", { value: null });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", null, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-217",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-217.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, both the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are NaN  (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: NaN });\n\n        Object.defineProperty(arrObj, \"0\", { value: NaN });\n\n        var hasProperty = arrObj.hasOwnProperty(\"0\");\n        var verifyValue = (arrObj[0] !== arrObj[0]);\n\n        var verifyWritable = false;\n        arrObj[0] = 1001;\n        verifyWritable = arrObj[0] !== 1001 && arrObj[0] !== arrObj[0];\n\n        var verifyEnumerable = false;\n        for (var p in arrObj) {\n            if (p === \"0\") {\n                verifyEnumerable = true;\n            }\n        }\n\n        var verifyConfigurable = false;\n        delete arrObj[0];\n        verifyConfigurable = arrObj.hasOwnProperty(\"0\");\n\n        return hasProperty && verifyValue && verifyWritable && !verifyEnumerable && verifyConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-218",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-218.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown when the [[Value]] field of 'desc' is +0, and the [[Value]] attribute value of 'name' is -0 (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: -0 });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: +0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", -0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-219",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-219.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown when the [[Value]] field of 'desc' is -0, and the [[Value]] attribute value of 'name' is +0 (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: +0 });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: -0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", +0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-22",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-22.js",
    "description": "Object.defineProperty - 'name' is existing own data property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"foo\", {\n            value: 11,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                value: 12,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.foo === 11;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-220",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-220.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two numbers with same vaule (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: 101 });\n\n        Object.defineProperty(arrObj, \"0\", { value: 101 });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 101, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-221",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-221.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown  when the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two numbers with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 0, {\n            value: 101,\n            writable: false,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: 123 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", 101, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-222",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-222.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two strings which have same length and same characters in corresponding positions (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: \"abcd\" });\n\n        Object.defineProperty(arrObj, \"0\", { value: \"abcd\" });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", \"abcd\", false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-223",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-223.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown  when the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two strings with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 0, {\n            value: \"abcd\",\n            writable: false,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: \"fghj\" });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", \"abcd\", false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-224",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-224.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two booleans with same value (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { value: true });\n\n        Object.defineProperty(arrObj, \"0\", { value: true });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", true, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-225",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-225.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown when the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two booleans with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, 0, {\n            value: true,\n            writable: false,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: false });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", true, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-226",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-226.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two objects which refer to the same object (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        var obj1 = { length: 10 };\n\n        Object.defineProperty(arrObj, \"0\", { value: obj1 });\n\n        Object.defineProperty(arrObj, \"0\", { value: obj1 });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", obj1, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-227",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-227.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, test TypeError is thrown when the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two objects which refer to two different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        var obj1 = { length: 10 };\n        Object.defineProperty(arrObj, 0, {\n            value: obj1,\n            writable: false,\n            configurable: false\n        });\n\n        var obj2 = { length: 20 };\n\n        try {\n            Object.defineProperty(arrObj, \"0\", { value: obj2 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"0\", obj1, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-228",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-228.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Writable]] field of 'desc' and the [[Writable]] attribute value of 'name' are two booleans with same value (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { writable: false });\n\n        Object.defineProperty(arrObj, \"0\", { writable: false });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-229",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-229.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Writable]] field of 'desc' and the [[Writable]] attribute value of 'name' are two booleans with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { writable: false, configurable: true });\n\n        Object.defineProperty(arrObj, \"0\", { writable: true });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-23",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-23.js",
    "description": "Object.defineProperty - 'name' is existing an inherited data property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            value: 11,\n            configurable: false\n        });\n\n        var ConstructFun = function () {};\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n\n        Object.defineProperty(obj, \"foo\", {\n            configurable: true\n        });\n        return obj.hasOwnProperty(\"foo\") && (typeof obj.foo) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-230",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-230.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Get]] field of 'desc' and the [[Get]] attribute value of 'name' are two objects which refer to the same object (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        arrObj.helpVerifySet = 10;\n\n        function getFunc() {\n            return arrObj.helpVerifySet;\n        }\n        function setFunc(value) {\n            arrObj.helpVerifySet = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, setFunc, \"helpVerifySet\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-231",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-231.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Get]] field of 'desc' and the [[Get]] attribute value of 'name' are two objects which refer to the different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        arrObj.helpVerifySet = 10;\n\n        function getFunc1() {\n            return 20;\n        }\n        function getFunc2() {\n            return arrObj.helpVerifySet;\n        }\n        function setFunc(value) {\n            arrObj.helpVerifySet = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc1,\n            set: setFunc,\n            configurable: true\n        });\n        \n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc2\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc2, setFunc, \"helpVerifySet\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-232",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-232.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Set]] field of 'desc' and the [[Set]] attribute value of 'name' are two objects which refer to the same object (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", { set: setFunc });\n\n        Object.defineProperty(arrObj, \"0\", { set: setFunc });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-233",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-233.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Set]] field of 'desc' and the [[Set]] attribute value of 'name' are two objects which refer to the different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        function setFunc1() { }\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc1,\n            configurable: true\n        });\n\n        function setFunc2(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", { set: setFunc2 });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc2, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-234",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-234.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Enumerable]] field of 'desc' and the [[Enumerable]] attribute value of 'name' are two booleans with same value (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { enumerable: false });\n\n        Object.defineProperty(arrObj, \"0\", { enumerable: false });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-235",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-235.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Enumerable]] field of 'desc' and the [[Enumerable]] attribute value of 'name' are two booleans with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { enumerable: false, configurable: true });\n\n        Object.defineProperty(arrObj, \"0\", { enumerable: true });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-236",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-236.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Configurable]] field of 'desc' and the [[Configurable]] attribute value of 'name' are two booleans with same value  (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { configurable: false });\n\n        Object.defineProperty(arrObj, \"0\", { configurable: false });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-237",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-237.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index property, the [[Configurable]] field of 'desc' and the [[Configurable]] attribute value of 'name' are two booleans with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", { configurable: true });\n\n        Object.defineProperty(arrObj, \"0\", { configurable: false });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-238",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-238.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, TypeError is thrown if the [[Configurable]] attribute value of 'name' is false  and the [[Configurable]] field of 'desc' is true (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 3,\n            writable: true,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: 13,\n                writable: true,\n                configurable: true\n            });\n            return false;\n\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", 3, true, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-239",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-239.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, TypeError is thrown if the [[Configurable]] attribute value of 'name' is false, and [[Enumerable]] of 'desc' is present and its value is different from the [[Enumerable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 3,\n            writable: true,\n            configurable: false,\n            enumerable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: 13,\n                writable: true,\n                enumerable: true\n            });\n            return false;\n\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", 3, true, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-24",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-24.js",
    "description": "Object.defineProperty - 'name' is own data property that overrides an inherited data property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            value: 12,\n            configurable: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n        Object.defineProperty(obj, \"foo\", {\n            value: 11,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.foo === 11;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-240",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-240.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, TypeError is thrown if 'name' is accessor property, and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"1\", {\n            set: setFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: 13\n            });\n            return false;\n\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"1\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-241",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-241.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, TypeError is thrown if  'name' is data property, and'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 3,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                set: function () { }\n            });\n            return false;\n\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", 3, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-242-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-242-1.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property,  'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is true, test 'name' is updated successfully (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [3];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 1001,\n            writable: false,\n            enumerable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 1001, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-242",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-242.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property,  'name' is data property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is true, test 'name' is converted from data property to accessor property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [3];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-243-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-243-1.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property,  'name' is accessor property and  assignment to the accessor property, fails to convert accessor property from accessor property to data property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 3;\n        }\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc,\n            configurable: true\n        });\n\n        arrObj[1] = 4;\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"1\", getFunc, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-243",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-243.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property,  'name' is accessor property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is true, test 'name' is converted from accessor property to data property (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 3;\n        }\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 12\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"1\", 12, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-244",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-244.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false and the [[Writable]] field of 'desc' is true (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            writable: false,\n            configurable: false\n        });\n\n        try {\n\n            Object.defineProperty(arrObj, \"1\", {\n                writable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", undefined, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-245",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-245.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the type of the [[Value]] field of 'desc' is different from the type of the [[Value]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 3,\n            writable: false,\n            configurable: false\n        });\n\n        try {\n\n            Object.defineProperty(arrObj, \"1\", {\n                value: \"abc\"\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", 3, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-246",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-246.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' is +0, and the [[Value]] attribute value of 'name' is -0 (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: -0\n\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: +0\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", -0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-247",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-247.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' is -0, and the [[Value]] attribute value of 'name' is +0 (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: +0\n        });\n\n        try {\n\n            Object.defineProperty(arrObj, \"1\", {\n                value: -0\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", +0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-248",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-248.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two numbers with different vaules (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 12\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: 15\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", 12, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-249",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-249.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two strings with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: \"abc\"\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: \"fgh\"\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", \"abc\", false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-25",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-25.js",
    "description": "Object.defineProperty - 'data' is own data property that overrides an inherited accessor property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            get: function () { },\n            configurable: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n        Object.defineProperty(obj, \"foo\", {\n            value: 11,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.foo === 11;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-250",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-250.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two booleans with different values (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                value: true\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", false, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-251",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-251.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is data property and 'desc' is data descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Writable]] attribute value of 'name' is false, and the [[Value]] field of 'desc' and the [[Value]] attribute value of 'name' are two objects which refer to the different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        var obj = { length: 10 };\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: obj\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", { value: {} });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"1\", obj, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-252",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-252.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Set]] field of 'desc' is present, and the [[Set]] field of 'desc' and the [[Set]] attribute value of 'name' are two objects which refer to the different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"1\", {\n            set: setFunc\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                set: function () { }\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"1\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-253",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-253.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Set]] field of 'desc' is present, and the [[Set]] field of 'desc' is an object and the [[Set]] attribute value of 'name' is undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        function getFunc() {\n            return 12;\n        }\n\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc,\n            set: undefined\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                set: function () { }\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"1\", getFunc, undefined, undefined, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-254",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-254.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is not thrown if the [[Set]] field of 'desc' is present, and the [[Set]] field of 'desc' and the [[Set]] attribute value of 'name' are undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"1\", {\n            set: undefined\n        });\n        var hasProperty = arrObj.hasOwnProperty(\"1\");\n\n        Object.defineProperty(arrObj, \"1\", {\n            set: undefined\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(arrObj, \"1\");\n\n        var verifyGet = desc.hasOwnProperty(\"get\") && typeof desc.get === \"undefined\";\n\n        var verifySet = desc.hasOwnProperty(\"set\") && typeof desc.set === \"undefined\";\n\n        var verifyEnumerable = false;\n        for (var p in arrObj) {\n            if (p === \"1\") {\n                verifyEnumerable = true\n            }\n        }\n\n        var verifyConfigurable = false;\n        delete arrObj[1];\n        verifyConfigurable = arrObj.hasOwnProperty(\"1\");\n\n        return hasProperty && verifyGet && verifySet && !verifyEnumerable && verifyConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-255",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-255.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Get]] field of 'desc' is present, and the [[Get]] field of 'desc' and the [[Get]] attribute value of 'name' are two objects which refer to the different objects (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        function getFunc() {\n            return 12;\n        }\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: function () {\n                    return 14;\n                }\n            });\n\n            return false;\n        } catch (e) {\n            var hasProperty = arrObj.hasOwnProperty(\"1\");\n            var desc = Object.getOwnPropertyDescriptor(arrObj, \"1\");\n\n            var verifyGet = arrObj[1] === getFunc();\n\n            var verifySet = desc.hasOwnProperty(\"set\") && typeof desc.set === \"undefined\";\n\n            var verifyEnumerable = false;\n            for (var p in arrObj) {\n                if (p === \"1\") {\n                    verifyEnumerable = true\n                }\n            }\n\n            var verifyConfigurable = false;\n            delete arrObj[1];\n            verifyConfigurable = arrObj.hasOwnProperty(\"1\");\n\n            return e instanceof TypeError && hasProperty && verifyGet &&\n                verifySet && !verifyEnumerable && verifyConfigurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-256",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-256.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is thrown if the [[Get]] field of 'desc' is present, and the [[Get]] field of 'desc' is an object and the [[Get]] attribute value of 'name' is undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        function getFunc() {\n            return 12;\n        }\n\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: undefined\n            });\n            return false;\n        } catch (e) {\n            var hasProperty = arrObj.hasOwnProperty(\"1\");\n            var desc = Object.getOwnPropertyDescriptor(arrObj, \"1\");\n\n            var verifyGet = arrObj[1] === getFunc();\n\n            var verifySet = desc.hasOwnProperty(\"set\") && typeof desc.set === \"undefined\";\n\n            var verifyEnumerable = false;\n            for (var p in arrObj) {\n                if (p === \"1\") {\n                    verifyEnumerable = true\n                }\n            }\n\n            var verifyConfigurable = false;\n            delete arrObj[1];\n            verifyConfigurable = arrObj.hasOwnProperty(\"1\");\n\n            return e instanceof TypeError && hasProperty && verifyGet &&\n                verifySet && !verifyEnumerable && verifyConfigurable;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-257",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-257.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, 'name' is accessor property and 'desc' is accessor descriptor, and the [[Configurable]] attribute value of 'name' is false, test TypeError is not thrown if the [[Get]] field of 'desc' is present, and the [[Get]] field of 'desc' and the [[Get]] attribute value of 'name' are undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"1\", {\n            get: undefined,\n            set: setFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"1\", {\n                get: undefined\n            });\n\n            return accessorPropertyAttributesAreCorrect(arrObj, \"1\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-258",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-258.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test updating the [[Value]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: 200\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 200, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-259",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-259.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test setting the [[Value]] attribute value of 'name' as undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n\n        Object.defineProperty(arrObj, \"0\", {\n            value: undefined\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", undefined, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-26",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-26.js",
    "description": "Object.defineProperty - 'name' is own accessor property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return 11;\n            },\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return 12;\n                },\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.property === 11;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-260",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-260.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test setting the [[Value]] attribute value of 'name' from undefined to number (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [undefined];\n        Object.defineProperty(arrObj, \"0\", {\n            value: 100\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-261",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-261.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test updating the [[Writable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n        Object.defineProperty(arrObj, \"0\", {\n            writable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-262",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-262.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test updating the [[Enumerable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n\n        Object.defineProperty(arrObj, \"0\", {\n            enumerable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-263",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-263.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test updating the [[Configurable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n\n        Object.defineProperty(arrObj, \"0\", {\n            configurable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-264",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-264.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is data property and 'desc' is data descriptor, test updating multiple attribute values of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [100];\n        Object.defineProperty(arrObj, \"0\", {\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        return dataPropertyAttributesAreCorrect(arrObj, \"0\", 100, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-265",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-265.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Get]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 100;\n        }\n        Object.defineProperty(arrObj, \"0\", {\n            get: function () {\n                return 12;\n            },\n            configurable: true\n        });\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-266",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-266.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test setting the [[Get]] attribute value of 'name' as undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        function getFunc() {\n            return 12;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: undefined\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-267",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-267.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Get]] attribute value of 'name' from undefined to function object (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 12;\n        }\n        Object.defineProperty(arrObj, \"0\", {\n            get: undefined,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            get: getFunc\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", getFunc, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-268",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-268.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Set]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"0\", {\n            set: function () { },\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-269",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-269.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test setting the [[Set]] attribute value of 'name' as undefined (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: function () { },\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: undefined\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, undefined, undefined, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-27",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-27.js",
    "description": "Object.defineProperty - 'name' is an inherited accessor property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"property\", {\n            get: function () {\n                return 11;\n            },\n            configurable: false\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return 12;\n            },\n            configurable: true\n        });\n        return obj.hasOwnProperty(\"property\") && obj.property === 12;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-270",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-270.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Set]] attribute value of 'name' from undefined to function object (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: undefined,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-271",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-271.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Enumerable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            enumerable: false\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-272",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-272.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating the [[Configurable]] attribute value of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"0\", {\n            set: setFunc,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"0\", {\n            configurable: false\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"0\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-273",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-273.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, name is accessor property and 'desc' is accessor descriptor, test updating multiple attribute values of 'name' (15.4.5.1 step 4.c)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        function getFunc() {\n            return 12;\n        }\n        Object.defineProperty(arrObj, \"1\", {\n            get: function () {\n                return 6;\n            },\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(arrObj, \"1\", {\n            get: getFunc,\n            enumerable: false,\n            configurable: false\n        });\n        return accessorPropertyAttributesAreCorrect(arrObj, \"1\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnArrays())"
   },
   {
    "id": "15.2.3.6-4-274",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-274.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test the length property of 'O' is not changed if ToUint32('name') is less than value of the length property in 'O' (15.4.5.1 step 4.e)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        arrObj.length = 3; // default value of length: writable: true, configurable: false, enumerable: false\n\n        Object.defineProperty(arrObj, \"1\", {\n            value: 14\n        });\n\n        return arrObj.length === 3 && arrObj[1] === 14;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-275",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-275.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test the length property of 'O' is set as ToUint32('name') + 1 if ToUint32('name') equals to value of the length property in 'O' (15.4.5.1 step 4.e.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n        arrObj.length = 3; // default value of length: writable: true, configurable: false, enumerable: false\n\n        Object.defineProperty(arrObj, \"3\", {\n            value: 3\n        });\n\n        return arrObj.length === 4 && arrObj[3] === 3;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-276",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-276.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is an array index named property, test the length property of 'O' is set as ToUint32('name') + 1 if ToUint32('name') is greater than value of the length property in 'O' (15.4.5.1 step 4.e.ii)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"5\", {\n            value: 3\n        });\n\n        return arrObj.length === 6 && arrObj[5] === 3;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-277",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-277.js",
    "description": "Object.defineProperty -  'O' is an Array, 'name' is generic property that won't exist on 'O', and 'desc' is data descriptor, test 'name' is defined in 'O' with all correct attribute values (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"property\", {\n            value: 12,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"property\", 12, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-278",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-278.js",
    "description": "Object.defineProperty - 'name' is generic property that won't exist on 'O', and 'desc' is accessor descriptor, test 'name' is defined in 'O' with all correct attribute values (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 12;\n        }\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(arrObj, \"property\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-279",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-279.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own accessor property of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'name' (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 12;\n        }\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"property\", {\n            get: function () {\n                return 24;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(arrObj, \"property\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(arrObj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-28",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-28.js",
    "description": "Object.defineProperty - 'name' is own accessor property that overrides an inherited data property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            value: 11,\n            configurable: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n        Object.defineProperty(obj, \"foo\", {\n            get: function () { },\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-280",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-280.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own data property of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        arrObj.property = 12; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(arrObj, \"property\", {\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(arrObj, \"property\", 12, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-281",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-281.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own data property of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"property\", {\n            value: 12\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                value: 36\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"property\", 12, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-282",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-282.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own data property of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"property\", {\n            writable: false\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                writable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"property\", undefined, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-283",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-283.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own data property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"property\", {\n            value: 12,\n            enumerable: false\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                enumerable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"property\", 12, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-284",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-284.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own data property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"property\", {\n            value: 12\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(arrObj, \"property\", 12, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-285",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-285.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own accessor property of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function getFunc() {\n            return 12;\n        }\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"property\", {\n            get: getFunc,\n            set: setFunc\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                get: function () {\n                    return 36;\n                }\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-286",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-286.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own accessor property of 'O', and 'desc' is accessor descriptor, test TypeError is thrown when updating the [[Set]] attribute value of 'name' (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"property\", {\n            set: setFunc\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                set: function () {}\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"property\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-287",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-287.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own accessor property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"property\", {\n            set: setFunc,\n            enumerable: false\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                enumerable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"property\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-288",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-288.js",
    "description": "Object.defineProperty - 'O' is an Array, 'name' is generic own accessor property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (15.4.5.1 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var arrObj = [];\n\n        function setFunc(value) {\n            arrObj.setVerifyHelpProp = value;\n        }\n        Object.defineProperty(arrObj, \"property\", {\n            set: setFunc,\n            configurable: false\n        });\n        try {\n            Object.defineProperty(arrObj, \"property\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arrObj, \"property\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-289-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-289-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own property which is defined in both [[ParameterMap]] of 'O' and 'O', and is deleted afterwards, and 'desc' is data descriptor, test 'name' is redefined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            delete arguments[0];\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var verifyFormal = a === 0;\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 10, true, true, true) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-289",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-289.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own property of 'O', and is deleted afterwards, and 'desc' is data descriptor, test 'name' is redefined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () { \n            delete arguments[0];\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 10, true, true, true);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-29",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-29.js",
    "description": "Object.defineProperty - 'name' is own accessor property that overrides an inherited accessor property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            get: function () { },\n            configurable: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n        Object.defineProperty(obj, \"foo\", {\n            get: function () { },\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-290-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-290-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own property which is defined in both [[ParameterMap]] of 'O' and 'O', is deleted afterwards, and 'desc' is accessor descriptor, test 'name' is redefined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) { \n            delete arguments[0];\n            function getFunc() {\n                return 10;\n            }\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            var verifyFormal = a === 0;\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", true, true) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-290",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-290.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own property of 'O', and is deleted afterwards, and 'desc' is accessor descriptor, test 'name' is redefined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () { \n            delete arguments[0];\n            function getFunc() {\n                return 10;\n            }\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", true, true);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-291-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-291-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own accessor property of 'O' which is also defined in [[ParameterMap]] of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3 and 5.a.i)",
    "test": "assertTrue(((function (a, b, c) { \n            function getFunc1() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: true,\n                configurable: true\n            });\n            function getFunc2() {\n                return 20;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc2,\n                enumerable: false,\n                configurable: false\n            });\n            var verifyFormal = a === 0;\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc2, undefined, undefined, false, false) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-291",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-291.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own accessor property of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            function getFunc1() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: true,\n                configurable: true\n            });\n            function getFunc2() {\n                return 20;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc2,\n                enumerable: false,\n                configurable: false\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc2, undefined, undefined, false, false);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-292-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-292-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own property of 'O' which is also defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3 and 5.b)",
    "test": "assertTrue(((function (a, b, c) { \n            Object.defineProperty(arguments, \"0\", {\n                value: 20,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            var verifyFormal = a === 20;\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 20, false, false, false) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-292",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-292.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 20,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 20, false, false, false);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-293-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-293-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', test TypeError is not thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3 and 5b)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false\n            });\n            Object.defineProperty(arguments, \"0\", {\n                value: 20\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 20, false, true, true);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-293-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-293-2.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is defined as unwritable and non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    value: 20\n                });\n            } catch (e) {\n                var verifyFormal = a === 10;\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-293-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-293-3.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is not thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and configurable (10.6 [[DefineOwnProperty]] step 3 and step 5.b)",
    "test": "assertTrue(((function (a, b, c) {\n        Object.defineProperty(arguments, \"0\", {\n            value: 10,\n            writable: false,\n        });\n        Object.defineProperty(arguments, \"0\", {\n            value: 20\n        });\n        var verifyFormal = a === 10;        \n        return dataPropertyAttributesAreCorrect(arguments, \"0\", 20, false, true, true) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-293",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-293.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is defined as non-writable and non-configurable (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    value: 20\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-294-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-294-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and 5b)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    writable: true\n                });\n            } catch (e) {\n                var verifyFormal = a === 10;\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-294",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-294.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    writable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-295-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-295-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                var verifyFormal = a === 10;\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, true, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-295",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-295.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, true, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-296-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-296-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5b)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                var verifyFormal = a === 10;\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-296",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-296.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own data property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-297-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-297-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own accessor property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5a)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc1() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: false,\n                configurable: false\n            });\n            function getFunc2() {\n                return 20;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    get: getFunc2\n                });\n            } catch (e) {\n                var verifyFormal = a === 0;\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc1, undefined, undefined, false, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-297",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-297.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own accessor property of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc1() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: false,\n                configurable: false\n            });\n            function getFunc2() {\n                return 20;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    get: getFunc2\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc1, undefined, undefined, false, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-298-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-298-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own accessor property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Set]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] steps 4 and 5a)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: undefined,\n                enumerable: false,\n                configurable: false\n            });\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    set: setFunc\n                });\n            } catch (e) {\n                var verifyFormal = a === 0;\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, false, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-298",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-298.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own accessor property of 'O', test TypeError is thrown when updating the [[Set]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: undefined,\n                enumerable: false,\n                configurable: false\n            });\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    set: setFunc\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, false, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-299-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-299-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own accessor property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] steps 4 and 5a)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                var verifyFormal = a === 0;\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-299",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-299.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own accessor property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-3.js",
    "description": "Object.defineProperty sets missing attributes to their default values (accessor)(8.12.9 step 4.b.i)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  var getter = function () { return 1; };\n  var desc = { get: getter };\n\n  Object.defineProperty(o, \"foo\", desc);\n\n  var propDesc = Object.getOwnPropertyDescriptor(o, \"foo\");\n\n  if (typeof(propDesc.get) === \"function\" &&  // the getter must be the function that was provided\n      propDesc.get === getter &&\n      propDesc.enumerable   === false &&      // false by default\n      propDesc.configurable === false) {      // false by default\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-30",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-30.js",
    "description": "Object.defineProperty - 'name' is own accessor property without a get function (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"foo\", {\n            set: function () { },\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-300-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-300-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own accessor property of 'O' which is also defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4 and step 5a)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc() {\n                return 0;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                var verifyFormal = a === 0;\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false) && verifyFormal;\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-300",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-300.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own accessor property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is defined as non-configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false);\n            }\n            return false;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-301-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-301-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is an index named property of 'O', and 'desc' is data descriptor, test 'name' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            delete arguments[0];\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            var verifyFormal = a === 0;\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-301",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-301.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an array index named property of 'O' but not defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test 'name' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () { \n            delete arguments[0];\n            Object.defineProperty(arguments, \"0\", {\n                value: 10,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 10, false, false, false);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-302-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-302-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is an index named property of 'O' but not defined in [[ParameterMap]] of 'O', and 'desc' is accessor descriptor, test 'name' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3 and step 5a)",
    "test": "assertTrue(((function (a, b, c) {\n            delete arguments[0];\n            function getFunc() {\n                return 10;\n            }\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: false,\n                configurable: false\n            });\n            var verifyFormal = a === 0;\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", false, false) && verifyFormal;\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() &&\n            fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-302",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-302.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named property of 'O' but not defined in [[ParameterMap]] of 'O', and 'desc' is accessor descriptor, test 'name' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            delete arguments[0];\n            function getFunc() {\n                return 10;\n            }\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: false,\n                configurable: false\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n        }(0, 1, 2))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-303",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-303.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named accessor property of 'O' but not defined in [[ParameterMap]] of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            function getFunc1() {\n                return 10;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: true,\n                configurable: true\n            });\n            function getFunc2() {\n                return 20;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc2,\n                enumerable: false,\n                configurable: false\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc2, undefined, undefined, false, false);\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-304",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-304.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named data property of 'O' but not defined in [[ParameterMap]] of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'name' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 20,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"0\", 20, false, false, false);\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-305",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-305.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named data property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'name' which is not writable and not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 0,\n                writable: false,\n                configurable: false\n            });\n\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    value: 10\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 0, false, false, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-306",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-306.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named data property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 0,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    writable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 0, false, false, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-307",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-307.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named data property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 0,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 0, false, true, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-308",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-308.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named data property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"0\", {\n                value: 0,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && dataPropertyAttributesAreCorrect(arguments, \"0\", 0, false, false, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-309",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-309.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named accessor property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc1() {\n                return 0;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc1,\n                enumerable: false,\n                configurable: false\n            });\n            function getFunc2() {\n                return 10;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    get: getFunc2\n                });\n                return false;\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc1, undefined, undefined, false, false);\n            }\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-31",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-31.js",
    "description": "Object.defineProperty - 'name' is own accessor property without a get function that overrides an inherited accessor property(8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            get: function () { },\n            configurable: true\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n        Object.defineProperty(obj, \"foo\", {\n            set: function () { },\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-310",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-310.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named accessor property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Set]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 0;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                set: undefined,\n                enumerable: false,\n                configurable: false\n            });\n            function setFunc(value) {\n                this.setVerifyHelpProp = value;\n            }\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    set: setFunc\n                });            \n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, false, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-311",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-311.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named accessor property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 0;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-312",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-312.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is an index named accessor property of 'O' but not defined in [[ParameterMap]] of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return 0;\n            }\n            Object.defineProperty(arguments, \"0\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"0\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError && accessorPropertyAttributesAreCorrect(arguments, \"0\", getFunc, undefined, undefined, true, false);\n            }\n            return false;\n        }())));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects() && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-313-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-313-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own property, and 'desc' is data descriptor, test 'P' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1001, true, true, true);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-313",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-313.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is generic property, and 'desc' is data descriptor, test 'P' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1001, true, true, true);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-314-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-314-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is property, and 'desc' is accessor descriptor, test 'P' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc() {\n                return \"getFunctionString\";\n            }\n            function setFunc(value) {\n                this.testgetFunction = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"testgetFunction\", true, true);\n            }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-314",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-314.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is generic property, and 'desc' is accessor descriptor, test 'P' is defined in 'O' with all correct attribute values (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return \"getFunctionString\";\n            }\n            function setFunc(value) {\n                this.testgetFunction = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"testgetFunction\", true, true);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-315-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-315-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own accessor property of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'P' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: function () {\n                    return 1001;\n                },\n                set: function (value) {\n                    this.testgetFunction1 = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            function getFunc() {\n                return \"getFunctionString\";\n            }\n            function setFunc(value) {\n                this.testgetFunction = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: false,\n                configurable: false\n            });\n            var verifyFormal = c === 3;\n            return accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"testgetFunction\", false, false) && verifyFormal;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-315",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-315.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is generic own accessor property of 'O', and 'desc' is accessor descriptor, test updating multiple attribute values of 'P' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: function () {\n                    return 1001;\n                },\n                set: function (value) {\n                    this.testgetFunction1 = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            function getFunc() {\n                return \"getFunctionString\";\n            }\n            function setFunc(value) {\n                this.testgetFunction = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: false,\n                configurable: false\n            });\n            return accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"testgetFunction\", false, false);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-316-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-316-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own data property of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'P' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1002,\n                enumerable: false,\n                configurable: false\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1002, true, false, false);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-316",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-316.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is generic own data property of 'O', and 'desc' is data descriptor, test updating multiple attribute values of 'P' (10.6 [[DefineOwnProperty]] step 3)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1002,\n                enumerable: false,\n                configurable: false\n            });\n            return dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1002, true, false, false);\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-317-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-317-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own data property of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'P' which is not writable and not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    value: 1002\n                });\n            } catch (e) {\n                var verifyFormal = b === 2;\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1001, false, false, false) && verifyFormal;\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-317",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-317.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is generic own data property of 'O', test TypeError is thrown when updating the [[Value]] attribute value of 'P' which is not writable and not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                value: 1001,\n                writable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    value: 1002\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", 1001, false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-318-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-318-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'name' is own data property of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                writable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    writable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-318",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-318.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is generic own data property of 'O', test TypeError is thrown when updating the [[Writable]] attribute value of 'name' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                writable: false,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    writable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-319-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-319-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own data property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, true, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-319",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-319.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is own data property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, true, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-32",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-32.js",
    "description": "Object.defineProperty - 'name' is an inherited accessor property without a get function (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"foo\", {\n            set: function () { },\n            configurable: false\n        });\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n\n        Object.defineProperty(obj, \"foo\", {\n            configurable: true\n        });\n        return obj.hasOwnProperty(\"foo\") && typeof obj.foo === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-320-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-320-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own data property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-320",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-320.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is own data property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            Object.defineProperty(arguments, \"genericProperty\", {\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    dataPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-321-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-321-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            function getFunc() {\n                return \"genericPropertyString\";\n            }\n            function setFunc(value) {\n                this.helpVerifyGet = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    get: function () {\n                        return \"overideGenericPropertyString\";\n                    }\n                });\n            } catch (e) {\n                var verifyFormal = a === 1;\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"helpVerifyGet\", false, false, false) && verifyFormal;\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-321",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-321.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Get]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function getFunc() {\n                return \"genericPropertyString\";\n            }\n            function setFunc(value) {\n                this.helpVerifyGet = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                get: getFunc,\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    get: function () {\n                        return \"overideGenericPropertyString\";\n                    }\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", getFunc, setFunc, \"helpVerifyGet\", false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-322-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-322-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Set]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    set: function (value) {\n                        this.genericPropertyString1 = value;\n                    }\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-322",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-322.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Set]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    set: function (value) {\n                        this.genericPropertyString1 = value;\n                    }\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-323-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-323-1.js",
    "description": "Object.defineProperty - ''O' is an Arguments object of a function that has formal parameters, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                verifyFormal = c === 3;\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", true, false) && verifyFormal;\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-323",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-323.js",
    "description": "Object.defineProperty - ''O' is an Arguments object, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Enumerable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                enumerable: true,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    enumerable: false\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", true, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-324-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-324-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object of a function that has formal parameters, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function (a, b, c) {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-324",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-324.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'P' is own accessor property of 'O', test TypeError is thrown when updating the [[Configurable]] attribute value of 'P' which is not configurable (10.6 [[DefineOwnProperty]] step 4)",
    "test": "assertTrue(((function () {\n            function setFunc(value) {\n                this.genericPropertyString = value;\n            }\n            Object.defineProperty(arguments, \"genericProperty\", {\n                set: setFunc,\n                configurable: false\n            });\n            try {\n                Object.defineProperty(arguments, \"genericProperty\", {\n                    configurable: true\n                });\n            } catch (e) {\n                return e instanceof TypeError &&\n                    accessorPropertyAttributesAreCorrect(arguments, \"genericProperty\", undefined, setFunc, \"genericPropertyString\", false, false, false);\n            }\n            return false;\n        }(1, 2, 3))));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-325-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-325-1.js",
    "description": "Object.defineProperty - 'O' is an Arguments object which created with function take formal parameters, 'name' is own property of [[ParameterMap]] of 'O', test 'name' is deleted if 'name' is configurable and 'desc' is accessor descriptor (10.6 [[DefineOwnProperty]] step 5.a.i)",
    "test": "assertTrue((function testcase() {\n        var argObj = (function (a, b, c) { return arguments; })(1, 2, 3);\n        var accessed = false;\n\n        Object.defineProperty(argObj, 0, {\n            get: function () {\n                accessed = true;\n                return 12;\n            }\n        });\n\n        return argObj[0] === 12 && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.2.3.6-4-325",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-325.js",
    "description": "Object.defineProperty - 'O' is an Arguments object, 'name' is own property of [[ParameterMap]] of 'O', test 'name' is deleted if 'name' is configurable and 'desc' is accessor descriptor (10.6 [[DefineOwnProperty]] step 5.a.i)",
    "test": "assertTrue((function testcase() {\n        var argObj = (function () { return arguments; })(1, 2, 3);\n        var accessed = false;\n\n        Object.defineProperty(argObj, 0, {\n            get: function () {\n                accessed = true;\n                return 12;\n            }\n        });\n\n        return argObj[0] === 12 && accessed;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnSupportsArrayIndexGettersOnObjects())"
   },
   {
    "id": "15.2.3.6-4-326",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-326.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) is writable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-327",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-327.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var property in obj) {\n            if (property === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-328",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-328.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && !afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-329",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-329.js",
    "description": "ES5 Attributes - success to update [[Writable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === true && obj.prop === 2010 && desc2.writable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-33",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-33.js",
    "description": "Object.defineProperty - 'O' is a Function object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var fun = function () { };\n\n        Object.defineProperty(fun, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(fun, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && fun.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-330",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-330.js",
    "description": "ES5 Attributes - success to update [[enumerable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.enumerable === true && obj.prop === 2010 && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-331",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-331.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.configurable === true && obj.prop === 2010 && desc2.configurable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-332",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-332.js",
    "description": "ES5 Attributes - success to update the data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is true) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-333-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-1.js",
    "description": "Object.defineProperty will update [[Value]] attribute of named property 'P' successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'O' is an Object object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-10.js",
    "description": "ES5 Attributes - indexed data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false is writable using simple assignment, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var verifyValue = (obj[0] === 2010);\n        obj[0] = 1001;\n\n        return verifyValue && obj[0] === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-11.js",
    "description": "ES5 Attributes - indexed property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false is writable using simple assignment, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function (x) {\n            return arguments;\n        }(1001));\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var verifyValue = (obj[0] === 2010);\n\n        return verifyValue;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-2.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property 'P' successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'A' is an Array object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-3.js",
    "description": "Object.defineProperty will update [[Value]] attribute of named property 'P' successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'O' is an Arguments object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-4.js",
    "description": "Indexed property 'P' with attributes [[Writable]]: true, [[Enumerable]]:true, [[Configurable]]:false is writable using simple assignment, 'A' is an Array Object",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var verifyValue = (obj[0] === 2010);\n        obj[0] = 1001;\n\n        return verifyValue && obj[0] === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-5.js",
    "description": "ES5 Attributes - named data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false is writable using simple assignment, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var verifyValue = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return verifyValue && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-6.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property 'P' successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'O' is an Object object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-7.js",
    "description": "Object.defineProperty will update [[Value]] attribute of named property 'P' successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'A' is an Array object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"prop\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-8.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property 'P'successfully when [[Configurable]] attribute is false, [[Writable]] attribute is true and 'O' is an Arguments object (8.12.9 - step 10)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333-9.js",
    "description": "Object.defineProperty - Named property 'P' with attributes [[Writable]]: true, [[Enumerable]]:true, [[Configurable]]:false is writable using simple assignment, 'A' is an Array Object",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var verifyValue = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return verifyValue && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-333",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-333.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) is writable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-334",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-334.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-335",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-335.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && obj.prop === 2010 && afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-336",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-336.js",
    "description": "ES5 Attributes - Success to update [[Writable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === true && obj.prop === 2010 && desc2.writable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-337",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-337.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.enumerable === true && obj.prop === 2010 && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-338",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-338.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.configurable === false && obj.prop === 2010 && desc2.configurable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-339-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-339-1.js",
    "description": "Object.defineProperty - Updating indexed data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false to an accessor property does not succeed, 'A' is an Array object (8.12.9 - step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj[0] === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-339-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-339-2.js",
    "description": "Object.defineProperty - Updating named data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false to an accessor property does not succeed, 'O' is an Arguments object (8.12.9 - step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-339-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-339-3.js",
    "description": "Object.defineProperty - Updating named data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false to an accessor property does not succeed, 'A' is an Array object (8.12.9 - step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 &&\n                typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-339-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-339-4.js",
    "description": "Object.defineProperty - Updating indexed data property 'P' with attributes [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: false to an accessor property does not succeed, 'O' is an Arguments object (8.12.9 - step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj[0] === 2010 &&\n                typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-339",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-339.js",
    "description": "ES5 Attributes - fail to update the data property ([[Writable]] is true, [[Enumerable]] is true, [[Configurable]] is false) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-34",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-34.js",
    "description": "Object.defineProperty - 'O' is an Array object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var arrObj = [];\n\n        Object.defineProperty(arrObj, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(arrObj, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && arrObj.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-340",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-340.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) is writable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-341",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-341.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-342",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-342.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && !afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-343",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-343.js",
    "description": "ES5 Attributes - success to update [[Writable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === true && obj.prop === 2010 && desc2.writable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-344",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-344.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.enumerable === false && obj.prop === 2010 && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-345",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-345.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.configurable === true && obj.prop === 2010 && desc2.configurable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-346",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-346.js",
    "description": "ES5 Attributes - success to update the data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is true) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-347",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-347.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) is writable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-348",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-348.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-349",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-349.js",
    "description": "ES5 Attributes - property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && obj.prop === 2010 && afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-35",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-35.js",
    "description": "Object.defineProperty - 'O' is a String object which implements its own [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var str = new String(\"abc\");\n\n        Object.defineProperty(str, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(str, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && str.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-350",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-350.js",
    "description": "ES5 Attributes - fail to update [[Writable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === true && obj.prop === 2010 && desc2.writable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-351",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-351.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.enumerable === false && obj.prop === 2010 && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-352",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-352.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.configurable === false && obj.prop === 2010 && desc2.configurable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-353",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-353.js",
    "description": "ES5 Attributes - fail to update the data property ([[Writable]] is true, [[Enumerable]] is false, [[Configurable]] is false) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-354-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-1.js",
    "description": "Object.defineProperty will update [[Value]] attribute of named property 'P' successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is an Object object (8.12.9 step - Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-10.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property 'P' successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is an Object object (8.12.9 step - Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-11.js",
    "description": "Object.defineProperty will update [[Value]] attribute of named property 'P' successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'A' is an Array object (8.12.9 step - Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"prop\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-12.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is an Arguments object (8.12.9 - step Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-13.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = fnGlobalObject();\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                value: 1001,\n                writable: false,\n                configurable: true\n            });\n\n            Object.defineProperty(obj, \"0\", {\n                value: 1002\n            });\n\n            return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, false, false, true);\n        } finally {\n            delete obj[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-15.js",
    "description": "Object.defineProperty - Named property 'P' with attributes [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true is non-writable using simple assignment, 'A' is an Array object",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var verifyValue = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return verifyValue && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-16.js",
    "description": "ES5 Attributes - property 'P' is an indexed data property with attributes [[Writable]]: false, [[Enumerable]]: true, [[Configurable]] : true) is non-writable using simple assignment, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var valueVerify = (obj[0] === 2010);\n        obj[0] = 1001;\n\n        return valueVerify && obj[0] === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-2.js",
    "description": "Object.defineProperty will update [[Value]] attribute of indexed property 'P' successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'A' is an Array object (8.12.9 step - Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-3.js",
    "description": "Object.defineProperty will update [[Value]] attribute successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is an Arguments object (8.12.9 - step Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1002\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1002, false, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-4.js",
    "description": "Object.defineProperty will update [[Value]] attribute successfully when [[Configurable]] attribute is true and [[Writable]] attribute is false, 'O' is the global object (8.12.9 - step Note)",
    "test": "assertTrue((function testcase() {\n\n        var obj = fnGlobalObject();\n\n        try {\n            Object.defineProperty(obj, \"property\", {\n                value: 1001,\n                writable: false,\n                configurable: true\n            });\n\n            Object.defineProperty(obj, \"property\", {\n                value: 1002\n            });\n\n            return dataPropertyAttributesAreCorrect(obj, \"property\", 1002, false, false, true);\n        } finally {\n            delete obj.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-6.js",
    "description": "Object.defineProperty - Indexed property 'P' with attributes [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true is non-writable using simple assignment, 'A' is an Array object",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var verifyValue = (obj[0] === 2010);\n        obj[0] = 1001;\n\n        return verifyValue && obj[0] === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-7.js",
    "description": "ES5 Attributes - property 'P' with attributes [[Writable]]: false, [[Enumerable]]: true, [[Configurable]] : true) is non-writable using simple assignment, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var valueVerify = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return valueVerify && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354-8.js",
    "description": "ES5 Attributes - property 'P' with attributes [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true is non-writable using simple assignment, 'O' is the global object",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 2010,\n                writable: false,\n                enumerable: true,\n                configurable: true\n            });\n            var valueVerify = (obj.prop === 2010);\n            obj.prop = 1001;\n\n            return valueVerify && obj.prop === 2010;\n        } finally {\n            delete obj.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-354",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-354.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) is unwritable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-355",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-355.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var property in obj) {\n            if (property === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-356",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-356.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && !afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-357",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-357.js",
    "description": "ES5 Attributes - success to update [[Writable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: true\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === false && obj.prop === 2010 && desc2.writable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-358",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-358.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.enumerable === true && obj.prop === 2010 && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-359",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-359.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.configurable === true && obj.prop === 2010 && desc2.configurable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-36",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-36.js",
    "description": "Object.defineProperty - 'O' is a Boolean object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var obj = new Boolean(true);\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-360-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-1.js",
    "description": "ES5 Attributes - Updating indexed data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'A' is an Array object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n            desc2.enumerable === true && desc2.configurable === true &&\n            obj[0] === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-2.js",
    "description": "ES5 Attributes - Updating data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is an Arguments object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n            desc2.enumerable === true && desc2.configurable === true &&\n            obj.prop === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-3.js",
    "description": "ES5 Attributes - Updating data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 2010,\n                writable: false,\n                enumerable: true,\n                configurable: true\n            });\n            var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            function getFunc() {\n                return 20;\n            }\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n                desc2.enumerable === true && desc2.configurable === true &&\n                obj.prop === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n        } finally {\n            delete obj.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-5.js",
    "description": "ES5 Attributes - Updating named data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'A' is an Array object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n            desc2.enumerable === true && desc2.configurable === true &&\n            obj.prop === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-6.js",
    "description": "ES5 Attributes - Updating indexed data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is an Arguments object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        Object.defineProperty(obj, \"0\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n            desc2.enumerable === true && desc2.configurable === true &&\n            obj[0] === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360-7.js",
    "description": "ES5 Attributes - Updating indexed data property 'P' whose attributes are [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: true to an accessor property, 'O' is the global object (8.12.9 - step 9.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n        try {\n            Object.defineProperty(obj, \"0\", {\n                value: 2010,\n                writable: false,\n                enumerable: true,\n                configurable: true\n            });\n            var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            function getFunc() {\n                return 20;\n            }\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc\n            });\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\") &&\n                desc2.enumerable === true && desc2.configurable === true &&\n                obj[0] === 20 && typeof desc2.set === \"undefined\" && desc2.get === getFunc;\n        } finally {\n            delete obj[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-360",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-360.js",
    "description": "ES5 Attributes - success to update the data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is true) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.hasOwnProperty(\"get\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-361",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-361.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) is unwritable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-362",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-362.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var property in obj) {\n            if (property === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-363",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-363.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && obj.prop === 2010 && afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-364",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-364.js",
    "description": "ES5 Attributes - fail to update [[Writable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                writable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.writable === false && obj.prop === 2010 && desc2.writable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-365",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-365.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.enumerable === true && obj.prop === 2010 && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-366",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-366.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.configurable === false && obj.prop === 2010 && desc2.configurable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-367",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-367.js",
    "description": "ES5 Attributes - fail to update the data property ([[Writable]] is false, [[Enumerable]] is true, [[Configurable]] is false) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-368",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-368.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) is unwritable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-369",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-369.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-37",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-37.js",
    "description": "Object.defineProperty - 'O' is a Number object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var obj = new Number(-2);\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && obj.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-370",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-370.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && !afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-371",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-371.js",
    "description": "ES5 Attributes - success to update [[Writable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            writable: true\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.writable === false && obj.prop === 2010 && desc2.writable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-372",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-372.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.enumerable === false && obj.prop === 2010 && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-373",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-373.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc1.configurable === true && obj.prop === 2010 && desc2.configurable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-374",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-374.js",
    "description": "ES5 Attributes - success to update the data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is true) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        function getFunc() {\n            return 20;\n        }\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"value\") && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-375",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-375.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) is unwritable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = (obj.prop === 2010);\n        obj.prop = 1001;\n\n        return propertyDefineCorrect && obj.prop === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-376",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-376.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-377",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-377.js",
    "description": "ES5 Attributes - property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var beforeDelete = obj.hasOwnProperty(\"prop\");\n        delete obj.prop;\n        var afterDelete = obj.hasOwnProperty(\"prop\");\n        return beforeDelete && obj.prop === 2010 && afterDelete;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-378",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-378.js",
    "description": "ES5 Attributes - fail to update [[Writable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                writable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.writable === false && obj.prop === 2010 && desc2.writable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-379",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-379.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.enumerable === false && obj.prop === 2010 && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-38",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-38.js",
    "description": "Object.defineProperty - 'O' is the Math object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Math, \"foo\", {\n                value: 12,\n                configurable: true\n            });\n        \n            return dataPropertyAttributesAreCorrect(Math, \"foo\", 12, false, false, true);\n        } finally {\n            delete Math.foo;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-380",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-380.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && desc1.configurable === false && obj.prop === 2010 && desc2.configurable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-381",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-381.js",
    "description": "ES5 Attributes - fail to update the data property ([[Writable]] is false, [[Enumerable]] is false, [[Configurable]] is false) to an accessor property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 2010,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        function getFunc() {\n            return 20;\n        }\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return propertyDefineCorrect && desc1.value === 2010 && obj.prop === 2010 && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-382",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-382.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a number",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === 1001 && desc.value === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-383",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-383.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a string",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: \"ThisIsAString\"\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === \"ThisIsAString\" && desc.value === \"ThisIsAString\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-384",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-384.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a boolean",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: false\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === false && desc.value === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-385",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-385.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a generic object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var tempObj = { testproperty: 100 };\n\n        Object.defineProperty(obj, \"prop\", {\n            value: tempObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === tempObj && desc.value === tempObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-386",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-386.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is an Array object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var arrObj = [];\n\n        Object.defineProperty(obj, \"prop\", {\n            value: arrObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === arrObj && desc.value === arrObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-387",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-387.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a String object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var strObj = new String();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: strObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === strObj && desc.value === strObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-388",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-388.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a Number object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var numObj = new Number();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: numObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === numObj && desc.value === numObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-389",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-389.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a Boolean Object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var boolObj = new Boolean();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: boolObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === boolObj && desc.value === boolObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-39",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-39.js",
    "description": "Object.defineProperty - 'O' is a Date object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var desc = new Date();\n\n        Object.defineProperty(desc, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(desc, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && desc.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-390",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-390.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a Function object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var funObj = function () { };\n\n        Object.defineProperty(obj, \"prop\", {\n            value: funObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === funObj && desc.value === funObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-391",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-391.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is an Error object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var errObj = new Error();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: errObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === errObj && desc.value === errObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-392",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-392.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a Date object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var dateObj = new Date();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: dateObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === dateObj && desc.value === dateObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-393",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-393.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is a RegExp object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var regObj = new RegExp();\n\n        Object.defineProperty(obj, \"prop\", {\n            value: regObj\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === regObj && desc.value === regObj;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-394",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-394.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: undefined\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && typeof obj.prop === \"undefined\" && typeof desc.value === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-395",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-395.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is null",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: null\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === null && desc.value === null;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-396",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-396.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is NaN",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: NaN\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop !== obj.prop && desc.value !== desc.value;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-397",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-397.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is Infinity",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: Infinity\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === Infinity && desc.value === Infinity;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-398",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-398.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is -Infinity",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: -Infinity\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === -Infinity && desc.value === -Infinity;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-399",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-399.js",
    "description": "ES5 Attributes - [[Value]] attribute of data property is the global object",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            value: fnGlobalObject()\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.prop === fnGlobalObject() && desc.value === fnGlobalObject();\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-4.js",
    "description": "Object.defineProperty defines a data property if given a generic desc(8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n  \n  var desc = {};\n  Object.defineProperty(o, \"foo\", desc);\n\n  var propDesc = Object.getOwnPropertyDescriptor(o, \"foo\");\n  if (propDesc.value        === undefined &&  // this is the value that was set\n      propDesc.writable     === false &&      // false by default\n      propDesc.enumerable   === false &&      // false by default\n      propDesc.configurable === false) {      // false by default\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-40",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-40.js",
    "description": "Object.defineProperty - 'O' is a RegExp object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var desc = new RegExp();\n\n        Object.defineProperty(desc, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(desc, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && desc.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-402",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-402.js",
    "description": "ES5 Attributes - [[Value]] attribute of inherited property of [[Prototype]] internal property is correct (String instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(String.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var strObj = new String();\n\n            return !strObj.hasOwnProperty(\"prop\") && strObj.prop === 1001;\n        } finally {\n            delete String.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-403",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-403.js",
    "description": "ES5 Attributes - Successfully add a property to an object when the object's prototype has a property with same name and [[Writable]] attribute is set to true (Array instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var arrObj = [];\n            arrObj.prop = 1002;\n\n            return arrObj.hasOwnProperty(\"prop\") && arrObj.prop === 1002;\n        } finally {\n            delete Array.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-404",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-404.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to true is enumerable (Boolean instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Boolean.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var boolObj = new Boolean();\n\n            var verifyEnumerable = false;\n            for (var p in boolObj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !boolObj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete Boolean.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-405",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-405.js",
    "description": "ES5 Attributes - Failed to add a property to an object when the object's object has a property with same name and [[Writable]] attribute is set to false (Number instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Number.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n            var numObj = new Number();\n            numObj.prop = 1002;\n\n            return !numObj.hasOwnProperty(\"prop\") && numObj.prop === 1001;\n        } finally {\n            delete Number.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-406",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-406.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to false is non-enumerable (Function instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n            var funObj = function () { };\n\n            var verifyEnumerable = false;\n            for (var p in funObj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !funObj.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-407",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-407.js",
    "description": "ES5 Attributes - [[Value]] attribute of inherited property of [[Prototype]] internal property is correct (Error Instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Error.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var errObj = new Error();\n\n            return !errObj.hasOwnProperty(\"prop\") && errObj.prop === 1001;\n        } finally {\n            delete Error.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-408",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-408.js",
    "description": "ES5 Attributes - Successfully add a property to an object when the object's prototype has a property with same name and [[Writable]] attribute is set to true (Date instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Date.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var dateObj = new Date();\n            dateObj.prop = 1002;\n\n            return dateObj.hasOwnProperty(\"prop\") && dateObj.prop === 1002;\n        } finally {\n            delete Date.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-409",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-409.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to false is enumerable (RegExp instance)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(RegExp.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            var regObj = new RegExp();\n\n            var verifyEnumerable = false;\n            for (var p in regObj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !regObj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete RegExp.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-41",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-41.js",
    "description": "Object.defineProperty - 'O' is the JSON object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.defineProperty(JSON, \"foo\", {\n                value: 12,\n                configurable: true\n            });\n\n            return dataPropertyAttributesAreCorrect(JSON, \"foo\", 12, false, false, true);\n        } finally {\n            delete JSON.foo;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-410",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-410.js",
    "description": "ES5 Attributes - Failed to add a property to an object when the object's prototype has a property with the same name and [[Writable]] set to false (JSON)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Object.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n            JSON.prop = 1002;\n\n            return !JSON.hasOwnProperty(\"prop\") && JSON.prop === 1001;\n        } finally {\n            delete Object.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-411",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-411.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to false is non-enumerable (Math)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Object.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n\n            var verifyEnumerable = false;\n            for (var p in Math) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !Math.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Object.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-412",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-412.js",
    "description": "ES5 Attributes - [[Value]] field of inherited property of [[Prototype]] internal property is correct(Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        Object.defineProperty(appointment, \"startTime\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(appointment, \"name\", {\n            value: \"NAME\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            value: \"In-person meeting\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"NAME\" &&\n            teamMeeting.startTime === 1001 &&\n            teamMeeting.conferenceCall === \"In-person meeting\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-413",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-413.js",
    "description": "ES5 Attributes - Successfully add a property to an object when the object's prototype has a property with the same name and [[Writable]] set to true (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        Object.defineProperty(appointment, \"startTime\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(appointment, \"name\", {\n            value: \"NAME\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            value: \"In-person meeting\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n        teamMeeting.name = \"Team Meeting\";\n        var dateObj = new Date(\"10/31/2010 08:00\");\n        teamMeeting.startTime = dateObj;\n        teamMeeting.conferenceCall = \"4255551212\";\n\n        var hasOwnProperty = teamMeeting.hasOwnProperty(\"name\") &&\n            teamMeeting.hasOwnProperty(\"startTime\") &&\n            teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"Team Meeting\" &&\n            teamMeeting.startTime === dateObj &&\n            teamMeeting.conferenceCall === \"4255551212\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-414",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-414.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to true is enumerable (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = new Object();\n\n        Object.defineProperty(appointment, \"startTime\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(appointment, \"name\", {\n            value: \"NAME\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            value: \"In-person meeting\",\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var verifyTimeProp = false;\n        var verifyNameProp = false;\n        var verifyCallProp = false;\n        for (var p in teamMeeting) {\n            if (p === \"startTime\") {\n                verifyTimeProp = true;\n            }\n            if (p === \"name\") {\n                verifyNameProp = true;\n            }\n            if (p === \"conferenceCall\") {\n                verifyCallProp = true;\n            }\n        }\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty(\"conferenceCall\");\n\n        return hasOwnProperty && verifyTimeProp && verifyNameProp && verifyCallProp;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-415",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-415.js",
    "description": "ES5 Attributes - Failed to add properties to an object when the object's prototype has properties with the same name and [[Writable]] set to false (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = new Object();\n\n        Object.defineProperty(appointment, \"startTime\", {\n            value: 1001,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(appointment, \"name\", {\n            value: \"NAME\",\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            value: \"In-person meeting\",\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n        teamMeeting.name = \"Team Meeting\";\n        var dateObj = new Date(\"10/31/2010 08:00\");\n        teamMeeting.startTime = dateObj;\n        teamMeeting.conferenceCall = \"4255551212\";\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"NAME\" &&\n            teamMeeting.startTime === 1001 &&\n            teamMeeting.conferenceCall === \"In-person meeting\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-416",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-416.js",
    "description": "ES5 Attributes - Inherited properties whose [[Enumerable]] attribute is set to false is non-enumerable (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        Object.defineProperty(appointment, \"startTime\", {\n            value: 1001,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(appointment, \"name\", {\n            value: \"NAME\",\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            value: \"In-person meeting\",\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var verifyTimeProp = false;\n        var verifyNameProp = false;\n        var verifyCallProp = false;\n        for (var p in teamMeeting) {\n            if (p === \"startTime\") {\n                verifyTimeProp = true;\n            }\n            if (p === \"name\") {\n                verifyNameProp = true;\n            }\n            if (p === \"conferenceCall\") {\n                verifyCallProp = true;\n            }\n        }\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty(\"conferenceCall\");\n\n        return hasOwnProperty && !verifyTimeProp && !verifyNameProp && !verifyCallProp;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-417",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-417.js",
    "description": "ES5 Attributes - [[Value]] attribute of inherited property of [[Prototype]] internal property is correct(Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n\n            return !obj.hasOwnProperty(\"prop\") && obj.prop === 1001;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-418",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-418.js",
    "description": "ES5 Attributes - Successfully add a property to an object when the object's prototype has a property with the same name and [[Writable]] set to true (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            obj.prop = 1002;\n\n            return obj.hasOwnProperty(\"prop\") && obj.prop === 1002;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-419",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-419.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to true is enumerable (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            var verifyEnumerable = false;\n            for (var p in obj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !obj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-42",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-42.js",
    "description": "Object.defineProperty - 'O' is an Error object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var desc = new Error();\n\n        Object.defineProperty(desc, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(desc, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && desc.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-420",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-420.js",
    "description": "ES5 Attributes - Failed to add a property to an object when the object's prototype has a property with the same name and [[Writable]] set to false(Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            obj.prop = 1002;\n\n            return !obj.hasOwnProperty(\"prop\") && obj.prop === 1001;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-421",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-421.js",
    "description": "ES5 Attributes - Inherited property whose [[Enumerable]] attribute is set to false is non-enumerable (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                value: 1001,\n                writable: false,\n                enumerable: false,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            var verifyEnumerable = false;\n            for (var p in obj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !obj.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-422",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-422.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-423",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-423.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-424",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-424.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-425",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-425.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-426",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-426.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var result2 = obj.prop === 1001;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && typeof desc1.get === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-427",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-427.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc1.set === \"undefined\" && desc2.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-428",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-428.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return result1 && !result2 && desc1.enumerable === true && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-429",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-429.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-43",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-43.js",
    "description": "Object.defineProperty - 'O' is an Arguments object which implements its own [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        var argObj = (function () { return arguments; })();\n\n        Object.defineProperty(argObj, \"foo\", {\n            value: 12,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(argObj, \"foo\", {\n                value: 11,\n                configurable: true\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && argObj.foo === 12;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-430",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-430.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-431",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-431.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-432",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-432.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-433",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-433.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-434",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-434.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-435",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-435.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = typeof obj.prop === \"undefined\";\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return result1 && result2 && typeof desc1.get === \"undefined\" && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-436",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-436.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: setFunc\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return typeof desc1.set === \"undefined\" && typeof desc2.set === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-437",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-437.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return result1 && result2 && desc1.enumerable === true && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-438",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-438.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-439",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-439.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-440",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-440.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-441",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-441.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-442",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-442.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-443",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-443.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-444",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-444.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var result2 = obj.prop === 1001;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && typeof desc1.get === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-445",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-445.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        obj.prop = \"overrideData\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return typeof desc1.set === \"undefined\" && propertyDefineCorrect && desc2.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-446",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-446.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return !result1 && result2 && desc1.enumerable === false && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-447",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-447.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-448",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-448.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-449",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-449.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-45",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-45.js",
    "description": "Object.defineProperty - 'O' is the global object that uses Object's [[GetOwnProperty]] method to access the 'name' property (8.12.9 step 1)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(fnGlobalObject(), \"foo\", {\n                value: 12,\n                configurable: true\n            });\n\n            return dataPropertyAttributesAreCorrect(fnGlobalObject(), \"foo\", 12, false, false, true);\n        } finally {\n            delete fnGlobalObject().foo;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-450",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-450.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-451",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-451.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-452",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-452.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-453",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-453.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = typeof obj.prop === \"undefined\";\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return result1 && result2 && typeof desc1.get === \"undefined\" && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-454",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-454.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: setFunc\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            return typeof desc1.set === \"undefined\" && typeof desc2.set === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-455",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-455.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return !result1 && !result2 && desc1.enumerable === false && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-456",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-456.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-457",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-457.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is undefined, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-458",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-458.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-459",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-459.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-46",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-46.js",
    "description": "Object.defineProperty - 'name' is defined as data property if 'name' property doesn't exist in 'O' and 'desc' is generic descriptor (8.12.9 step 4.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            enumerable: true\n        });\n\n        var isEnumerable = false;\n        for (var item in obj) {\n            if (obj.hasOwnProperty(item) && item === \"property\") {\n                isEnumerable = true;\n            }\n        }\n\n        return obj.hasOwnProperty(\"property\") && isEnumerable;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-460",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-460.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-461",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-461.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-462",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-462.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var result2 = obj.prop === 1001;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && typeof desc1.get === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-463",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-463.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: undefined\n        });\n\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.set === setFunc && typeof desc2.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-464",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-464.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return result1 && !result2 && desc1.enumerable === true && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-465",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-465.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-466",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-466.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-467",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-467.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-468",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-468.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-469",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-469.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-47",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-47.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', [[Value]] of 'name' property is set as undefined if it is absent in data descriptor 'desc' (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            writable: true,\n            enumerable: true,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", undefined, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-470",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-470.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-471",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-471.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = typeof obj.prop === \"undefined\";\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && typeof desc1.get === \"undefined\" && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-472",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-472.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.set === setFunc && desc2.set === setFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-473",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-473.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return result1 && result2 && desc1.enumerable === true && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-474",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-474.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-475",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-475.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-476",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-476.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-477",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-477.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-478",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-478.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-479",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-479.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-48",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-48.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Writable]] of 'name' property of 'Attributes' is set as false value if absent in data descriptor 'desc' (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            enumerable: true,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1001, false, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-480",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-480.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var result2 = obj.prop === 1001;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && typeof desc1.get === \"undefined\" && desc2.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-481",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-481.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: undefined\n        });\n\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.set === setFunc && typeof desc2.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-482",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-482.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return !result1 && result2 && desc1.enumerable === false && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-483",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-483.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-484",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-484.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-485",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-485.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-486",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-486.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-487",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-487.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-488",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-488.js",
    "description": "ES5 Attributes - property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-489",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-489.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var result1 = typeof obj.prop === \"undefined\";\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = typeof obj.prop === \"undefined\";\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && typeof desc1.get === \"undefined\" && typeof desc2.get === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-49",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-49.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Enumerable]] of 'name' property of 'Attributes' is set as false value if absent in data descriptor 'desc' (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: true,\n            configurable: true\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-490",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-490.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.set === setFunc && desc2.set === setFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-491",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-491.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return !result1 && !result2 && desc1.enumerable === false && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-492",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-492.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-493",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-493.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is undefined, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-494",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-494.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-495",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-495.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-496",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-496.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-497",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-497.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-498",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-498.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined\n        });\n\n        var result2 = typeof obj.prop === \"undefined\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && desc1.get === getFunc && typeof desc2.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-499",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-499.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        obj.prop = \"overrideData\";\n        return typeof desc1.set === \"undefined\" && desc2.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-5.js",
    "description": "Object.defineProperty is no-op if current and desc are the same data desc",
    "test": "assertTrue((function testcase() {\n  function sameDataDescriptorValues(d1, d2) {\n    return (d1.value === d2.value &&\n            d1.enumerable === d2.enumerable &&\n            d1.writable === d2.writable &&\n            d1.configurable === d2.configurable);\n  }\n\n  var o = {};\n\n  // create a data valued property with the following attributes:\n  // value: 101, enumerable: true, writable: true, configurable: true\n  o[\"foo\"] = 101;\n\n  // query for, and save, the desc. A subsequent call to defineProperty\n  // with the same desc should not disturb the property definition.\n  var d1 = Object.getOwnPropertyDescriptor(o, \"foo\");  \n\n  // now, redefine the property with the same descriptor\n  // the property defintion should not get disturbed.\n  var desc = { value: 101, enumerable: true, writable: true, configurable: true };\n  Object.defineProperty(o, \"foo\", desc);\n\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\"); \n\n  if (sameDataDescriptorValues(d1, d2) === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-50",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-50.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Configurable]] of 'name' property is set as false if it is absent in data descriptor 'desc' (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: true,\n            enumerable: true\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-500",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-500.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is  Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return result1 && !result2 && desc1.enumerable === true && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-501",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-501.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-502",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-502.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-503",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-503.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-504",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-504.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-505",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-505.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-506",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-506.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-507",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-507.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = obj.prop === 1001;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && desc1.get === getFunc && desc2.get === getFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-508",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-508.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: setFunc\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return typeof desc1.set === \"undefined\" && typeof desc2.set === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-509",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-509.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return result1 && result2 && desc1.enumerable === true && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-51",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-51.js",
    "description": "Object.defineProperty - desc is data descriptor, test updating all attribute values of 'name' (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = { \"property\": 1 }; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"property\", {\n            value: 1001,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", 1001, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-510",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-510.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-511",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-511.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is true, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-512",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-512.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-513",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-513.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-514",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-514.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-515",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-515.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-516",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-516.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined\n        });\n\n        var result2 = typeof obj.prop === \"undefined\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && desc1.get === getFunc && typeof desc2.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-517",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-517.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        obj.prop = \"overrideData\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return typeof desc1.set === \"undefined\" && propertyDefineCorrect && desc2.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-518",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-518.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return !result1 && result2 && desc1.enumerable === false && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-519",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-519.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-52",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-52.js",
    "description": "Object.defineProperty - 'desc' is generic descriptor without any attribute, test 'name' is defined in 'obj' with all default attribute values (8.12.9 step 4.a.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {});\n\n        return dataPropertyAttributesAreCorrect(obj, \"property\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-520",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-520.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-521",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-521.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-522",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-522.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is undefined",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-523",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-523.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-524",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-524.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-525",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-525.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = obj.prop === 1001;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && desc1.get === getFunc && desc2.get === getFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-526",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-526.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: setFunc\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return typeof desc1.set === \"undefined\" && typeof desc2.set === \"undefined\" && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-527",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-527.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return !result1 && !result2 && desc1.enumerable === false && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-528",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-528.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-529",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-529.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is a Function, [[Set]] is undefined, [[Enumerable]] is false, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: undefined,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-53",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-53.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Get]] of 'name' property is set as undefined if it is absent in accessor descriptor 'desc' (8.12.9 step 4.b)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var setFunc = function (value) {\n            obj.setVerifyHelpProp = value;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", undefined, setFunc, \"setVerifyHelpProp\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-530",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-530.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-1.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is an Object object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-10.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is an Object object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"0\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-11.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property 'P' successfully when [[Configurable]] attribute is true, 'A' is an Array object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"prop\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"prop\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-12.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property successfully when [[Configurable]] attribute is true, 'O' is an Arguments object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"0\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-13.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = fnGlobalObject();\n        try {\n            obj.verifySetFunction = \"data\";\n            Object.defineProperty(obj, \"0\", {\n                get: function () {\n                    return obj.verifySetFunction;\n                },\n                set: function (value) {\n                    obj.verifySetFunction = value;\n                },\n                configurable: true\n            });\n\n            obj.verifySetFunction1 = \"data1\";\n            var getFunc = function () {\n                return obj.verifySetFunction1;\n            };\n            var setFunc = function (value) {\n                obj.verifySetFunction1 = value;\n            };\n\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc,\n                set: setFunc\n            });\n\n            return accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n        } finally {\n            delete obj[0];\n            delete obj.verifySetFunction;\n            delete obj.verifySetFunction1;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-15.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' using simple assignment is successful, 'A' is an Array object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n        var getFunc = function () {\n            return verifySetFunc;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj.prop === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-16.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' using simple assignment, 'O' is an Arguments object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n        var getFunc = function () {\n            return verifySetFunc;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj[0] = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj[0] === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-17.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' using simple assignment is successful, 'O' is the global object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n        try {\n            obj.verifySetFunc = \"data\";\n            var setFunc = function (value) {\n                obj.verifySetFunc = value;\n            };\n            var getFunc = function () {\n                return obj.verifySetFunc;\n            };\n\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n\n            obj[0] = \"overrideData\";\n            var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n            var desc = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            return propertyDefineCorrect && desc.set === setFunc && obj[0] === \"overrideData\";\n        } finally {\n            delete obj[0];\n            delete obj.verifySetFunc;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-2.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of indexed accessor property 'P' successfully when [[Configurable]] attribute is true, 'A' is an Array object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = [];\n\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"0\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-3.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property successfully when [[Configurable]] attribute is true, 'O' is an Arguments object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunction = \"data\";\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return obj.verifySetFunction;\n            },\n            set: function (value) {\n                obj.verifySetFunction = value;\n            },\n            configurable: true\n        });\n\n        obj.verifySetFunction1 = \"data1\";\n        var getFunc = function () {\n            return obj.verifySetFunction1;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction1 = value;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-4.js",
    "description": "Object.defineProperty will update [[Get]] and [[Set]] attributes of named accessor property 'P' successfully when [[Configurable]] attribute is true, 'O' is the global object (8.12.9 step 11)",
    "test": "assertTrue((function testcase() {\n\n        var obj = fnGlobalObject();\n        try {\n            obj.verifySetFunction = \"data\";\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return obj.verifySetFunction;\n                },\n                set: function (value) {\n                    obj.verifySetFunction = value;\n                },\n                configurable: true\n            });\n\n            obj.verifySetFunction1 = \"data1\";\n            var getFunc = function () {\n                return obj.verifySetFunction1;\n            };\n            var setFunc = function (value) {\n                obj.verifySetFunction1 = value;\n            };\n\n            Object.defineProperty(obj, \"property\", {\n                get: getFunc,\n                set: setFunc\n            });\n\n            return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction1\", false, true);\n        } finally {\n            delete obj.property;\n            delete obj.verifySetFunction;\n            delete obj.verifySetFunction1;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-6.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' without [[Set]] using simple assignment is failed, 'A' is an Array object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        var verifySetFunc = \"data\";\n        var getFunc = function () {\n            return verifySetFunc;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj[0] = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\" && obj[0] === \"data\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-7.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' without [[Set]] using simple assignment is failed, 'O' is an Arguments object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        var verifySetFunc = \"data\";\n        var getFunc = function () {\n            return verifySetFunc;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && typeof desc.set === \"undefined\" && obj.prop === \"data\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531-8.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' without [[Set]] using simple assignment is failed, 'O' is the global object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n        try {\n            obj.verifySetFunc = \"data\";\n            var getFunc = function () {\n                return obj.verifySetFunc;\n            };\n\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc,\n                enumerable: true,\n                configurable: true\n            });\n\n            obj.prop = \"overrideData\";\n            var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n            var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return propertyDefineCorrect && typeof desc.set === \"undefined\" && obj.prop === \"data\";\n        } finally {\n            delete obj.prop;\n            delete obj.verifySetFunc;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-531",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-531.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-532",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-532.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-533",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-533.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-534",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-534.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined\n        });\n\n        var result2 = typeof obj.prop === \"undefined\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && desc1.get === getFunc && typeof desc2.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-535",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-535.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: undefined\n        });\n\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.set === setFunc && typeof desc2.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-536",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-536.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: false\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return result1 && !result2 && desc1.enumerable === true && desc2.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-537",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-537.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-1.js",
    "description": "ES5 Attributes - Updating an indexed 'P' whose [[Configurable]] attribute is true to a data property is successful, 'A' is an Array object (8.12.9 - step 9.c.i)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n            typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n            dataPropertyAttributesAreCorrect(obj, \"0\", 1001, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-2.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n            typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n            dataPropertyAttributesAreCorrect(obj, \"prop\", 1001, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-3.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n                typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n                dataPropertyAttributesAreCorrect(obj, \"prop\", 1001, false, true, true);\n        } finally {\n            delete obj.prop;\n            delete obj.verifySetFunc;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-5.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'A' is an Array object (8.12.9 - step 9.c.i)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\"); \n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n            typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n            dataPropertyAttributesAreCorrect(obj, \"prop\", 1001, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-6.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is an Arguments object",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n            typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n            dataPropertyAttributesAreCorrect(obj, \"0\", 1001, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538-7.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is true to a data property is successful, 'O' is the global object",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: getFunc,\n                set: setFunc,\n                enumerable: true,\n                configurable: true\n            });\n            var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            Object.defineProperty(obj, \"0\", {\n                value: 1001\n            });\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n                typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n                dataPropertyAttributesAreCorrect(obj, \"0\", 1001, false, true, true);\n        } finally {\n            delete obj[0];\n            delete obj.verifySetFunc;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-538",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-538.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: true\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\") &&\n            typeof desc2.get === \"undefined\" && typeof desc2.get === \"undefined\" &&\n            dataPropertyAttributesAreCorrect(obj, \"prop\", 1001, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-539",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-539.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-54",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-54.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Set]] of 'name' property of 'Attributes' is set as undefined value if absent in accessor descriptor 'desc' (8.12.9 step 4.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return \"property\";\n            },\n            enumerable: false,\n            configurable: false\n        });\n\n\n        if (obj.property !== \"property\") {\n            return false;\n        }\n        var desc = Object.getOwnPropertyDescriptor(obj, \"property\");\n        if (typeof desc.set !== \"undefined\") {\n            return false;\n        }\n        for (var p in obj) {\n            if (p === \"property\") {\n                return false;\n            }\n        }\n        delete obj.property;\n        if (!obj.hasOwnProperty(\"property\")) {\n            return false;\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-1.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of a named accessor property 'P' whose [[Configurable]] attribute is false and throws TypeError exception, 'O' is an Object object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"property\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-10.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' using simple assignment is successful, 'O' is an Arguments object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj[0] = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj.verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-2.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of an indexed property 'P' whose [[Configurable]] attribute is false and throws TypeError exception, 'A' is an Array object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-3.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of a named accessor property 'P' whose [[Configurable]] attribute is false, 'O' is an Arguments object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"property\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-4.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' using simple assignment is successful, 'A' is an Array object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj[0] = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"0\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj.verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-5.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' using simple assignment is successful, 'O' is an Arguments object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj.verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-6.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of an indexed accessor property 'P' whose [[Configurable]] attribute is false and throws TypeError exception, 'O' is an Object object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-7.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of a named property 'P' whose [[Configurable]] attribute is false and throws TypeError exception, 'A' is an Array object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"prop\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"prop\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-8.js",
    "description": "Object.defineProperty fails to update [[Get]] and [[Set]] attributes of an indexed accessor property 'P' whose [[Configurable]] attribute is false, 'O' is an Arguments object (8.12.9 step 11.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunction = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunction;\n        };\n        var setFunc = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        var result = false;\n        try {\n            Object.defineProperty(obj, \"0\", {\n                get: function () {\n                    return 100;\n                }\n            });\n        } catch (e) {\n            result = e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                set: function (value) {\n                    obj.verifySetFunction1 = value;\n                }\n            });\n        } catch (e1) {\n            return result && e1 instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunction\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540-9.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' using simple assignment is successful, 'A' is an Array object (8.12.5 step 5.b)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && obj.verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-540",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-540.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-541",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-541.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return propertyDefineCorrect && desc.enumerable === true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-542",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-542.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-543",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-543.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = obj.prop === 1001;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && desc1.get === getFunc && desc2.get === getFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-544",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-544.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.set === setFunc && desc2.set === setFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-545",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-545.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: false\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return result1 && result2 && desc1.enumerable === true && desc2.enumerable === true && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-546",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-546.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-547-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-547-1.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is false to a data property does not succeed, 'A' is an Array object (8.12.9 step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n        \n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunc\", true, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-547-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-547-2.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is false to a data property does not succeed, 'A' is an Arguments object (8.12.9 step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"prop\", getFunc, setFunc, \"verifySetFunc\", true, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-547-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-547-3.js",
    "description": "ES5 Attributes - Updating a named accessor property 'P' whose [[Configurable]] attribute is false to a data property does not succeed, 'A' is an Array object (8.12.9 step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = [];\n        \n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"prop\", getFunc, setFunc, \"verifySetFunc\", true, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-547-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-547-4.js",
    "description": "ES5 Attributes - Updating an indexed accessor property 'P' whose [[Configurable]] attribute is false to a data property does not succeed, 'A' is an Arguments object (8.12.9 step 9.a)",
    "test": "assertTrue((function testcase() {\n        var obj = (function () {\n            return arguments;\n        }());\n\n        obj.verifySetFunc = \"data\";\n        var getFunc = function () {\n            return obj.verifySetFunc;\n        };\n\n        var setFunc = function (value) {\n            obj.verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"0\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n        try {\n            Object.defineProperty(obj, \"0\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"0\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"0\", getFunc, setFunc, \"verifySetFunc\", true, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-547",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-547.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is true, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: true,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-548",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-548.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-549",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-549.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-55",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-55.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Enumerable]] of 'name' property of 'Attributes' is set as false value if absent in accessor descriptor 'desc' (8.12.9 step 4.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var setFunc = function (value) {\n            obj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () {\n            return 10;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            set: setFunc,\n            get: getFunc,\n            configurable: true\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-550",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-550.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-551",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-551.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) is deletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === true && !obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-552",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-552.js",
    "description": "ES5 Attributes - success to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            get: undefined\n        });\n\n        var result2 = typeof obj.prop === \"undefined\";\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return result1 && result2 && desc1.get === getFunc && typeof desc2.get === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-553",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-553.js",
    "description": "ES5 Attributes - success to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            set: undefined\n        });\n\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.set === setFunc && typeof desc2.set === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-554",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-554.js",
    "description": "ES5 Attributes - success to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        Object.defineProperty(obj, \"prop\", {\n            enumerable: true\n        });\n        var result2 = false;\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p2 in obj) {\n            if (p2 === \"prop\") {\n                result2 = true;\n            }\n        }\n\n        return !result1 && result2 && desc1.enumerable === false && desc2.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-555",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-555.js",
    "description": "ES5 Attributes - success to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            configurable: false\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        delete obj.prop;\n\n        return desc1.configurable === true && desc2.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-556",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-556.js",
    "description": "ES5 Attributes - success to update the accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is true) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: true\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1001\n        });\n        var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return desc1.hasOwnProperty(\"get\") && desc2.hasOwnProperty(\"value\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-557",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-557.js",
    "description": "ES5 Attributes - [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.get === getFunc && obj.prop === 1001;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-558",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-558.js",
    "description": "ES5 Attributes - [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is the expected function",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        obj.prop = \"overrideData\";\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return propertyDefineCorrect && desc.set === setFunc && verifySetFunc === \"overrideData\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-559",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-559.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is non-enumerable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        for (var p in obj) {\n            if (p === \"prop\") {\n                return false;\n            }\n        }\n\n        return propertyDefineCorrect && desc.enumerable === false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-56",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-56.js",
    "description": "Object.defineProperty - 'name' property doesn't exist in 'O', test [[Configurable]] of 'name' property is set as false if it is absent in accessor descriptor 'desc' (8.12.9 step 4.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var setFunc = function (value) {\n            obj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () {\n            return 10;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            set: setFunc,\n            get: getFunc,\n            enumerable: true\n        });\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-560",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-560.js",
    "description": "ES5 Attributes - property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) is undeletable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var propertyDefineCorrect = obj.hasOwnProperty(\"prop\");\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        delete obj.prop;\n\n        return propertyDefineCorrect && desc.configurable === false && obj.hasOwnProperty(\"prop\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-561",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-561.js",
    "description": "ES5 Attributes - fail to update [[Get]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var result1 = obj.prop === 1001;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                get: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = obj.prop === 1001;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return result1 && result2 && desc1.get === getFunc && desc2.get === getFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-562",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-562.js",
    "description": "ES5 Attributes - fail to update [[Set]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                set: undefined\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.set === setFunc && desc2.set === setFunc && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-563",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-563.js",
    "description": "ES5 Attributes - fail to update [[Enumerable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n        var result1 = false;\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n        for (var p1 in obj) {\n            if (p1 === \"prop\") {\n                result1 = true;\n            }\n        }\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                enumerable: true\n            });\n\n            return false;\n        } catch (e) {\n            var result2 = false;\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            for (var p2 in obj) {\n                if (p2 === \"prop\") {\n                    result2 = true;\n                }\n            }\n\n            return !result1 && !result2 && desc1.enumerable === false && desc2.enumerable === false && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-564",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-564.js",
    "description": "ES5 Attributes - fail to update [[Configurable]] attribute of accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to different value",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                configurable: true\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n            delete obj.prop;\n\n            return desc1.configurable === false && desc2.configurable === false && obj.hasOwnProperty(\"prop\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-565",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-565.js",
    "description": "ES5 Attributes - fail to update the accessor property ([[Get]] is a Function, [[Set]] is a Function, [[Enumerable]] is false, [[Configurable]] is false) to a data property",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var getFunc = function () {\n            return 1001;\n        };\n\n        var verifySetFunc = \"data\";\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc,\n            set: setFunc,\n            enumerable: false,\n            configurable: false\n        });\n        var desc1 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        try {\n            Object.defineProperty(obj, \"prop\", {\n                value: 1001\n            });\n\n            return false;\n        } catch (e) {\n            var desc2 = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n            return desc1.hasOwnProperty(\"get\") && !desc2.hasOwnProperty(\"value\") && e instanceof TypeError;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-566",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-566.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which has zero argument",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function () {\n            return 2010;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && obj.prop === 2010 && desc.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-567",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-567.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which has one argument",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function (arg1) {\n            return 2010;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && obj.prop === 2010 && desc.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-568",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-568.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which has two arguments",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var getFunc = function (arg1, arg2) {\n            return 2010;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && obj.prop === 2010 && desc.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-569",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-569.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which contains global variable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var globalVariable = 20;\n        var getFunc = function () {\n            globalVariable = 2010;\n            return globalVariable;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.get === getFunc && obj.prop === 2010 && globalVariable === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-57",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-57.js",
    "description": "Object.defineProperty - 'desc' is accessor descriptor, test updating all attribute values of 'name' (8.12.9 step 4.b.i)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var setFunc = function (value) {\n            obj.setVerifyHelpProp = value;\n        };\n        var getFunc = function () {\n            return 14;\n        };\n\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return 11;\n            },\n            set: function (value) { },\n            configurable: true,\n            enumerable: true\n        });\n\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false,\n            enumerable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-570",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-570.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which doesn't contains return statement",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var verifyExecute = false;\n        var getFunc = function () {\n            verifyExecute = true;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.get === getFunc && typeof obj.prop === \"undefined\" && verifyExecute;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-571",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-571.js",
    "description": "ES5 Attributes - [[Get]] attribute is a function which involves 'this' object into statement(s)",
    "test": "assertTrue((function testcase() {\n        var obj = {\n            len: 2010\n        };\n        var getFunc = function () {\n            return this;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: getFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && obj.prop === obj && desc.get === getFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-572",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-572.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which has zero argument",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var setFunc = function () { };\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-573",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-573.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which has one argument",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var verifySetFunc = 20;\n        var setFunc = function (value) {\n            verifySetFunc = value;\n        };\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n        obj.prop = 2010;\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc && verifySetFunc === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-574",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-574.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which has two arguments",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var firstArg = 12;\n        var secondArg = 12;\n\n        var setFunc = function (a, b) {\n            firstArg = a;\n            secondArg = b;\n        };\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n        obj.prop = 100;\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc && firstArg === 100 && typeof secondArg === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-575",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-575.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which contains global variable",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n        var globalVariable = 20;\n        var setFunc = function () {\n            globalVariable = 2010;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n        obj.prop = 10;\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc && globalVariable === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-576",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-576.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which contains return statement",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var setFunc = function () {\n            return 2010;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-577",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-577.js",
    "description": "ES5 Attributes - [[Set]] attribute is a function which involves 'this' object into statement(s)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var setFunc = function (value) {\n            this.len = value;\n        };\n\n        Object.defineProperty(obj, \"prop\", {\n            set: setFunc\n        });\n        obj.prop = 2010;\n\n        var desc = Object.getOwnPropertyDescriptor(obj, \"prop\");\n\n        return obj.hasOwnProperty(\"prop\") && desc.set === setFunc && obj.len === 2010;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-578",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-578.js",
    "description": "ES5 Attributes - [[Get]] field of inherited property of [[Prototype]] internal property is correct (String instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(String.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var strObj = new String();\n\n            return !strObj.hasOwnProperty(\"prop\") && strObj.prop === \"data\";\n        } finally {\n            delete String.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-579",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-579.js",
    "description": "ES5 Attributes - Success to add property into object (Array instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Array.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var arrObj = [];\n            arrObj.prop = \"myOwnProperty\";\n\n            return !arrObj.hasOwnProperty(\"prop\") && arrObj.prop === \"myOwnProperty\" && data === \"myOwnProperty\";\n        } finally {\n            delete Array.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-58",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-58.js",
    "description": "Object.defineProperty - 'name' is data descriptor and every fields in 'desc' is absent (8.12.9 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = 101; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", {});\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 101, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-580",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-580.js",
    "description": "ES5 Attributes - Inherited property is enumerable (Boolean instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Boolean.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var boolObj = new Boolean();\n            var verifyEnumerable = false;\n            for (var p in boolObj) {\n                if(p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !boolObj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete Boolean.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-581",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-581.js",
    "description": "ES5 Attributes - Fail to add property into object (Number instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Number.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            var numObj = new Number();\n            numObj.prop = \"myOwnProperty\";\n\n            return !numObj.hasOwnProperty(\"prop\") && numObj.prop === \"data\" && data === \"data\";\n        } finally {\n            delete Number.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-582",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-582.js",
    "description": "ES5 Attributes - Inherited property is non-enumerable (Function instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            var funObj = function () { };\n            var verifyEnumerable = false;\n            for (var p in funObj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !funObj.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-583",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-583.js",
    "description": "ES5 Attributes - [[Get]] field of inherited property of [[Prototype]] internal property is correct (Error Instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Error.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var errObj = new Error();\n\n            return !errObj.hasOwnProperty(\"prop\") && errObj.prop === \"data\";\n        } finally {\n            delete Error.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-584",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-584.js",
    "description": "ES5 Attributes - Failed to add property into object (Date instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Date.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var dateObj = new Date();\n            dateObj.prop = \"myOwnProperty\";\n\n            return !dateObj.hasOwnProperty(\"prop\") && dateObj.prop === \"myOwnProperty\" && data === \"myOwnProperty\";\n        } finally {\n            delete Date.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-585",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-585.js",
    "description": "ES5 Attributes - Inherited property is enumerable (RegExp instance)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(RegExp.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var regObj = new RegExp();\n            var verifyEnumerable = false;\n            for (var p in regObj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !regObj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete RegExp.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-586",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-586.js",
    "description": "ES5 Attributes - Fail to update value of property into of [[Proptotype]] internal property  (JSON)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Object.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            JSON.prop = \"myOwnProperty\";\n\n            return !JSON.hasOwnProperty(\"prop\") && JSON.prop === \"data\" && data === \"data\";\n        } finally {\n            delete Object.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-587",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-587.js",
    "description": "ES5 Attributes - Inherited property is non-enumerable (Math)",
    "test": "assertTrue((function testcase() {\n        var data = \"data\";\n        try {\n            Object.defineProperty(Object.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            var verifyEnumerable = false;\n            for (var p in Math) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !Math.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Object.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-588",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-588.js",
    "description": "ES5 Attributes - [[Get]] field of inherited property of [[Prototype]] internal property is correct (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        var data1 = 1001;\n        Object.defineProperty(appointment, \"startTime\", {\n            get: function () {\n                return data1;\n            },\n            enumerable: true,\n            configurable: false\n        });\n        var data2 = \"NAME\";\n        Object.defineProperty(appointment, \"name\", {\n            get: function () {\n                return data2;\n            },\n            set: function (value) {\n                data2 = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        var data3 = \"In-person meeting\";\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            get: function () {\n                return data3;\n            },\n            enumerable: true,\n            configurable: false\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"NAME\" &&\n            teamMeeting.startTime === 1001 &&\n            teamMeeting.conferenceCall === \"In-person meeting\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-589",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-589.js",
    "description": "ES5 Attributes - Success to update value of property into of [[Proptotype]] internal property (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        var data1 = 1001;\n        Object.defineProperty(appointment, \"startTime\", {\n            get: function () {\n                return data1;\n            },\n            set: function (value) {\n                data1 = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        var data2 = \"NAME\";\n        Object.defineProperty(appointment, \"name\", {\n            get: function () {\n                return data2;\n            },\n            set: function (value) {\n                data2 = value;\n            },\n            enumerable: true,\n            configurable: false\n        });\n\n        var meeting = Object.create(appointment);\n        var data3 = \"In-person meeting\";\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            get: function () {\n                return data3;\n            },\n            set: function (value) {\n                data3 = value;\n            },\n            enumerable: true,\n            configurable: false\n        });\n\n        var teamMeeting = Object.create(meeting);\n        teamMeeting.name = \"Team Meeting\";\n        var dateObj = new Date(\"10/31/2010 08:00\");\n        teamMeeting.startTime = dateObj;\n        teamMeeting.conferenceCall = \"4255551212\";\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"Team Meeting\" &&\n            teamMeeting.startTime === dateObj &&\n            teamMeeting.conferenceCall === \"4255551212\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-59",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-59.js",
    "description": "Object.defineProperty - 'name' is accessor descriptor and every fields in 'desc' is absent (8.12.9 step 5)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 0;\n        }\n        function setFunc(value) {\n            obj.helpVerifySet = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        Object.defineProperty(obj, \"foo\", {});\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"helpVerifySet\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-590",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-590.js",
    "description": "ES5 Attributes - Inherited property is enumerable (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        var data1 = 1001;\n        Object.defineProperty(appointment, \"startTime\", {\n            get: function () {\n                return data1;\n            },\n            set: function (value) {\n                data1 = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        var data2 = \"NAME\";\n        Object.defineProperty(appointment, \"name\", {\n            get: function () {\n                return data2;\n            },\n            set: function (value) {\n                data2 = value;\n            },\n            enumerable: true,\n            configurable: false\n        });\n\n        var meeting = Object.create(appointment);\n        var data3 = \"In-person meeting\";\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            get: function () {\n                return data3;\n            },\n            set: function (value) {\n                data3 = value;\n            },\n            enumerable: true,\n            configurable: false\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var verifyTimeProp = false;\n        var verifyNameProp = false;\n        var verifyCallProp = false;\n        for (var p in teamMeeting) {\n            if (p === \"startTime\") {\n                verifyTimeProp = true;\n            }\n            if (p === \"name\") {\n                verifyNameProp = true;\n            }\n            if (p === \"conferenceCall\") {\n                verifyCallProp = true;\n            }\n        }\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && verifyTimeProp && verifyNameProp && verifyCallProp;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-591",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-591.js",
    "description": "ES5 Attributes - Fail to update value of property of [[Proptotype]] internal property (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        var data1 = 1001;\n        Object.defineProperty(appointment, \"startTime\", {\n            get: function () {\n                return data1;\n            },\n            enumerable: false,\n            configurable: false\n        });\n        var data2 = \"NAME\";\n        Object.defineProperty(appointment, \"name\", {\n            get: function () {\n                return data2;\n            },\n            enumerable: false,\n            configurable: true\n        });\n\n        var meeting = Object.create(appointment);\n        var data3 = \"In-person meeting\";\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            get: function () {\n                return data3;\n            },\n            enumerable: false,\n            configurable: false\n        });\n\n        var teamMeeting = Object.create(meeting);\n        teamMeeting.name = \"IE Team Meeting\";\n        var dateObj = new Date(\"10/31/2010 08:00\");\n        teamMeeting.startTime = dateObj;\n        teamMeeting.conferenceCall = \"4255551212\";\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && teamMeeting.name === \"NAME\" &&\n            teamMeeting.startTime === 1001 &&\n            teamMeeting.conferenceCall === \"In-person meeting\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-592",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-592.js",
    "description": "ES5 Attributes - Inherited property is non-enumerable (Object.create)",
    "test": "assertTrue((function testcase() {\n        var appointment = {};\n\n        var data1 = 1001;\n        Object.defineProperty(appointment, \"startTime\", {\n            get: function () {\n                return data1;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        var data2 = \"NAME\";\n        Object.defineProperty(appointment, \"name\", {\n            get: function () {\n                return data2;\n            },\n            enumerable: false,\n            configurable: false\n        });\n\n        var meeting = Object.create(appointment);\n        var data3 = \"In-person meeting\";\n        Object.defineProperty(meeting, \"conferenceCall\", {\n            get: function () {\n                return data3;\n            },\n            enumerable: false,\n            configurable: true\n        });\n\n        var teamMeeting = Object.create(meeting);\n\n        var verifyTimeProp = false;\n        var verifyNameProp = false;\n        var verifyCallProp = false;\n        for (var p in teamMeeting) {\n            if (p === \"startTime\") {\n                verifyTimeProp = true;\n            }\n            if (p === \"name\") {\n                verifyNameProp = true;\n            }\n            if (p === \"conferenceCall\") {\n                verifyCallProp = true;\n            }\n        }\n\n        var hasOwnProperty = !teamMeeting.hasOwnProperty(\"name\") &&\n            !teamMeeting.hasOwnProperty(\"startTime\") &&\n            !teamMeeting.hasOwnProperty('conferenceCall');\n\n        return hasOwnProperty && !verifyTimeProp && !verifyNameProp && !verifyCallProp;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-593",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-593.js",
    "description": "ES5 Attributes - [[Get]] field of inherited property of [[Prototype]] internal property is correct (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n\n            return !obj.hasOwnProperty(\"prop\") && obj.prop === data;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-594",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-594.js",
    "description": "ES5 Attributes - Success to update value of property into of [[Proptotype]] internal property (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            obj.prop = \"overrideData\";\n\n            return !obj.hasOwnProperty(\"prop\") && obj.prop === \"overrideData\";\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-595",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-595.js",
    "description": "ES5 Attributes - Inherited property is enumerable (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                set: function (value) {\n                    data = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n\n            var verifyEnumerable = false;\n            for (var p in obj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !obj.hasOwnProperty(\"prop\") && verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-596",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-596.js",
    "description": "ES5 Attributes - Fail to update value of property into of [[Proptotype]] internal property (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n            obj.prop = \"overrideData\";\n\n            return !obj.hasOwnProperty(\"prop\") && obj.prop === \"data\";\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-597",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-597.js",
    "description": "ES5 Attributes - Inherited property is non-enumerable (Function.prototype.bind)",
    "test": "assertTrue((function testcase() {\n        var foo = function () { };\n        var data = \"data\";\n        try {\n            Object.defineProperty(Function.prototype, \"prop\", {\n                get: function () {\n                    return data;\n                },\n                enumerable: false,\n                configurable: true\n            });\n\n            var obj = foo.bind({});\n\n            var verifyEnumerable = false;\n            for (var p in obj) {\n                if (p === \"prop\") {\n                    verifyEnumerable = true;\n                }\n            }\n\n            return !obj.hasOwnProperty(\"prop\") && !verifyEnumerable;\n        } finally {\n            delete Function.prototype.prop;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-598",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-598.js",
    "description": "ES5 Attributes - all attributes in Object.getPrototypeOf are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"getPrototypeOf\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.getPrototypeOf;\n\n        try {\n            Object.getPrototypeOf = \"2010\";\n\n            var isWritable = (Object.getPrototypeOf === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"getPrototypeOf\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.getPrototypeOf;\n\n            var isConfigurable = !Object.hasOwnProperty(\"getPrototypeOf\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"getPrototypeOf\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.getPrototypeOf))"
   },
   {
    "id": "15.2.3.6-4-599",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-599.js",
    "description": "ES5 Attributes - all attributes in Object.getOwnPropertyDescriptor are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"getOwnPropertyDescriptor\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.getOwnPropertyDescriptor;\n\n        try {\n            Object.getOwnPropertyDescriptor = \"2010\";\n\n            var isWritable = (Object.getOwnPropertyDescriptor === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"getOwnPropertyDescriptor\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Object.getOwnPropertyDescriptor;\n\n            var isConfigurable = !Object.hasOwnProperty(\"getOwnPropertyDescriptor\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"getOwnPropertyDescriptor\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-6.js",
    "description": "Object.defineProperty is no-op if current and desc are the same accessor desc",
    "test": "assertTrue((function testcase() {\n  function sameAccessorDescriptorValues(d1, d2) {\n    return (d1.get == d2.get &&\n            d1.enumerable == d2.enumerable &&\n            d1.configurable == d2.configurable);\n  }\n\n  var o = {};\n\n  // create an accessor property with the following attributes:\n  // enumerable: true, configurable: true\n  var desc = {\n               get: function () {},\n               enumerable: true,\n               configurable: true\n             };\n\n  Object.defineProperty(o, \"foo\", desc);\n\n  // query for, and save, the desc. A subsequent call to defineProperty\n  // with the same desc should not disturb the property definition.\n  var d1 = Object.getOwnPropertyDescriptor(o, \"foo\");  \n\n  // now, redefine the property with the same descriptor\n  // the property defintion should not get disturbed.\n  Object.defineProperty(o, \"foo\", desc);\n\n  var d2 = Object.getOwnPropertyDescriptor(o, \"foo\"); \n\n  if (sameAccessorDescriptorValues(d1, d2) === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-60",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-60.js",
    "description": "Object.defineProperty - type of desc.value is different from type of name.value (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = 101; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: \"abc\" });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", \"abc\", true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-600",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-600.js",
    "description": "ES5 Attributes - all attributes in Object.getOwnPropertyNames are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"getOwnPropertyNames\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.getOwnPropertyNames;\n\n        try {\n            Object.getOwnPropertyNames = \"2010\";\n\n            var isWritable = (Object.getOwnPropertyNames === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"getOwnPropertyNames\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.getOwnPropertyNames;\n\n            var isConfigurable = !Object.hasOwnProperty(\"getOwnPropertyNames\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"getOwnPropertyNames\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.getOwnPropertyNames))"
   },
   {
    "id": "15.2.3.6-4-601",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-601.js",
    "description": "ES5 Attributes - all attributes in Object.create are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"create\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.create;\n\n        try {\n            Object.create = \"2010\";\n\n            var isWritable = (Object.create === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"create\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.create;\n\n            var isConfigurable = !Object.hasOwnProperty(\"create\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"create\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.create))"
   },
   {
    "id": "15.2.3.6-4-602",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-602.js",
    "description": "ES5 Attributes - all attributes in Object.defineProperty are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"defineProperty\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n        var temp = Object.defineProperty;\n        try {\n            Object.defineProperty = \"2010\";\n\n            var isWritable = (Object.defineProperty === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"defineProperty\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Object.defineProperty;\n\n            var isConfigurable = !Object.hasOwnProperty(\"defineProperty\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty = temp;\n            Object.defineProperty(Object, \"defineProperty\", {\n                enumerable: false\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-603",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-603.js",
    "description": "ES5 Attributes - all attributes in Object.defineProperties are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"defineProperties\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.defineProperties;\n\n        try {\n            Object.defineProperties = \"2010\";\n\n            var isWritable = (Object.defineProperties === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"defineProperties\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.defineProperties;\n\n            var isConfigurable = !Object.hasOwnProperty(\"defineProperties\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"defineProperties\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.defineProperties))"
   },
   {
    "id": "15.2.3.6-4-604",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-604.js",
    "description": "ES5 Attributes - all attributes in Object.seal are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"seal\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.seal;\n\n        try {\n            Object.seal = \"2010\";\n\n            var isWritable = (Object.seal === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"seal\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.seal;\n\n            var isConfigurable = !Object.hasOwnProperty(\"seal\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"seal\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.seal))"
   },
   {
    "id": "15.2.3.6-4-605",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-605.js",
    "description": "ES5 Attributes - all attributes in Object.freeze are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"freeze\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.freeze;\n\n        try {\n            Object.freeze = \"2010\";\n\n            var isWritable = (Object.freeze === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"freeze\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.freeze;\n\n            var isConfigurable = !Object.hasOwnProperty(\"freeze\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"freeze\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.freeze))"
   },
   {
    "id": "15.2.3.6-4-606",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-606.js",
    "description": "ES5 Attributes - all attributes in Object.preventExtensions are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"preventExtensions\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.preventExtensions;\n\n        try {\n            Object.preventExtensions = \"2010\";\n\n            var isWritable = (Object.preventExtensions === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"preventExtensions\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.preventExtensions;\n\n            var isConfigurable = !Object.hasOwnProperty(\"preventExtensions\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"preventExtensions\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.6-4-607",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-607.js",
    "description": "ES5 Attributes - all attributes in Object.isSealed are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"isSealed\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.isSealed;\n\n        try {\n            Object.isSealed = \"2010\";\n\n            var isWritable = (Object.isSealed === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"isSealed\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.isSealed;\n\n            var isConfigurable = !Object.hasOwnProperty(\"isSealed\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"isSealed\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.isSealed))"
   },
   {
    "id": "15.2.3.6-4-608",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-608.js",
    "description": "ES5 Attributes - all attributes in Object.isFrozen are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"isFrozen\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.isFrozen;\n\n        try {\n            Object.isFrozen = \"2010\";\n\n            var isWritable = (Object.isFrozen === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"isFrozen\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.isFrozen;\n\n            var isConfigurable = !Object.hasOwnProperty(\"isFrozen\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"isFrozen\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.isFrozen))"
   },
   {
    "id": "15.2.3.6-4-609",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-609.js",
    "description": "ES5 Attributes - all attributes in Object.isExtensible are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"isExtensible\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.isExtensible;\n\n        try {\n            Object.isExtensible = \"2010\";\n\n            var isWritable = (Object.isExtensible === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"isExtensible\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.isExtensible;\n\n            var isConfigurable = !Object.hasOwnProperty(\"isExtensible\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"isExtensible\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.6-4-61",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-61.js",
    "description": "Object.defineProperty - both desc.value and name.value are undefined (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: undefined });\n\n        Object.defineProperty(obj, \"foo\", { value: undefined });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-610",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-610.js",
    "description": "ES5 Attributes - all attributes in Object.keys are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Object, \"keys\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Object.keys;\n\n        try {\n            Object.keys = \"2010\";\n\n            var isWritable = (Object.keys === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Object) {\n                if (prop === \"keys\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Object.keys;\n\n            var isConfigurable = !Object.hasOwnProperty(\"keys\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Object, \"keys\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.6-4-611",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-611.js",
    "description": "ES5 Attributes - all attributes in Function.prototype.bind are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Function.prototype, \"bind\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Function.prototype.bind;\n\n        try {\n            Function.prototype.bind = \"2010\";\n\n            var isWritable = (Function.prototype.bind === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Function.prototype) {\n                if (prop === \"bind\") {\n                    isEnumerable = true;\n                }\n            }\n        \n            delete Function.prototype.bind;\n\n            var isConfigurable = !Function.prototype.hasOwnProperty(\"bind\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Function.prototype, \"bind\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.2.3.6-4-612",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-612.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.indexOf are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"indexOf\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.indexOf;\n\n        try {\n            Array.prototype.indexOf = \"2010\";\n\n            var isWritable = (Array.prototype.indexOf === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"indexOf\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.indexOf;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"indexOf\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"indexOf\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.indexOf))"
   },
   {
    "id": "15.2.3.6-4-613",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-613.js",
    "description": "ES5 Attributes - all attributes in Object.lastIndexOf are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"lastIndexOf\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.lastIndexOf;\n\n        try {\n            Array.prototype.lastIndexOf = \"2010\";\n\n            var isWritable = (Array.prototype.lastIndexOf === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"lastIndexOf\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.lastIndexOf;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"lastIndexOf\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"lastIndexOf\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.lastIndexOf))"
   },
   {
    "id": "15.2.3.6-4-614",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-614.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.every are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"every\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.every;\n\n        try {\n            Array.prototype.every = \"2010\";\n\n            var isWritable = (Array.prototype.every === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"every\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.every;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"every\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"every\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.every))"
   },
   {
    "id": "15.2.3.6-4-615",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-615.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.some are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"some\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.some;\n\n        try {\n            Array.prototype.some = \"2010\";\n\n            var isWritable = (Array.prototype.some === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"some\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.some;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"some\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"some\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.some))"
   },
   {
    "id": "15.2.3.6-4-616",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-616.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.forEach are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"forEach\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.forEach;\n\n        try {\n            Array.prototype.forEach = \"2010\";\n\n            var isWritable = (Array.prototype.forEach === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"forEach\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.forEach;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"forEach\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"forEach\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.forEach))"
   },
   {
    "id": "15.2.3.6-4-617",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-617.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.map are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"map\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.map;\n\n        try {\n            Array.prototype.map = \"2010\";\n\n            var isWritable = (Array.prototype.map === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"map\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.map;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"map\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"map\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.map))"
   },
   {
    "id": "15.2.3.6-4-618",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-618.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.filter are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"filter\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.filter;\n\n        try {\n            Array.prototype.filter = \"2010\";\n\n            var isWritable = (Array.prototype.filter === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"filter\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.filter;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"filter\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"filter\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.filter))"
   },
   {
    "id": "15.2.3.6-4-619",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-619.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.reduce are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"reduce\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.reduce;\n\n        try {\n            Array.prototype.reduce = \"2010\";\n\n            var isWritable = (Array.prototype.reduce === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"reduce\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.reduce;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"reduce\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"reduce\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.reduce))"
   },
   {
    "id": "15.2.3.6-4-62",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-62.js",
    "description": "Object.defineProperty - both desc.value and name.value are null (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: null });\n\n        Object.defineProperty(obj, \"foo\", { value: null });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", null, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-620",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-620.js",
    "description": "ES5 Attributes - all attributes in Array.prototype.reduceRight are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Array.prototype, \"reduceRight\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Array.prototype.reduceRight;\n\n        try {\n            Array.prototype.reduceRight = \"2010\";\n\n            var isWritable = (Array.prototype.reduceRight === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Array.prototype) {\n                if (prop === \"reduceRight\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Array.prototype.reduceRight;\n\n            var isConfigurable = !Array.prototype.hasOwnProperty(\"reduceRight\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Array.prototype, \"reduceRight\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Array.prototype.reduceRight))"
   },
   {
    "id": "15.2.3.6-4-621",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-621.js",
    "description": "ES5 Attributes - all attributes in String.prototype.trim are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(String.prototype, \"trim\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = String.prototype.trim;\n\n        try {\n            String.prototype.trim = \"2010\";\n\n            var isWritable = (String.prototype.trim === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in String.prototype) {\n                if (prop === \"trim\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete String.prototype.trim;\n\n            var isConfigurable = !String.prototype.hasOwnProperty(\"trim\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(String.prototype, \"trim\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(String.prototype.trim))"
   },
   {
    "id": "15.2.3.6-4-622",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-622.js",
    "description": "ES5 Attributes - all attributes in Date.now are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Date, \"now\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Date.now;\n\n        try {\n            Date.now = \"2010\";\n\n            var isWritable = (Date.now === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Date) {\n                if (prop === \"now\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Date.now;\n\n            var isConfigurable = !Date.hasOwnProperty(\"now\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Date, \"now\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Date.now))"
   },
   {
    "id": "15.2.3.6-4-623",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-623.js",
    "description": "ES5 Attributes - all attributes in Date.prototype.toISOString are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Date.prototype, \"toISOString\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Date.prototype.toISOString;\n\n        try {\n            Date.prototype.toISOString = \"2010\";\n\n            var isWritable = (Date.prototype.toISOString === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Date.prototype) {\n                if (prop === \"toISOString\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Date.prototype.toISOString;\n\n            var isConfigurable = !Date.prototype.hasOwnProperty(\"toISOString\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Date.prototype, \"toISOString\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Date.prototype.toISOString))"
   },
   {
    "id": "15.2.3.6-4-624",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-624.js",
    "description": "ES5 Attributes - all attributes in Date.prototype.toJSON are correct",
    "test": "assertTrue((function testcase() {\n        var desc = Object.getOwnPropertyDescriptor(Date.prototype, \"toJSON\");\n\n        var propertyAreCorrect = (desc.writable === true && desc.enumerable === false && desc.configurable === true);\n\n        var temp = Date.prototype.toJSON;\n\n        try {\n            Date.prototype.toJSON = \"2010\";\n\n            var isWritable = (Date.prototype.toJSON === \"2010\");\n\n            var isEnumerable = false;\n\n            for (var prop in Date.prototype) {\n                if (prop === \"toJSON\") {\n                    isEnumerable = true;\n                }\n            }\n\n            delete Date.prototype.toJSON;\n\n            var isConfigurable = !Date.prototype.hasOwnProperty(\"toJSON\");\n\n            return propertyAreCorrect && isWritable && !isEnumerable && isConfigurable;\n        } finally {\n            Object.defineProperty(Date.prototype, \"toJSON\", {\n                value: temp,\n                writable: true,\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor) && fnExists(Date.prototype.toJSON))"
   },
   {
    "id": "15.2.3.6-4-63",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-63.js",
    "description": "Object.defineProperty - both desc.value and name.value are NaN (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: NaN });\n\n        Object.defineProperty(obj, \"foo\", { value: NaN });\n\n        if (!isNaN(obj.foo)) {\n            return false;\n        }\n\n        obj.foo = \"verifyValue\";\n        if (obj.foo === \"verifyValue\") {\n            return false;\n        }\n\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop) && prop === \"foo\") {\n                return false;\n            }\n        }\n\n        delete obj.foo;\n        if (!obj.hasOwnProperty(\"foo\")) {\n            return false;\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-64",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-64.js",
    "description": "Object.defineProperty - desc.value = +0 and name.value = -0 (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: -0 });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: +0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", -0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-65",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-65.js",
    "description": "Object.defineProperty - desc.value = -0 and name.value = +0 (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: +0 });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: -0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", +0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-66",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-66.js",
    "description": "Object.defineProperty - desc.value and name.value are two numbers with different values (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = 101; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: 102 });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 102, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-67",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-67.js",
    "description": "Object.defineProperty - both desc.value and name.value are two strings which have same length and same characters in corresponding positions (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: \"abcd\" });\n\n        Object.defineProperty(obj, \"foo\", { value: \"abcd\" });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", \"abcd\", false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-68",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-68.js",
    "description": "Object.defineProperty - desc.value and name.value are two strings with different values (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = \"abcd\"; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: \"fghj\" });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", \"fghj\", true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-69",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-69.js",
    "description": "Object.defineProperty - both desc.value and name.value are boolean values with the same value (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { value: true });\n\n        Object.defineProperty(obj, \"foo\", { value: true });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", true, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-7.js",
    "description": "Object.defineProperty throws TypeError when changing [[Configurable]] from false to true",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property; all other attributes default to false.\n  var d1 = { value: 101, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  var desc = { value: 101, configurable: true };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.value === 101 &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-70",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-70.js",
    "description": "Object.defineProperty - desc.value and name.value are two boolean values with different values (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        obj.foo = true; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        Object.defineProperty(obj, \"foo\", { value: false });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", false, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-71",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-71.js",
    "description": "Object.defineProperty - both desc.value and name.value are Ojbects which refer to the same Object (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var obj1 = { length: 10 };\n\n        Object.defineProperty(obj, \"foo\", { value: obj1 });\n\n        Object.defineProperty(obj, \"foo\", { value: obj1 });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", obj1, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-72",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-72.js",
    "description": "Object.defineProperty - desc.value and name.value are two Ojbects which refer to the different objects (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var obj1 = { length: 10 };\n        obj.foo = obj1; // default value of attributes: writable: true, configurable: true, enumerable: true\n\n        var obj2 = { length: 20 };\n\n        Object.defineProperty(obj, \"foo\", { value: obj2 });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", obj2, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-73",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-73.js",
    "description": "Object.defineProperty - both desc.writable and name.writable are boolean values with the same value (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { writable: false});\n\n        Object.defineProperty(obj, \"foo\", { writable: false });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-74",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-74.js",
    "description": "Object.defineProperty - desc.writable and name.writable are two boolean values with different values (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { writable: false, configurable: true });\n\n        Object.defineProperty(obj, \"foo\", { writable: true });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-75",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-75.js",
    "description": "Object.defineProperty - both desc.[[Get]] and name.[[Get]] are two objects which refer to the same object (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n        function setFunc(value) {\n            obj.helpVerifySet = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc\n        });\n\n        Object.defineProperty(obj, \"foo\", { get: getFunc });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"helpVerifySet\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-76",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-76.js",
    "description": "Object.defineProperty - desc.[[Get]] and name.[[Get]] are two objects which refer to the different objects (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc1() {\n            return 10;\n        }\n        function setFunc1(value) {\n            obj.helpVerifySet = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc1,\n            set: setFunc1,\n            configurable: true\n        });\n\n        function getFunc2() {\n            return 20;\n        }\n\n        Object.defineProperty(obj, \"foo\", { get: getFunc2 });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc2, setFunc1, \"helpVerifySet\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-77",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-77.js",
    "description": "Object.defineProperty - both desc.[[Set]] and name.[[Set]] are two objects which refer to the same object (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", { set: setFunc });\n\n        Object.defineProperty(obj, \"foo\", { set: setFunc });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-78",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-78.js",
    "description": "Object.defineProperty - desc.[[Set]] and name.[[Set]] are two objects which refer to the different objects (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc1() { }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc1,\n            configurable: true\n        });\n\n        function setFunc2(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", { set: setFunc2 });\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc2, \"setVerifyHelpProp\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-79",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-79.js",
    "description": "Object.defineProperty - both desc.enumerable and name.enumerable are boolean values with the same value (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { enumerable: false });\n\n        Object.defineProperty(obj, \"foo\", { enumerable: false });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-8.js",
    "description": "Object.defineProperty throws TypeError when changing [[Enumerable]] from false to true on non-configurable data properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property; all other attributes default to false.\n  var d1 = { value: 101, enumerable: false, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, setting enumerable to true should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { value: 101, enumerable: true };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.value === 101 &&\n          d2.enumerable === false &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-80",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-80.js",
    "description": "Object.defineProperty - desc.enumerable and name.enumerable are boolean negation of each other (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { enumerable: false, configurable: true });\n\n        Object.defineProperty(obj, \"foo\", { enumerable: true });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-81",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-81.js",
    "description": "Object.defineProperty - both desc.configurable and name.configurable are booleans with the same value (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { configurable: false });\n\n        Object.defineProperty(obj, \"foo\", { configurable: false });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-1.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as false, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false\n        });\n        \n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-10.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as true and [[Configurable]] attribute is false, 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: true,\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-11.js",
    "description": "Object.defineProperty - Update [[Enumerable]] and [[Configurable]] attributes of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] and [[Configurable]] attributes as false, 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false,\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-12.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attributes of 'name' property to true successfully when [[Enumerable]] attribute of 'name' is false and [[Configurable]] attribute of 'name' is true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as true, 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-13.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as false, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false\n        });\n        \n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-14.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as false and [[Configurable]] attribute as true, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false,\n            configurable: true\n        });\n        \n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-15.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Configurable]] attribute of 'name' property is true,  the 'desc' is a generic descriptor which contains [[Configurable]] attribute as false, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-16.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as true and [[Configurable]] attribute as false, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: true, \n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-17.js",
    "description": "Object.defineProperty - Update [[Enumerable]] and [[Configurable]] attributes of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true, the 'desc' is a generic descriptor which contains [[Enumerable]] and [[Configurable]] attributes as false, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-18",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-18.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to true successfully when [[Enumerable]] attribute of 'name' is false and [[Configurable]] attribute of 'name' is true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as true, 'name' property is an index data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"0\", {\n            value: 1001,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: true\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"0\", 1001, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-19",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-19.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [Enumerable]] attribute as false and 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-2.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as false and [[Configurable]] attribute as true, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false,\n            configurable: true\n        });\n        \n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-20",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-20.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [Enumerable]] attribute as false and [[Configurable]] property is true, 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false,\n            configurable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-21",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-21.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [[Configurable]] attribute as false, 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-22",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-22.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as true and [[Configurable]] attribute is false, 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: true,\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-23",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-23.js",
    "description": "Object.defineProperty - Update [[Enumerable]] and [[Configurable]] attributes of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] and [[Configurable]] attributes as false, 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: false,\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-24",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-24.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attributes of 'name' property to true successfully when [[Enumerable]] attribute of 'name' is false and [[Configurable]] attribute of 'name' is true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as true, 'name' property is an index accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"0\", {\n            get: get_func,\n            set: set_func,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"0\", {\n            enumerable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"0\", get_func, set_func, \"verifySetFunction\", true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-3.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Configurable]] attribute of 'name' property is true,  the 'desc' is a generic descriptor which contains [[Configurable]] attribute as false, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-4.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [[Enumerable]] attribute as true and [[Configurable]] attribute as false, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: true, \n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-5.js",
    "description": "Object.defineProperty - Update [[Enumerable]] and [[Configurable]] attributes of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true, the 'desc' is a generic descriptor which contains [[Enumerable]] and [[Configurable]] attributes as false, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false,\n            configurable: false\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-6.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to true successfully when [[Enumerable]] attribute of 'name' is false and [[Configurable]] attribute of 'name' is true,  the 'desc' is a generic descriptor which only contains [[Enumerable]] attribute as true, 'name' property is a data property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: 1001,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: true\n        });\n\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", 1001, true, true, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-82-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-7.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [Enumerable]] attribute as false and 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-8.js",
    "description": "Object.defineProperty - Update [[Enumerable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which contains [Enumerable]] attribute as false and [[Configurable]] property is true, 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            enumerable: false,\n            configurable: true\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", false, true);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82-9.js",
    "description": "Object.defineProperty - Update [[Configurable]] attribute of 'name' property to false successfully when [[Enumerable]] and [[Configurable]] attributes of 'name' property are true,  the 'desc' is a generic descriptor which only contains [[Configurable]] attribute as false, 'name' property is an accessor property (8.12.9 step 8)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        obj.verifySetFunction = \"data\";\n        var get_func = function () {\n            return obj.verifySetFunction;\n        };\n        var set_func = function (value) {\n            obj.verifySetFunction = value;\n        };\n        Object.defineProperty(obj, \"foo\", {\n            get: get_func,\n            set: set_func,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            configurable: false\n        });\n\n        return accessorPropertyAttributesAreCorrect(obj, \"foo\", get_func, set_func, \"verifySetFunction\", true, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-82",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-82.js",
    "description": "Object.defineProperty - desc.configurable and name.configurable are boolean negation of each other (8.12.9 step 6)",
    "test": "assertTrue((function testcase() {\n    \n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { configurable: true });\n\n        Object.defineProperty(obj, \"foo\", { configurable: false });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-83",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-83.js",
    "description": "Object.defineProperty will not throw TypeError if name.configurable = false, name.writable = false, name.value = undefined and desc.value = undefined (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: undefined, \n            writable: false, \n            configurable: false \n        });\n\n        Object.defineProperty(obj, \"foo\", { \n            value: undefined, \n            writable: false, \n            configurable: false\n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", undefined, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-84",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-84.js",
    "description": "Object.defineProperty will not throw TypeError if name.configurable = false, name.writable = false, name.value = null and desc.value = null (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: null, \n            writable: false, \n            configurable: false \n        });\n\n        Object.defineProperty(obj, \"foo\", { \n            value: null,  \n            writable: false, \n            configurable: false \n        });\n        return dataPropertyAttributesAreCorrect(obj, \"foo\", null, false, false, false);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-85",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-85.js",
    "description": "Object.defineProperty will not throw TypeError if name.configurable = false, name.writable = false, name.value = NaN and desc.value = NaN (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: NaN,\n            writable: false,\n            configurable: false\n        });\n\n        Object.defineProperty(obj, \"foo\", {\n            value: NaN,\n            writable: false,\n            configurable: false\n        });\n\n        if (!isNaN(obj.foo)) {\n            return false;\n        }\n\n        obj.foo = \"verifyValue\";\n        if (obj.foo === \"verifyValue\") {\n            return false;\n        }\n\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop) && prop === \"foo\") {\n                return false;\n            }\n        }\n\n        delete obj.foo;\n        if (!obj.hasOwnProperty(\"foo\")) {\n            return false;\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-86",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-86.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value = +0 and name.value = -0 (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: -0, \n            writable: false, \n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: +0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", -0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-87",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-87.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value = -0 and name.value = +0 (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: +0, \n            writable: false, \n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: -0 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", +0, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-88",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-88.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two numbers with the same value (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: 100, \n            writable: false, \n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: 100 });\n            return dataPropertyAttributesAreCorrect(obj, \"foo\", 100, false, false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-89",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-89.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two numbers with different values (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", { \n            value: 10, \n            writable: false, \n            configurable: false \n        });\n        \n        try {\n            Object.defineProperty(obj, \"foo\", { value: 20 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", 10, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-9.js",
    "description": "Object.defineProperty throws TypeError when changing [[Enumerable]] from true to false on non-configurable data properties",
    "test": "assertTrue((function testcase() {\n  var o = {};\n\n  // create a data valued property with [[Enumerable]] explicitly set to true;\n  // all other attributes default to false.\n  var d1 = { value: 101, enumerable: true, configurable: false };\n  Object.defineProperty(o, \"foo\", d1);\n\n  // now, setting enumerable to false should fail, since [[Configurable]]\n  // on the original property will be false.\n  var desc = { value: 101, enumerable: false };\n\n  try {\n    Object.defineProperty(o, \"foo\", desc);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      // the property should remain unchanged.\n      var d2 = Object.getOwnPropertyDescriptor(o, \"foo\");\n      if (d2.value === 101 &&\n          d2.enumerable === true &&\n          d2.configurable === false) {\n        return true;\n      }\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-90",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-90.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two strings with the same value (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: \"abcd\",\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: \"abcd\" });\n            return dataPropertyAttributesAreCorrect(obj, \"foo\", \"abcd\", false, false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-91",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-91.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two strings with different values (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: \"abcd\",\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: \"fghj\" });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", \"abcd\", false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-92",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-92.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two booleans with the same value (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: false,\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: false });\n            return dataPropertyAttributesAreCorrect(obj, \"foo\", false, false, false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-93",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-93.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two booleans with different values (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        Object.defineProperty(obj, \"foo\", {\n            value: false,\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: true });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", false, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-94",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-94.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two Objects refer to the same object (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var obj1 = { length: 10 };\n\n        Object.defineProperty(obj, \"foo\", {\n            value: obj1,\n            writable: false,\n            configurable: false \n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: obj1 });\n            return dataPropertyAttributesAreCorrect(obj, \"foo\", obj1, false, false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-95",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-95.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.writable = false, desc.value and name.value are two objects which refer to the different objects (8.12.9 step 10.a.ii.1)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        var obj1 = { length: 10 };\n\n        Object.defineProperty(obj, \"foo\", {\n            value: obj1,\n            writable: false,\n            configurable: false \n        });\n\n        var obj2 = { length: 20 };\n\n        try {\n            Object.defineProperty(obj, \"foo\", { value: obj2 });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && dataPropertyAttributesAreCorrect(obj, \"foo\", obj1, false, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-96",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-96.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, both desc.[[Set]] and name.[[Set]] are two objects which refer to the same object (8.12.9 step 11.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { set: setFunc });\n            return accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-97",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-97.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.[[Set]] is undefined, desc.[[Set]] refers to an object (8.12.9 step 11.a.i)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return \"property\";\n        }\n\n        Object.defineProperty(obj, \"property\", {\n            get: getFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"property\", {\n                get: getFunc,\n                set: function () { },\n                configurable: false\n            });\n\n            return false;\n        } catch (e) {\n            return e instanceof TypeError &&\n                accessorPropertyAttributesAreCorrect(obj, \"property\", getFunc, undefined, undefined, false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.2.3.6-4-98",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-98.js",
    "description": "Object.defineProperty will not throw TypeError when name.configurable = false, both desc.[[Get]] and name.[[Get]] are two objects which refer to the same object (8.12.9 step 11.a.ii)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function getFunc() {\n            return 10;\n        }\n        function setFunc(value) {\n            obj.verifyGetHelpMethod = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            get: getFunc,\n            set: setFunc,\n            configurable: false\n        });\n\n        try {\n            Object.defineProperty(obj, \"foo\", { get: getFunc });\n            return accessorPropertyAttributesAreCorrect(obj, \"foo\", getFunc, setFunc, \"verifyGetHelpMethod\", false, false);\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.6-4-99",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.6/15.2.3.6-4-99.js",
    "description": "Object.defineProperty will throw TypeError when name.configurable = false, name.[[Get]] is undefined, desc.[[Get]] refers to an object (8.12.9 step 11.a.ii)",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n\n        function setFunc(value) {\n            obj.setVerifyHelpProp = value;\n        }\n\n        Object.defineProperty(obj, \"foo\", {\n            set: setFunc,\n            configurable: false\n        });\n\n        function getFunc() {\n            return 10;\n        }\n\n        try {\n            Object.defineProperty(obj, \"foo\", {\n                get: getFunc,\n                set: setFunc\n            });\n            return false;\n        } catch (e) {\n            return e instanceof TypeError && accessorPropertyAttributesAreCorrect(obj, \"foo\", undefined, setFunc, \"setVerifyHelpProp\", false, false);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   }
  ]
 }
}
