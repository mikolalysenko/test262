{
 "testCollection": {
  "name": "15.2.3.14",
  "numTests": 50,
  "tests": [
   {
    "id": "15.2.3.14-0-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-0-1.js",
    "description": "Object.keys must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = Object.keys;\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "15.2.3.14-0-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-0-2.js",
    "description": "Object.keys must exist as a function taking 1 parameter",
    "test": "assertTrue((Object.keys.length === 1));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-1-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-1-1.js",
    "description": "Object.keys throws TypeError if type of first param is not Object",
    "test": "assertTrue((function testcase() {\n  try {\n    Object.keys(0);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-1-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-1-2.js",
    "description": "Object.keys throws TypeError if type of first param is not Object (boolean)",
    "test": "assertTrue((function testcase() {\n  try {\n    Object.keys(true);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-1-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-1-3.js",
    "description": "Object.keys throws TypeError if type of first param is not Object (string)",
    "test": "assertTrue((function testcase() {\n  try {\n    Object.keys('abc');\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-1-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-1-4.js",
    "description": "Object.keys throws TypeError if type of first param is not Object (null)",
    "test": "assertTrue((function testcase() {\n  try {\n    Object.keys(null);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-1-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-1-5.js",
    "description": "Object.keys throws TypeError if type of first param is not Object (undefined)",
    "test": "assertTrue((function testcase() {\n  try {\n    Object.keys(undefined);\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-2-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-1.js",
    "description": "Object.keys returns the standard built-in Array",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  if (Array.isArray(a) === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Array.isArray))"
   },
   {
    "id": "15.2.3.14-2-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-2.js",
    "description": "Object.keys returns the standard built-in Array (check [[Class]]",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  var s = Object.prototype.toString.call(a);\n  if (s === '[object Array]') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-2-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-3.js",
    "description": "Object.keys returns the standard built-in Array (Array overridden)",
    "test": "assertTrue((function testcase() {\n  function Array() { }\n\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n\n  var s = Object.prototype.toString.call(a);\n  if (s === '[object Array]') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-2-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-4.js",
    "description": "Object.keys returns the standard built-in Array that is extensible",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  if (Object.isExtensible(a) === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.14-2-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-5.js",
    "description": "Object.keys returns the standard built-in Array that is not sealed",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  if (Object.isSealed(a) === false) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.isSealed))"
   },
   {
    "id": "15.2.3.14-2-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-6.js",
    "description": "Object.keys returns the standard built-in Array that is not frozen",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  if (Object.isFrozen(a) === false) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.isFrozen))"
   },
   {
    "id": "15.2.3.14-2-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-7.js",
    "description": "Object.keys - 'n' is 0 when 'O' doesn't contain own enumerable data or accessor properties",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop1\", {\n            value: 1001,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop2\", {\n            get: function () {\n                return 1002;\n            },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return arr.length === 0;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-2-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-2-8.js",
    "description": "Object.keys - 'n' is the correct value when enumerable properties exist in 'O'",
    "test": "assertTrue((function testcase() {\n        var obj = {\n            prop1: 1001,\n            prop2: function () {\n                return 1002;\n            }\n        };\n\n        Object.defineProperty(obj, \"prop3\", {\n            value: 1003,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop4\", {\n            get: function () {\n                return 1004;\n            },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return (arr.length === 2) && (arr[0] === \"prop1\") && (arr[1] === \"prop2\");\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-3-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-1.js",
    "description": "Object.keys returns the standard built-in Array containing own enumerable properties",
    "test": "assertTrue((function testcase() {\n  var o = { x: 1, y: 2};\n\n  var a = Object.keys(o);\n  if (a.length === 2 &&\n      a[0] === 'x' &&\n      a[1] === 'y') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-2.js",
    "description": "Object.keys returns the standard built-in Array containing own enumerable properties (function)",
    "test": "assertTrue((function testcase() {\n  function foo() {}\n  foo.x = 1;\n  \n  var a = Object.keys(foo);\n  if (a.length === 1 &&\n      a[0] === 'x') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-3.js",
    "description": "Object.keys returns the standard built-in Array containing own enumerable properties (array)",
    "test": "assertTrue((function testcase() {\n  var o = [1, 2];\n  var a = Object.keys(o);\n  if (a.length === 2 &&\n      a[0] === '0' &&\n      a[1] === '1') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-4.js",
    "description": "Object.keys of an arguments object returns the indices of the given arguments",
    "test": "assertTrue((function testcase() {\n  function testArgs2(x, y, z) {\n    // Properties of the arguments object are enumerable.\n    var a = Object.keys(arguments);\n    if (a.length === 2 && a[0] === \"0\" && a[1] === \"1\")\n      return true;\n  }\n  function testArgs3(x, y, z) {\n    // Properties of the arguments object are enumerable.\n    var a = Object.keys(arguments);\n    if (a.length === 3 && a[0] === \"0\" && a[1] === \"1\" && a[2] === \"2\")\n      return true;\n  }\n  function testArgs4(x, y, z) {\n    // Properties of the arguments object are enumerable.\n    var a = Object.keys(arguments);\n    if (a.length === 4 && a[0] === \"0\" && a[1] === \"1\" && a[2] === \"2\" && a[3] === \"3\")\n      return true;\n  }\n  return testArgs2(1, 2) && testArgs3(1, 2, 3) && testArgs4(1, 2, 3, 4);\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-5.js",
    "description": "Object.keys must return a fresh array on each invocation",
    "test": "assertTrue((function testcase() {\n  var literal = {a: 1};\n  var keysBefore = Object.keys(literal);\n  if (keysBefore[0] != 'a') return false;\n  keysBefore[0] = 'x';\n  var keysAfter = Object.keys(literal);\n  return (keysBefore[0] == 'x') && (keysAfter[0] == 'a');\n }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-6.js",
    "description": "Object.keys - returns the standard built-in Array (instanceof Array)",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        var arr = Object.keys(obj);\n\n        return arr instanceof Array;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-3-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-3-7.js",
    "description": "Object.keys - length of the returned array equals the number of own enumerable properties of 'O'",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 1001, prop2: 1002 };\n\n        Object.defineProperty(obj, \"prop3\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop4\", {\n            get: function () {\n                return 1003;\n            },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return arr.length === 3;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-4-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-4-1.js",
    "description": "Object.keys - elements of the returned array start from index 0",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 1001, prop2: 1002 };\n\n        Object.defineProperty(obj, \"prop3\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop4\", {\n            get: function () {\n                return 1003;\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return arr.hasOwnProperty(0) && arr[0] === \"prop1\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-1.js",
    "description": "Object.keys - own enumerable data property of 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return arr.hasOwnProperty(0) && arr[0] === \"prop\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-10.js",
    "description": "Object.keys - inherted enumerable accessor property that is over-ridden by non-enumerable own accessor property is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"prop\", {\n            get: function () { },\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        Object.defineProperty(obj, \"prop\", {\n            get: function () { },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"prop\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-11.js",
    "description": "Object.keys - own enumerable indexed data property of dense array 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = [1, 2, 3, 4, 5];\n\n        var arr = Object.keys(obj);\n\n        var initValue = 0;\n        for (var p in arr) {\n            if (arr.hasOwnProperty(p)) {\n                if (arr[p] !== initValue.toString()) {\n                    return false;\n                }\n                initValue++;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-5-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-12.js",
    "description": "Object.keys - own enumerable indexed accessor property of dense array 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = [2, 3, 4, 5];\n\n        Object.defineProperty(obj, \"prop\", {\n            get: function () {\n                return 6;\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr.hasOwnProperty(p)) {\n                if (arr[p] === \"prop\") {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-13.js",
    "description": "Object.keys - own enumerable indexed data property of sparse array 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = [1, , 3, , 5];\n\n        Object.defineProperty(obj, 5, {\n            value: 7,\n            enumerable: false,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, 10000, {\n            value: \"ElementWithLargeIndex\",\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        var index;\n        var initValue = 0;\n        for (index = 0; index < 3; index++) {\n            if (arr[index] !== initValue.toString()) {\n                return false;\n            }\n            initValue += 2;\n        }\n\n        if (arr.length !== 4 || arr[3] !== \"10000\") {\n            return false;\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-14.js",
    "description": "Object.keys - own enumerable indexed accessor property of sparse array 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = [1, , 3, , 5];\n\n        Object.defineProperty(obj, \"10000\", {\n            get: function () {\n                return \"ElementWithLargeIndex\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"10000\") {\n                return true;\n            }\n        }\n\n        return false;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-15.js",
    "description": "Object.keys - own enumerable indexed data property of String object 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = new String(\"xyz\");\n        obj[-20] = -20;\n        obj[20] = 20;\n\n        Object.defineProperty(obj, \"prop\", {\n            value: 1003,\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var i = 0; i < arr.length; i++) {\n            if (!obj.hasOwnProperty(arr[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-16.js",
    "description": "Object.keys - own enumerable indexed accessor property of String object 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = new String(\"xyz\");\n        obj[-20] = -20;\n        obj[20] = 20;\n\n        Object.defineProperty(obj, \"prop1\", {\n            get: function () { },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(obj, \"prop2\", {\n            get: function () { },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var i = 0; i < arr.length; i++) {\n            if (!obj.hasOwnProperty(arr[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-2.js",
    "description": "Object.keys - own enumerable accessor property of 'O' is defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = { };\n\n        Object.defineProperty(obj, \"prop\", {\n            get: function () {\n                return 1003;\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        return arr.hasOwnProperty(0) && arr[0] === \"prop\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-3.js",
    "description": "Object.keys - non-enumerable own data property of 'O' is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 1001, prop2: 1002 };\n\n        Object.defineProperty(obj, \"prop3\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n\n        Object.defineProperty(obj, \"prop4\", {\n            value: 1004,\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr.hasOwnProperty(p)) {\n                if (arr[p] === \"prop4\") {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-4.js",
    "description": "Object.keys - non-enumerable own accessor property of 'O' is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var obj = {};\n\n        Object.defineProperty(obj, \"prop1\", {\n            get: function () { },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(obj, \"prop2\", {\n            get: function () { },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(obj, \"prop3\", {\n            get: function () { },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr.hasOwnProperty(p)) {\n                if (arr[p] === \"prop2\") {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-5.js",
    "description": "Object.keys - inherited enumerable data property of 'O' is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"inheritedProp\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        obj.prop = 1004;\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"inheritedProp\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-6.js",
    "description": "Object.keys - inherited enumerable accessor property of 'O' is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"inheritedProp\", {\n            get: function () {\n                return 1003;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        Object.defineProperty(obj, \"prop\", {\n            get: function () {\n                return 1004;\n            },\n            enumerable: true,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"inheritedProp\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-7.js",
    "description": "Object.keys - inherted enumerable data property that is over-ridden by non-enumerable own data property is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"prop\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        Object.defineProperty(obj, \"prop\", {\n            value: 1004,\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"prop\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-8.js",
    "description": "Object.keys - inherted enumerable data property that is over-ridden by non-enumerable own accessor property is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"prop\", {\n            value: 1003,\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        Object.defineProperty(obj, \"prop\", {\n            get: function () { },\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"prop\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-9.js",
    "description": "Object.keys - inherted enumerable accessor property that is over-ridden by non-enumerable own data property is not defined in returned array",
    "test": "assertTrue((function testcase() {\n        var proto = {};\n        Object.defineProperty(proto, \"prop\", {\n            get: function () { },\n            enumerable: true,\n            configurable: true\n        });\n        var Con = function () { };\n        Con.prototype = proto;\n\n        var obj = new Con();\n        Object.defineProperty(obj, \"prop\", {\n            value: 1003,\n            enumerable: false,\n            configurable: true\n        });\n\n        var arr = Object.keys(obj);\n\n        for (var p in arr) {\n            if (arr[p] === \"prop\") {\n                return false;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.2.3.14-5-a-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-a-1.js",
    "description": "Object.keys - 'value' attribute of element in returned array is correct.",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 1 };\n\n        var array = Object.keys(obj);\n\n        var desc = Object.getOwnPropertyDescriptor(array, \"0\");\n\n        return desc.hasOwnProperty(\"value\") && desc.value === \"prop1\";\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-5-a-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-a-2.js",
    "description": "Object.keys - 'writable' attribute of element of returned array is correct",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 100 };\n\n        var array = Object.keys(obj);\n\n        try {\n            array[0] = \"isWritable\";\n\n            var desc = Object.getOwnPropertyDescriptor(array, \"0\");\n\n            return array[0] === \"isWritable\" && desc.hasOwnProperty(\"writable\") && desc.writable === true;\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-5-a-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-a-3.js",
    "description": "Object.keys - 'enumerable' attribute of element of returned array is correct",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 100 };\n\n        var array = Object.keys(obj);\n        var desc = Object.getOwnPropertyDescriptor(array, \"0\");\n        var result = false;\n        for (var index in array) {\n            if (obj.hasOwnProperty(array[index]) && array[index] === \"prop1\") {\n                result = true;\n            }\n        }\n\n        return result && desc.hasOwnProperty(\"enumerable\") && desc.enumerable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-5-a-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-a-4.js",
    "description": "Object.keys - Verify that 'configurable' attribute of element of returned array is correct",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 100 };\n\n        var array = Object.keys(obj);\n        var desc = Object.getOwnPropertyDescriptor(array, \"0\");\n\n        delete array[0];\n\n        return typeof array[0] === \"undefined\" && desc.hasOwnProperty(\"configurable\") && desc.configurable === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-5-b-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-5-b-1.js",
    "description": "Object.keys - Verify that 'index' of returned array is ascend by 1",
    "test": "assertTrue((function testcase() {\n        var obj = { prop1: 100, prop2: 200, prop3: 300 };\n\n        var array = Object.keys(obj);\n\n        var idx = 0;\n        for (var index in array) {\n            if (array.hasOwnProperty(index)) {\n                if (index !== idx.toString()) {\n                    return false;\n                }\n                idx++;\n            }\n        }\n\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-1.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (dense array)",
    "test": "assertTrue((function testcase() {\n        var denseArray = [1, 2, 3];\n\n        var tempArray = [];\n        for (var p in denseArray) {\n            if (denseArray.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(denseArray);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-2.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (sparse array)",
    "test": "assertTrue((function testcase() {\n        var sparseArray = [1, 2, , 4, , 6];\n\n        var tempArray = [];\n        for (var p in sparseArray) {\n            if (sparseArray.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(sparseArray);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-3.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (String object)",
    "test": "assertTrue((function testcase() {\n        var str = new String(\"abc\");\n\n        var tempArray = [];\n        for (var p in str) {\n            if (str.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(str);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-4.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (Arguments object)",
    "test": "assertTrue((function testcase() {\n        var func = function (a, b, c) {\n            return arguments;\n        };\n\n        var args = func(1, \"b\", false);\n\n        var tempArray = [];\n        for (var p in args) {\n            if (args.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(args);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-5.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (any other built-in object)",
    "test": "assertTrue((function testcase() {\n        var obj = new Date();\n        obj.prop1 = 100;\n        obj.prop2 = \"prop2\";\n\n        var tempArray = [];\n        for (var p in obj) {\n            if (obj.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(obj);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   },
   {
    "id": "15.2.3.14-6-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.14/15.2.3.14-6-6.js",
    "description": "Object.keys - the order of elements in returned array is the same with the order of properties in 'O' (global Object)",
    "test": "assertTrue((function testcase() {\n        var obj = fnGlobalObject();\n\n        var tempArray = [];\n        for (var p in obj) {\n            if (obj.hasOwnProperty(p)) {\n                tempArray.push(p);\n            }\n        }\n\n        var returnedArray = Object.keys(obj);\n\n        for (var index in returnedArray) {\n            if (tempArray[index] !== returnedArray[index]) {\n                return false;\n            }\n        }\n        return true;\n    }).call(this));\n",
    "precondition": "(fnExists(Object.keys))"
   }
  ]
 }
}
