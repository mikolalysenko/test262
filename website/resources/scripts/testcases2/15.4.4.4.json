{
 "testCollection": {
  "name": "15.4.4.4",
  "numTests": 2,
  "tests": [
   {
    "id": "15.4.4.4-5-b-iii-3-b-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.4/15.4.4.4-5-b-iii-3-b-1.js",
    "description": "Array.prototype.concat will concat an Array when index property (read-only) exists in Array.prototype (Step 5.b.iii.3.b)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n\n            var oldArr = [101];\n\n            var newArr = Array.prototype.concat.call(oldArr);\n\n            var verifyValue = false;\n            verifyValue = newArr[0] === 101;\n\n            var verifyEnumerable = false;\n            for (var p in newArr) {\n                if (p === \"0\" && newArr.hasOwnProperty(\"0\")) {\n                    verifyEnumerable = true;\n                }\n            }\n\n            var verifyWritable = false;\n            newArr[0] = 12;\n            verifyWritable = newArr[0] === 12;\n\n            var verifyConfigurable = false;\n            delete newArr[0];\n            verifyConfigurable = newArr.hasOwnProperty(\"0\");\n\n            return verifyValue && !verifyConfigurable && verifyEnumerable && verifyWritable;\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   },
   {
    "id": "15.4.4.4-5-c-i-1",
    "path": "TestCases/chapter15/15.4/15.4.4/15.4.4.4/15.4.4.4-5-c-i-1.js",
    "description": "Array.prototype.concat will concat an Array when index property (read-only) exists in Array.prototype (Step 5.c.i)",
    "test": "assertTrue((function testcase() {\n        try {\n            Object.defineProperty(Array.prototype, \"0\", {\n                value: 100,\n                writable: false,\n                configurable: true\n            });\n\n            var newArr = Array.prototype.concat.call(101);\n\n            var hasProperty = newArr.hasOwnProperty(\"0\");\n\n\t    var instanceOfVerify = typeof newArr[0]===\"number\";\n            \n            var verifyValue = false;\n            verifyValue = newArr[0] === 101;\n\n            var verifyEnumerable = false;\n            for (var p in newArr) {\n                if (p === \"0\" && newArr.hasOwnProperty(\"0\")) {\n                    verifyEnumerable = true;\n                }\n            }\n\n            var verifyWritable = false;\n            newArr[0] = 12;\n            verifyWritable = newArr[0] === 12;\n\n            var verifyConfigurable = false;\n            delete newArr[0];\n            verifyConfigurable = newArr.hasOwnProperty(\"0\");\n\n            return hasProperty && instanceOfVerify && verifyValue && !verifyConfigurable && verifyEnumerable && verifyWritable;\n\t\n\n        } finally {\n            delete Array.prototype[0];\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.defineProperty))"
   }
  ]
 }
}
