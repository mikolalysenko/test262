{
 "testCollection": {
  "name": "11.2.4_Argument_Lists",
  "numTests": 9,
  "tests": [
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Function is declared with no FormalParameterList",
    "test": "function f_arg() {\n  return arguments;\n}\n\n//CHECK#1\nif (f_arg().length !== 0) {\n  $ERROR('#1: function f_arg() {return arguments;} f_arg().length === 0. Actual: ' + (f_arg().length));\n}\n\n//CHECK#2\nif (f_arg()[0] !== undefined) {\n  $ERROR('#2: function f_arg() {return arguments;} f_arg()[0] === undefined. Actual: ' + (f_arg()[0]));\n}\n",
    "id": "S11.2.4_A1.1_T1"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Function is declared with FormalParameterList",
    "test": "function f_arg(x,y) {\n  return arguments;\n}\n\n//CHECK#1\nif (f_arg().length !== 0) {\n  $ERROR('#1: function f_arg(x,y) {return arguments;} f_arg().length === 0. Actual: ' + (f_arg().length));\n}\n\n//CHECK#2\nif (f_arg()[0] !== undefined) {\n  $ERROR('#2: function f_arg(x,y) {return arguments;} f_arg()[0] === undefined. Actual: ' + (f_arg()[0]));\n}\n\n//CHECK#3\nif (f_arg.length !== 2) {\n  $ERROR('#3: function f_arg(x,y) {return arguments;} f_arg.length === 2. Actual: ' + (f_arg.length));\n}\n",
    "id": "S11.2.4_A1.1_T2"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Function is declared with no FormalParameterList",
    "test": "f_arg = function() {\n  return arguments;\n}\n\n//CHECK#1\nif (f_arg(1,2,3).length !== 3) {\n  $ERROR('#1: f_arg = function()() {return arguments;} f_arg(1,2,3).length === 3. Actual: ' + (f_arg(1,2,3).length));\n}\n\n//CHECK#2\nif (f_arg(1,2,3)[0] !== 1) {\n  $ERROR('#1: f_arg = function()() {return arguments;} f_arg(1,2,3)[0] === 1. Actual: ' + (f_arg(1,2,3)[0]));\n}\n\n//CHECK#3\nif (f_arg(1,2,3)[1] !== 2) {\n  $ERROR('#3: f_arg = function()() {return arguments;} f_arg(1,2,3)[1] === 2. Actual: ' + (f_arg(1,2,3)[1]));\n}\n\n//CHECK#4\nif (f_arg(1,2,3)[2] !== 3) {\n  $ERROR('#4: f_arg = function()() {return arguments;} f_arg(1,2,3)[2] === 3. Actual: ' + (f_arg(1,2,3)[2]));\n}\n\n//CHECK#5\nif (f_arg(1,2,3)[3] !== undefined) {\n  $ERROR('#5: f_arg = function()() {return arguments;} f_arg(1,2,3)[3] === undefined. Actual: ' + (f_arg(1,2,3)[3]));\n}\n",
    "id": "S11.2.4_A1.2_T1"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Function is declared with FormalParameterList",
    "test": "f_arg = function(x,y) {\n  return arguments;\n}\n\n//CHECK#1\nif (f_arg(1,2,3).length !== 3) {\n  $ERROR('#1: f_arg = function(x,y) {return arguments;} f_arg(1,2,3).length === 3. Actual: ' + (f_arg(1,2,3).length));\n}\n\n//CHECK#2\nif (f_arg(1)[0] !== 1) {\n  $ERROR('#1: f_arg = function(x,y) {return arguments;} f_arg(1)[0] === 1. Actual: ' + (f_arg(1)[0]));\n}\n\n//CHECK#3\nif (f_arg(1,2)[1] !== 2) {\n  $ERROR('#3: f_arg = function(x,y) {return arguments;} f_arg(1,2)[1] === 2. Actual: ' + (f_arg(1,2)[1]));\n}\n\n//CHECK#4\nif (f_arg(1,2,3)[2] !== 3) {\n  $ERROR('#4: f_arg = function(x,y) {return arguments;} f_arg(1,2,3)[2] === 3. Actual: ' + (f_arg(1,2,3)[2]));\n}\n\n//CHECK#5\nif (f_arg(1,2,3)[3] !== undefined) {\n  $ERROR('#5: f_arg = function(x,y) {return arguments;} f_arg(1,2,3)[3] === undefined. Actual: ' + (f_arg(1,2,3)[3]));\n}\n\n//CHECK#6\nif (f_arg.length !== 2) {\n  $ERROR('#6: f_arg = function(x,y) {return arguments;} f_arg.length === 2. Actual: ' + (f_arg.length));\n}\n",
    "id": "S11.2.4_A1.2_T2"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "incorrect syntax",
    "negative": "",
    "test": "function f_arg() {\n}\n\nf_arg(1,,2);\n",
    "id": "S11.2.4_A1.3_T1"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Return an internal list whose length is one greater than the\nlength of ArgumentList and whose items are the items of ArgumentList, in order,\nfollowed at the end by GetValue(AssignmentExpression), which is the last item of\nthe new list",
    "test": "function f_arg() {\n}\n\n//CHECK#1\nf_arg(x=1,x);\n",
    "id": "S11.2.4_A1.4_T1"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Return an internal list whose length is one greater than the\nlength of ArgumentList and whose items are the items of ArgumentList, in order,\nfollowed at the end by GetValue(AssignmentExpression), which is the last item of\nthe new list",
    "test": "function f_arg() {\n}\n\n//CHECK#1\ntry {\n  f_arg(x,x=1);\n  $ERROR('#1.1: function f_arg() {} f_arg(x,x=1) throw ReferenceError. Actual: ' + (f_arg(x,x=1)));  \n}\ncatch (e) {\n  if ((e instanceof ReferenceError) !== true) {\n    $ERROR('#1.2: function f_arg() {} f_arg(x,x=1) throw ReferenceError. Actual: ' + (e));  \n  }\n}\n",
    "id": "S11.2.4_A1.4_T2"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Return an internal list whose length is one greater than the\nlength of ArgumentList and whose items are the items of ArgumentList, in order,\nfollowed at the end by GetValue(AssignmentExpression), which is the last item of\nthe new list",
    "test": "function f_arg(x,y,z) {\n  return z;\n}\n\n//CHECK#1\nif (f_arg(x=1,y=x,x+y) !== 2) {\n  $ERROR('#1: function f_arg(x,y,z) {return z;} f_arg(x=1,y=x,x+y) === 2. Actual: ' + (f_arg(x=1,y=x,x+y)));    \n}\n",
    "id": "S11.2.4_A1.4_T3"
   },
   {
    "section": "11.2.4, 11.2.3, 10.1.8",
    "description": "Return an internal list whose length is one greater than the\nlength of ArgumentList and whose items are the items of ArgumentList, in order,\nfollowed at the end by GetValue(AssignmentExpression), which is the last item of\nthe new list",
    "test": "var x = function () { throw \"x\"; };\nvar y = function () { throw \"y\"; };\n\nfunction f_arg() {\n}\n\n//CHECK#1\ntry {\n  f_arg(x(),y());\n  $ERROR('#1.1: var x = { valueOf: function () { throw \"x\"; } }; var y = { valueOf: function () { throw \"y\"; } }; function f_arg() {} f_arg(x(),y()) throw \"x\". Actual: ' + (f_arg(x(),y())));  \n}\ncatch (e) {\n  if (e === \"y\") {\n     $ERROR('#1.2: First argument is evaluated first, and then second argument');\n   } else {\n     if (e !== \"x\") {\n       $ERROR('#1.3: var x = { valueOf: function () { throw \"x\"; } }; var y = { valueOf: function () { throw \"y\"; } }; function f_arg() {} f_arg(x(),y()) throw \"x\". Actual: ' + (e));\n     }\n   }\n}\n",
    "id": "S11.2.4_A1.4_T4"
   }
  ]
 }
}
