{
 "testCollection": {
  "name": "15.10.3_The_RegExp_Constructor_Called_as_a_Function",
  "numTests": 9,
  "tests": [
   {
    "section": "15.10.3.1",
    "description": "R is /x/i and instance is RegExp(R)",
    "test": "__re = /x/i;\n__instance = RegExp(__re);\n__re.indicator = 1;\n\n//CHECK#1\nif (__instance.indicator !== 1) {\n\t$ERROR('#1: __re = /x/i; __instance = RegExp(__re); __re.indicator = 1; __instance.indicator === 1. Actual: ' + (__instance.indicator));\n}\n\n",
    "id": "S15.10.3.1_A1_T1"
   },
   {
    "section": "15.10.3.1",
    "description": "R is new RegExp and instance is RegExp(R, function(){}())",
    "test": "__re = new RegExp;\n__instance = RegExp(__re, function(){}());\n__re.indicator = 1;\n\n//CHECK#1\nif (__instance.indicator !== 1) {\n\t$ERROR('#1: __re = new RegExp; __instance = RegExp(__re, function(){}()); __re.indicator = 1; __instance.indicator === 1. Actual: ' + (__instance.indicator));\n}\n",
    "id": "S15.10.3.1_A1_T2"
   },
   {
    "section": "15.10.3.1",
    "description": "R is new RegExp() and instance is RegExp(R, x), where x is undefined variable",
    "test": "__re = new RegExp();\n__instance = RegExp(__re, x);\n__re.indicator = 1;\n\n//CHECK#1\nif (__instance.indicator !== 1) {\n\t$ERROR('#1: __re = new RegExp(); __instance = RegExp(__re, x); __re.indicator = 1; __instance.indicator === 1. Actual: ' + (__instance.indicator));\n}\n\nvar x;\n",
    "id": "S15.10.3.1_A1_T3"
   },
   {
    "section": "15.10.3.1",
    "description": "R is new RegExp() and instance is RegExp(R, void 0)",
    "test": "__re = RegExp();\n__instance = RegExp(__re, void 0);\n__re.indicator = 1;\n\n//CHECK#1\nif (__instance.indicator !== 1) {\n\t$ERROR('#1: __re = RegExp(); __instance = RegExp(__re, void 0); __re.indicator = 1; __instance.indicator === 1. Actual: ' + (__instance.indicator));\n}\n\n",
    "id": "S15.10.3.1_A1_T4"
   },
   {
    "section": "15.10.3.1",
    "description": "R is /\\b/m and instance is RegExp(R, undefined)",
    "test": "__re = /\\b/m;\n__instance = RegExp(__re, undefined);\n__re.indicator = 1;\n\n//CHECK#1\nif (__instance.indicator !== 1) {\n\t$ERROR('#1: __re = /\\\\b/m; __instance = RegExp(__re, undefined); __re.indicator = 1; __instance.indicator === 1. Actual: ' + (__instance.indicator));\n}\n\n",
    "id": "S15.10.3.1_A1_T5"
   },
   {
    "section": "15.10.3.1",
    "description": "Checking if using \"1\" as flags leads to throwing the correct exception",
    "test": "//CHECK#1\ntry {\n\t$ERROR('#1.1: RegExp(new RegExp(\"\\\\d\"), \"1\")) throw TypeError. Actual: ' + (RegExp(new RegExp(\"\\d\"), \"1\")));\n} catch (e) {\n\tif ((e instanceof TypeError) !== true) {\n\t\t$ERROR('#1.2: RegExp(new RegExp(\"\\\\d\"), \"1\")) throw TypeError. Actual: ' + (e));\n\t}\n}\n\n",
    "id": "S15.10.3.1_A2_T1"
   },
   {
    "section": "15.10.3.1",
    "description": "Checking if using dafined variable \"x = 1\" as flags leads to throwing the correct exception",
    "test": "var x = 1;\n\n//CHECK#1\ntry {\n\t$ERROR('#1.1: var x = 1; RegExp(/[a-b]?/, x) throw TypeError. Actual: ' + (RegExp(/[a-b]?/, x)));\n} catch (e) {\n\tif ((e instanceof TypeError) !== true) {\n\t\t$ERROR('#1.2: var x = 1; RegExp(/[a-b]?/, x) throw TypeError. Actual: ' + (e));\n\t} \n}\n\n",
    "id": "S15.10.3.1_A2_T2"
   },
   {
    "section": "15.10.3.1",
    "description": "R is \"d+\" and instance is RegExp(R,\"i\")",
    "test": "__re = \"d+\";\n__instance = RegExp(__re, \"i\");\n\n//CHECK#1\nif (__instance.constructor !== RegExp) {\n\t$ERROR('#1: __re = \"d+\"; __instance = RegExp(__re, \"i\"); __instance.constructor === RegExp. Actual: ' + (__instance.constructor));\n}\n\n//CHECK#2\nif (__instance.source !== __re) {\n\t$ERROR('#2: __re = \"d+\"; __instance = RegExp(__re, \"i\"); __instance.source === __re. Actual: '+ (__instance.source));\n}\n\n",
    "id": "S15.10.3.1_A3_T1"
   },
   {
    "section": "15.10.3.1",
    "description": ": R is {toString:function(){return \"[a-c]*\";}} and instance is RegExp(R,\"gm\");",
    "test": "__instance = RegExp({toString:function(){return \"[a-c]*\";}}, \"gm\");\n\n//CHECK#1\nif (__instance.constructor !== RegExp) {\n\t$ERROR('#1: __instance = RegExp({toString:function(){return \"[a-c]*\";}}, \"gm\"); __instance.constructor === RegExp. Actual: ' + (__instance.constructor));\n}\n\n//CHECK#2\nif (__instance.source !== \"[a-c]*\") {\n\t$ERROR('#2: __instance = RegExp({toString:function(){return \"[a-c]*\";}}, \"gm\"); __instance.source === \"[a-c]*\". Actual: '+ (__instance.source));\n}\n\n",
    "id": "S15.10.3.1_A3_T2"
   }
  ]
 }
}
