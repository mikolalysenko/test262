{
 "testCollection": {
  "name": "15.8.2.17_sqrt",
  "numTests": 6,
  "tests": [
   {
    "section": "15.8.2.17",
    "description": "Checking if Math.sqrt(NaN) is NaN",
    "test": "// CHECK#1\nvar x = NaN;\nif (!isNaN(Math.sqrt(x)))\n{\n\t$ERROR(\"#1: 'var x=NaN; isNaN(Math.sqrt(x)) === false'\");\n}\n",
    "id": "S15.8.2.17_A1"
   },
   {
    "section": "15.8.2.17",
    "description": "Checking if Math.sqrt(x) is NaN, where x is less than 0",
    "test": "// CHECK#1\nvar x = -0.000000000000001;\nif (!isNaN(Math.sqrt(x)))\n{\n\t$ERROR(\"#1: 'var x=-0.000000000000001; isNaN(Math.sqrt(x)) === false'\");\n}\n\n// CHECK#2\nvar x = -1;\nif (!isNaN(Math.sqrt(x)))\n{\n\t$ERROR(\"#2: 'var x=-1; isNaN(Math.sqrt(x)) === false'\");\n}\n\n// CHECK#3\nvar x = -Infinity;\nif (!isNaN(Math.sqrt(x)))\n{\n\t$ERROR(\"#3: 'var x=-Infinity; isNaN(Math.sqrt(x)) === false'\");\n}\n",
    "id": "S15.8.2.17_A2"
   },
   {
    "section": "15.8.2.17",
    "description": "Checking if Math.sqrt(+0) equals to +0",
    "test": "// CHECK#1\nvar x = +0;\nif (Math.sqrt(x) !== +0)\n{\n\t$ERROR(\"#1: 'var x=+0; Math.sqrt(x) !== +0'\");\n}\n",
    "id": "S15.8.2.17_A3"
   },
   {
    "section": "15.8.2.17",
    "description": "Checking if Math.sqrt(-0) equals to -0",
    "test": "// CHECK#1\nvar x = -0;\nif (Math.sqrt(x) !== -0)\n{\n\t$ERROR(\"#1: 'var x=-0; Math.sqrt(x) !== -0'\");\n}\n",
    "id": "S15.8.2.17_A4"
   },
   {
    "section": "15.8.2.17",
    "description": "Checking if Math.sqrt(+Infinity) is +Infinity",
    "test": "// CHECK#1\nvar x = +Infinity;\nif (Math.sqrt(x) !== +Infinity)\n{\n\t$ERROR(\"#1: 'var x=+Infinity; Math.sqrt(x) !== +Infinity'\");\n}\n",
    "id": "S15.8.2.17_A5"
   },
   {
    "section": "15.8.2.17",
    "description": ": Checking if Math.sqrt is approximately equals to its mathematical values on the set of 64 argument values; all the sample values is calculated with LibC;",
    "test": "$INCLUDE(\"math_precision.js\");\n$INCLUDE(\"math_isequal.js\");\n\n// CHECK#1\nvnum = 64;\nvar x = new Array();\nx[0] = 0.00000000000000000000;\nx[1] = 0.25396825396825395000;\nx[2] = 0.50793650793650791000;\nx[3] = 0.76190476190476186000;\nx[4] = 1.01587301587301580000;\nx[5] = 1.26984126984126980000;\nx[6] = 1.52380952380952370000;\nx[7] = 1.77777777777777770000;\nx[8] = 2.03174603174603160000;\nx[9] = 2.28571428571428560000;\nx[10] = 2.53968253968253950000;\nx[11] = 2.79365079365079350000;\nx[12] = 3.04761904761904740000;\nx[13] = 3.30158730158730140000;\nx[14] = 3.55555555555555540000;\nx[15] = 3.80952380952380930000;\nx[16] = 4.06349206349206330000;\nx[17] = 4.31746031746031720000;\nx[18] = 4.57142857142857120000;\nx[19] = 4.82539682539682510000;\nx[20] = 5.07936507936507910000;\nx[21] = 5.33333333333333300000;\nx[22] = 5.58730158730158700000;\nx[23] = 5.84126984126984090000;\nx[24] = 6.09523809523809490000;\nx[25] = 6.34920634920634890000;\nx[26] = 6.60317460317460280000;\nx[27] = 6.85714285714285680000;\nx[28] = 7.11111111111111070000;\nx[29] = 7.36507936507936470000;\nx[30] = 7.61904761904761860000;\nx[31] = 7.87301587301587260000;\nx[32] = 8.12698412698412650000;\nx[33] = 8.38095238095238140000;\nx[34] = 8.63492063492063440000;\nx[35] = 8.88888888888888930000;\nx[36] = 9.14285714285714230000;\nx[37] = 9.39682539682539720000;\nx[38] = 9.65079365079365030000;\nx[39] = 9.90476190476190510000;\nx[40] = 10.15873015873015800000;\nx[41] = 10.41269841269841300000;\nx[42] = 10.66666666666666600000;\nx[43] = 10.92063492063492100000;\nx[44] = 11.17460317460317400000;\nx[45] = 11.42857142857142900000;\nx[46] = 11.68253968253968200000;\nx[47] = 11.93650793650793700000;\nx[48] = 12.19047619047619000000;\nx[49] = 12.44444444444444500000;\nx[50] = 12.69841269841269800000;\nx[51] = 12.95238095238095300000;\nx[52] = 13.20634920634920600000;\nx[53] = 13.46031746031746000000;\nx[54] = 13.71428571428571400000;\nx[55] = 13.96825396825396800000;\nx[56] = 14.22222222222222100000;\nx[57] = 14.47619047619047600000;\nx[58] = 14.73015873015872900000;\nx[59] = 14.98412698412698400000;\nx[60] = 15.23809523809523700000;\nx[61] = 15.49206349206349200000;\nx[62] = 15.74603174603174500000;\nx[63] = 16.00000000000000000000;\n\n\n\nvar y = new Array();\ny[0] = 0.00000000000000000000;\ny[1] = 0.50395263067896967000;\ny[2] = 0.71269664509979835000;\ny[3] = 0.87287156094396945000;\ny[4] = 1.00790526135793930000;\ny[5] = 1.12687233963802200000;\ny[6] = 1.23442679969673530000;\ny[7] = 1.33333333333333330000;\ny[8] = 1.42539329019959670000;\ny[9] = 1.51185789203690880000;\ny[10] = 1.59363814577919150000;\ny[11] = 1.67142178807468980000;\ny[12] = 1.74574312188793890000;\ny[13] = 1.81702705031799170000;\ny[14] = 1.88561808316412670000;\ny[15] = 1.95180014589706640000;\ny[16] = 2.01581052271587870000;\ny[17] = 2.07784992659727900000;\ny[18] = 2.13808993529939520000;\ny[19] = 2.19667858946110380000;\ny[20] = 2.25374467927604400000;\ny[21] = 2.30940107675850290000;\ny[22] = 2.36374736114111530000;\ny[23] = 2.41687191246657520000;\ny[24] = 2.46885359939347060000;\ny[25] = 2.51976315339484810000;\ny[26] = 2.56966429775848400000;\ny[27] = 2.61861468283190830000;\ny[28] = 2.66666666666666650000;\ny[29] = 2.71386797119523940000;\ny[30] = 2.76026223736941700000;\ny[31] = 2.80588949764880670000;\ny[32] = 2.85078658039919340000;\ny[33] = 2.89498745782298350000;\ny[34] = 2.93852354676981160000;\ny[35] = 2.98142396999971960000;\ny[36] = 3.02371578407381760000;\ny[37] = 3.06542417893925380000;\ny[38] = 3.10657265339049320000;\ny[39] = 3.14718316987777280000;\ny[40] = 3.18727629155838300000;\ny[41] = 3.22687130401855570000;\ny[42] = 3.26598632371090410000;\ny[43] = 3.30463839483761390000;\ny[44] = 3.34284357614937950000;\ny[45] = 3.38061701891406630000;\ny[46] = 3.41797303712883060000;\ny[47] = 3.45492517089848670000;\ny[48] = 3.49148624377587780000;\ny[49] = 3.52766841475278750000;\ny[50] = 3.56348322549899170000;\ny[51] = 3.59894164336974940000;\ny[52] = 3.63405410063598340000;\ny[53] = 3.66883053033489940000;\ny[54] = 3.70328039909020570000;\ny[55] = 3.73741273720925400000;\ny[56] = 3.77123616632825340000;\ny[57] = 3.80475892484536750000;\ny[58] = 3.83798889135426350000;\ny[59] = 3.87093360626696680000;\ny[60] = 3.90360029179413280000;\ny[61] = 3.93599587043272870000;\ny[62] = 3.96812698209517300000;\ny[63] = 4.00000000000000000000;\n\n\nvar val;\nfor (i = 0; i < vnum; i++)\n{\n\tval = Math.sqrt(x[i]);\n\tif (!isEqual(val, y[i]))\n\t{\n\t\t$ERROR(\"\\nx = \" + x[i] + \"\\nlibc.sqrt(x) = \" + y[i] + \"\\nMath.sqrt(x) = \" + Math.sqrt(x[i]) + \"\\nMath.abs(libc.sqrt(x) - Math.sqrt(x)) > \" + prec + \"\\n\\n\"); \n\t}\n}\n",
    "id": "S15.8.2.17_A6"
   }
  ]
 }
}
