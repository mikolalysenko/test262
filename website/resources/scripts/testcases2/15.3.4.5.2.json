{
 "testCollection": {
  "name": "15.3.4.5.2",
  "numTests": 14,
  "tests": [
   {
    "id": "15.3.4.5.2-4-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-1.js",
    "description": "[[Construct]] - 'F''s [[BoundArgs]] is used as the former part of arguments of calling the [[Construct]] internal method of 'F''s [[TargetFunction]] when 'F' is called as constructor",
    "test": "assertTrue((function testcase() {\n        var func = function (x, y, z) {\n            var objResult = {};\n            objResult.returnValue = x + y + z;\n            objResult.returnVerifyResult = arguments[0] === \"a\" && arguments.length === 3;\n            return objResult;\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, \"a\", \"b\", \"c\");\n\n        var newInstance = new NewFunc();\n\n        return newInstance.hasOwnProperty(\"returnValue\") && newInstance.returnValue === \"abc\" &&\n            newInstance.hasOwnProperty(\"returnVerifyResult\") && newInstance.returnVerifyResult === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-10",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-10.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 0, length of 'ExtraArgs' is 1",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 1 && x === 1 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {});\n\n        var newInstance = new NewFunc(1);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-11",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-11.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 0, length of 'ExtraArgs' is 2",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 2 && x === 1 && arguments[1] === 2 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {});\n\n        var newInstance = new NewFunc(1, 2);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-12",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-12.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 1, length of 'ExtraArgs' is 0",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 1 && x === 1 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, 1);\n\n        var newInstance = new NewFunc();\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-13",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-13.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 1, length of 'ExtraArgs' is 1",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 2 && x === 1 && arguments[1] === 2 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, 1);\n\n        var newInstance = new NewFunc(2);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-14",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-14.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 2, length of 'ExtraArgs' is 0",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 2 && x === 1 && arguments[1] === 2 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, 1, 2);\n\n        var newInstance = new NewFunc();\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-2.js",
    "description": "[[Construct]] - the provided arguments is used as the latter part of arguments of calling the [[Construct]] internal method of 'F''s [[TargetFunction]] when 'F' is called as constructor",
    "test": "assertTrue((function testcase() {\n        var func = function (x, y, z) {\n            var objResult = {};\n            objResult.returnValue = x + y + z;\n            objResult.returnVerifyResult = arguments[0] === \"a\" && arguments.length === 3;\n            return objResult;\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {});\n\n        var newInstance = new NewFunc(\"a\", \"b\", \"c\");\n\n        return newInstance.hasOwnProperty(\"returnValue\") && newInstance.returnValue === \"abc\" &&\n            newInstance.hasOwnProperty(\"returnVerifyResult\") && newInstance.returnVerifyResult === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-3.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 0, length of 'ExtraArgs' is 0, and without 'boundThis'",
    "test": "assertTrue((function testcase() {\n        var func = function () {\n            return new Boolean(arguments.length === 0);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func);\n\n        var newInstance = new NewFunc();\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-4.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 0, length of 'ExtraArgs' is 1, and without 'boundThis'",
    "test": "assertTrue((function testcase() {\n        var func = function () {\n            return new Boolean(arguments[0] === 1 && arguments.length === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func);\n\n        var newInstance = new NewFunc(1);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-5.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 0, length of 'ExtraArgs' is 0, and with 'boundThis'",
    "test": "assertTrue((function testcase() {\n        var obj = { prop: \"abc\" };\n\n        try {\n            Object.prototype.verifyThis = \"verifyThis\";\n            var func = function () {\n                return new Boolean(arguments.length === 0 && Object.prototype.toString.call(this) === \"[object Object]\" &&\n                    this.verifyThis === \"verifyThis\");\n            };\n\n            var NewFunc = Function.prototype.bind.call(func, obj);\n\n            var newInstance = new NewFunc();\n\n            return newInstance.valueOf();\n        } finally {\n            delete Object.prototype.verifyThis;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-6",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-6.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 1, length of 'ExtraArgs' is 0",
    "test": "assertTrue((function testcase() {\n        var func = function () {\n            return new Boolean(arguments.length === 1 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, 1);\n\n        var newInstance = new NewFunc();\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-7",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-7.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 0, length of 'ExtraArgs' is 1",
    "test": "assertTrue((function testcase() {\n        var func = function () {\n            return new Boolean(arguments.length === 1 && arguments[0] === 1);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {});\n\n        var newInstance = new NewFunc(1);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-8",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-8.js",
    "description": "[[Construct]] - length of parameters of 'target' is 0, length of 'boundArgs' is 1, length of 'ExtraArgs' is 1",
    "test": "assertTrue((function testcase() {\n        var func = function () {\n            return new Boolean(arguments.length === 2 && arguments[0] === 1 && arguments[1] === 2);\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {}, 1);\n\n        var newInstance = new NewFunc(2);\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5.2-4-9",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5.2/15.3.4.5.2-4-9.js",
    "description": "[[Construct]] - length of parameters of 'target' is 1, length of 'boundArgs' is 0, length of 'ExtraArgs' is 0",
    "test": "assertTrue((function testcase() {\n        var func = function (x) {\n            return new Boolean(arguments.length === 0 && typeof x === \"undefined\");\n        };\n\n        var NewFunc = Function.prototype.bind.call(func, {});\n\n        var newInstance = new NewFunc();\n\n        return newInstance.valueOf() === true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   }
  ]
 }
}
