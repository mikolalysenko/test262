{
 "testCollection": {
  "name": "15.3.4.5",
  "numTests": 60,
  "tests": [
   {
    "id": "15.3.4.5-0-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-0-1.js",
    "description": "Function.prototype.bind must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = Function.prototype.bind;\n\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "15.3.4.5-0-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-0-2.js",
    "description": "Function.prototype.bind must exist as a function taking 1 parameter",
    "test": "assertTrue((Function.prototype.bind.length === 1));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-10-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-10-1.js",
    "description": "Function.prototype.bind - internal property [[Class]] of 'F' is set as Function",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        return Object.prototype.toString.call(obj) === \"[object Function]\";\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-11-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-11-1.js",
    "description": "Function.prototype.bind - internal property [[Prototype]] of 'F' is set as Function.prototype",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n        try {\n            Function.prototype.property = 12;\n            var obj = foo.bind({});\n\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-1.js",
    "description": "Function.prototype.bind, bound fn has a 'length' own property",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (bf.hasOwnProperty('length')) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-2.js",
    "description": "Function.prototype.bind, 'length' set to remaining number of expected args",
    "test": "assertTrue((function testcase() {\n  function foo(x, y) { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (bf.length === 2) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-3.js",
    "description": "Function.prototype.bind, 'length' set to remaining number of expected args (all args prefilled)",
    "test": "assertTrue((function testcase() {\n  function foo(x, y) { }\n  var o = {};\n  \n  var bf = foo.bind(o, 42, 101);\n  if (bf.length === 0) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-4.js",
    "description": "Function.prototype.bind, 'length' set to remaining number of expected args (target takes 0 args)",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (bf.length === 0) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-5.js",
    "description": "Function.prototype.bind, 'length' set to remaining number of expected args (target provided extra args)",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o, 42);\n  if (bf.length === 0) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-13.b-6",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-13.b-6.js",
    "description": "Function.prototype.bind, 'length' set to remaining number of expected args",
    "test": "assertTrue((function testcase() {\n    function foo(x, y) { }\n    var o = {};\n\n    var bf = foo.bind(o, 42);\n    if (bf.length === 1) {\n        return true;\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-15-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-15-1.js",
    "description": "Function.prototype.bind, 'length' is a data valued own property",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  var desc = Object.getOwnPropertyDescriptor(bf, 'length');\n  if (desc.hasOwnProperty('value') === true &&\n      desc.hasOwnProperty('get') === false &&\n      desc.hasOwnProperty('set') === false) {\n    return true;\n  }    \n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.3.4.5-15-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-15-2.js",
    "description": "Function.prototype.bind, 'length' is a data valued own property with default attributes (false)",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  var desc = Object.getOwnPropertyDescriptor(bf, 'length');\n  if (desc.value === 0 &&\n      desc.enumerable === false &&\n      desc.writable === false &&\n      desc.configurable == false) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.3.4.5-15-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-15-3.js",
    "description": "Function.prototype.bind - The [[Writable]] attribute of length property in F set as false",
    "test": "assertTrue((function testcase() {\n\n        var canWritable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"length\");\n        obj.length = 100;\n        canWritable = (obj.length === 100);\n        return hasProperty && !canWritable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-15-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-15-4.js",
    "description": "Function.prototype.bind - The [[Enumerable]] attribute of length property in F set as false",
    "test": "assertTrue((function testcase() {\n\n        var canEnumerable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"length\");\n        for (var prop in obj) {\n            if (prop === \"length\") {\n                canEnumerable = true;\n            }\n        }\n        return hasProperty && !canEnumerable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-15-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-15-5.js",
    "description": "Function.prototype.bind - The [[Configurable]] attribute of length property in F set as false",
    "test": "assertTrue((function testcase() {\n\n        var canConfigurable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"length\");\n        delete obj.caller;\n        canConfigurable = !obj.hasOwnProperty(\"length\");\n        return hasProperty && !canConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-16-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-16-1.js",
    "description": "Function.prototype.bind, [[Extensible]] of the bound fn is true",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  var ex = Object.isExtensible(bf);\n  if (ex === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.getOwnPropertyDescriptor))"
   },
   {
    "id": "15.3.4.5-16-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-16-2.js",
    "description": "Function.prototype.bind - The [[Extensible]] attribute of internal property in F set as true",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        obj.property = 12;\n        return obj.hasOwnProperty(\"property\");\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-1.js",
    "description": "Function.prototype.bind throws TypeError if the Target is not callable (but an instance of Function)",
    "test": "assertTrue((function testcase() {\n  foo.prototype = Function.prototype;\n  // dummy function\n  function foo() {}\n  var f = new foo();\n\n  try {\n    f.bind();\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-10",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-10.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is undefined",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call(undefined);\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        } \n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-11",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-11.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is NULL",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call(null);\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-12",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-12.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is a boolean",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call(true);\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        } \n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-13",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-13.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is a number",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call(5);\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-14",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-14.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is a string",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call(\"abc\");\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-15",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-15.js",
    "description": "Function.prototype.bind throws TypeError if 'Target' is Object without Call internal method",
    "test": "assertTrue((function testcase() {\n        try {\n            Function.prototype.bind.call({});\n            return false;\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-16",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-16.js",
    "description": "Function.prototype.bind - 'Target' is a function",
    "test": "assertTrue((function testcase() {\n        function testFunc() {}\n        try {\n            testFunc.bind();\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-2.js",
    "description": "Function.prototype.bind throws TypeError if the Target is not callable (bind attached to object)",
    "test": "assertTrue((function testcase() {\n  // dummy function \n  function foo() {}\n  var f = new foo();\n  f.bind = Function.prototype.bind;\n\n  try {\n    f.bind();\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-3.js",
    "description": "Function.prototype.bind allows Target to be a constructor (Number)",
    "test": "assertTrue((function testcase() {\n  var bnc = Number.bind(null);\n  var n = bnc(42);\n  if (n === 42) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-4.js",
    "description": "Function.prototype.bind allows Target to be a constructor (String)",
    "test": "assertTrue((function testcase() {\n  var bsc = String.bind(null);\n  var s = bsc(\"hello world\");\n  if (s === \"hello world\") {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-5.js",
    "description": "Function.prototype.bind allows Target to be a constructor (Boolean)",
    "test": "assertTrue((function testcase() {\n  var bbc = Boolean.bind(null);\n  var b = bbc(true);\n  if (b === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-6",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-6.js",
    "description": "Function.prototype.bind allows Target to be a constructor (Object)",
    "test": "assertTrue((function testcase() {\n  var boc = Object.bind(null);\n  var o = boc(42);\n  if (o == 42) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-7",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-7.js",
    "description": "Function.prototype.bind throws TypeError if the Target is not callable (JSON)",
    "test": "assertTrue((function testcase() {\n  try {\n    JSON.bind();\n  }\n  catch (e) {\n    if (e instanceof TypeError) {\n      return true;\n    }\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-8",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-8.js",
    "description": "Function.prototype.bind allows Target to be a constructor (Array)",
    "test": "assertTrue((function testcase() {\n        var bac = Array.bind(null);\n        var a = bac(42);\n        a.prop = \"verifyPropertyExist\";\n        a[41] = 41;\n\n        return a.prop === \"verifyPropertyExist\" && a[41] === 41 && a.length === 42;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-2-9",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-2-9.js",
    "description": "Function.prototype.bind allows Target to be a constructor (Date)",
    "test": "assertTrue((function testcase() {\n  var bdc = Date.bind(null);\n  var s = bdc(0, 0, 0);\n  if (typeof(s) === 'string') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-20-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-20-1.js",
    "description": "Function.prototype.bind - 'caller' is defined as one property of 'F'",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        return obj.hasOwnProperty(\"caller\");\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-20-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-20-2.js",
    "description": "Function.prototype.bind - [[Get]] attribute of 'caller' property in 'F' is thrower",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        try {\n            return obj.caller && false;\n        } catch (ex) {\n            return (ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-20-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-20-3.js",
    "description": "Function.prototype.bind - [[Set]] attribute of 'caller' property in  'F' is thrower",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        try {\n            obj.caller = 12;\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-20-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-20-4.js",
    "description": "Function.prototype.bind - The [[Enumerable]] attribute of 'caller' property in  'F' is false",
    "test": "assertTrue((function testcase() {\n\n        var canEnumerable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"caller\");\n        for (var prop in obj) {\n            if (prop === \"caller\") {\n                canEnumerable = true;\n            }\n        }\n        return hasProperty && !canEnumerable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-20-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-20-5.js",
    "description": "Function.prototype.bind - The [[Configurable]] attribute of 'caller' property in  'F' is false",
    "test": "assertTrue((function testcase() {\n\n        var canConfigurable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"caller\");\n        delete obj.caller;\n        canConfigurable = obj.hasOwnProperty(\"caller\");\n        return hasProperty && canConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-21-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-21-1.js",
    "description": "Function.prototype.bind - 'arguments' is defined as one property of 'F'",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        return obj.hasOwnProperty(\"arguments\");\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-21-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-21-2.js",
    "description": "Function.prototype.bind - [[Get]] attribute of 'arguments' property in  'F' is thrower",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        try {\n            return obj.arguments && false;\n        } catch (ex) {\n            return (ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-21-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-21-3.js",
    "description": "Function.prototype.bind - [[Set]] attribute of 'arguments' property in  'F' is thrower",
    "test": "assertTrue((function testcase() {\n\n        function foo() { }\n        var obj = foo.bind({});\n        try {\n            obj.arguments = 12;\n            return false;\n        } catch (ex) {\n            return (ex instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-21-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-21-4.js",
    "description": "Function.prototype.bind - The [[Enumerable]] attribute of 'arguments' property in  'F' is false",
    "test": "assertTrue((function testcase() {\n\n        var canEnumerable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"arguments\");\n        for (var prop in obj) {\n            if (prop === \"arguments\") {\n                canEnumerable = true;\n            }\n        }\n        return hasProperty && !canEnumerable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-21-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-21-5.js",
    "description": "Function.prototype.bind - The [[Configurable]] attribute of 'arguments' property in  'F' is false",
    "test": "assertTrue((function testcase() {\n\n        var canConfigurable = false;\n        var hasProperty = false;\n        function foo() { }\n        var obj = foo.bind({});\n        hasProperty = obj.hasOwnProperty(\"arguments\");\n        delete obj.caller;\n        canConfigurable = !obj.hasOwnProperty(\"arguments\");\n        return hasProperty && !canConfigurable;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-3-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-3-1.js",
    "description": "Function.prototype.bind - each arg is defined in A in list order",
    "test": "assertTrue((function testcase() {\n\n        var foo = function (x, y) {\n            return new Boolean((x + y) === \"ab\" && arguments[0] === \"a\" &&\n                arguments[1] === \"b\" && arguments.length === 2);\n        };\n\n        var obj = foo.bind({}, \"a\", \"b\");\n        return obj()==true;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-6-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-1.js",
    "description": "Function.prototype.bind - F can get own data property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        obj.property = 12;\n        return obj.property === 12;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-6-10",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-10.js",
    "description": "Function.prototype.bind - F can get own accessor property without a get function that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Object.defineProperty(Function.prototype, \"property\", {\n                get: function () {\n                    return 3;\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(obj, \"property\", {\n                set: function () { }\n            });\n            return typeof (obj.property) === \"undefined\";\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-11",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-11.js",
    "description": "Function.prototype.bind - F can get inherited accessor property without a get function",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Object.defineProperty(Function.prototype, \"property\", {\n                set: function () { },\n                configurable: true\n            });\n            return typeof (obj.property) === \"undefined\";\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-12",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-12.js",
    "description": "Function.prototype.bind - F cannot get property which doesn't exist",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        return typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-6-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-2.js",
    "description": "Function.prototype.bind - F can get inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Function.prototype.property = 12;\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-6-3",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-3.js",
    "description": "Function.prototype.bind - F can get own data property that overrides an inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n\n        try {\n            Function.prototype.property = 3;\n            obj.property = 12;\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-6-4",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-4.js",
    "description": "Function.prototype.bind - F can get own data property that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Object.defineProperty(Function.prototype, \"property\", {\n                get: function () {\n                    return 3;\n                },\n                configurable: true\n            });\n           \n            Object.defineProperty(obj, \"property\", {\n                value: 12\n            });\n\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-5",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-5.js",
    "description": "Function.prototype.bind - F can get own accessor property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        Object.defineProperty(obj, \"property\", {\n            get: function () {\n                return 12;\n            }\n        });\n        return obj.property === 12;\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-6",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-6.js",
    "description": "Function.prototype.bind - F can get inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Object.defineProperty(Function.prototype, \"property\", {\n                get: function () {\n                    return 12;\n                },\n                configurable: true\n            });\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-7",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-7.js",
    "description": "Function.prototype.bind - F can get own accessor property that overrides an inherited data property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Function.prototype.property = 3;\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return 12;\n                }\n            });\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-8",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-8.js",
    "description": "Function.prototype.bind - F can get own accessor property that overrides an inherited accessor property",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        try {\n            Object.defineProperty(Function.prototype, \"property\", {\n                get: function () {\n                    return 3;\n                },\n                configurable: true\n            });\n\n            Object.defineProperty(obj, \"property\", {\n                get: function () {\n                    return 12;\n                }\n            });\n            return obj.property === 12;\n        } finally {\n            delete Function.prototype.property;\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-6-9",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-6-9.js",
    "description": "Function.prototype.bind - F can get own accessor property without a get function",
    "test": "assertTrue((function testcase() {\n\n        var foo = function () { };\n\n        var obj = foo.bind({});\n        Object.defineProperty(obj, \"property\", {\n            set: function () {}\n        });\n        return obj.hasOwnProperty(\"property\") && typeof (obj.property) === \"undefined\";\n    }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.defineProperty))"
   },
   {
    "id": "15.3.4.5-8-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-8-1.js",
    "description": "Function.prototype.bind, type of bound function must be 'function'",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (typeof(bf) === 'function') {\n    return  true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-8-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-8-2.js",
    "description": "Function.prototype.bind, [[Class]] of bound function must be 'Function'",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  var s = Object.prototype.toString.call(bf);\n  if (s === '[object Function]') {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-9-1",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-9-1.js",
    "description": "Function.prototype.bind, [[Prototype]] is Function.prototype",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (Function.prototype.isPrototypeOf(bf)) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind))"
   },
   {
    "id": "15.3.4.5-9-2",
    "path": "TestCases/chapter15/15.3/15.3.4/15.3.4.5/15.3.4.5-9-2.js",
    "description": "Function.prototype.bind, [[Prototype]] is Function.prototype (using getPrototypeOf)",
    "test": "assertTrue((function testcase() {\n  function foo() { }\n  var o = {};\n  \n  var bf = foo.bind(o);\n  if (Object.getPrototypeOf(bf) === Function.prototype) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Function.prototype.bind) && fnExists(Object.getPrototypeOf))"
   }
  ]
 }
}
