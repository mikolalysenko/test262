{
 "testCollection": {
  "name": "15.2.3.13",
  "numTests": 36,
  "tests": [
   {
    "id": "15.2.3.13-0-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-0-1.js",
    "description": "Object.isExtensible must exist as a function",
    "test": "assertTrue((function testcase() {\n  var f = Object.isExtensible ;\n  if (typeof(f) === \"function\") {\n    return true;\n  }\n }).call(this));\n"
   },
   {
    "id": "15.2.3.13-0-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-0-2.js",
    "description": "Object.isExtensible must exist as a function taking 1 parameter",
    "test": "assertTrue((Object.isExtensible.length === 1));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-0-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-0-3.js",
    "description": "Object.isExtensible is true for objects created using the Object constructor",
    "test": "assertTrue((function testcase() {\n  var o = new Object();\n\n  if (Object.isExtensible(o) === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-1-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-1-1.js",
    "description": "Object.isExtensible throws TypeError if 'O' is undefined",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.isExtensible(undefined);\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-1-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-1-2.js",
    "description": "Object.isExtensible throws TypeError if 'O' is null",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.isExtensible(null);\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-1-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-1-3.js",
    "description": "Object.isExtensible throws TypeError if 'O' is a boolean",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.isExtensible(true);\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-1-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-1-4.js",
    "description": "Object.isExtensible throws TypeError if 'O' is a string",
    "test": "assertTrue((function testcase() {\n\n        try {\n            Object.isExtensible(\"abc\");\n        } catch (e) {\n            return (e instanceof TypeError);\n        }\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-1.js",
    "description": "Object.isExtensible throws TypeError if type of first param is not Object",
    "test": "assertTrue((function testcase() {\n    try {\n      Object.isExtensible(0);\n    }\n    catch (e) {\n      if (e instanceof TypeError) {\n        return true;\n      }\n    }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-1",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-1.js",
    "description": "Object.isExtensible returns true for all built-in objects (Global)",
    "test": "global = this;assertTrue((function testcase() {\n  // in non-strict mode, 'this' is bound to the global object.\n  var e = Object.isExtensible(this);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-10",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-10.js",
    "description": "Object.isExtensible returns true for all built-in objects (RegExp)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(RegExp);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-11",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-11.js",
    "description": "Object.isExtensible returns true for all built-in objects (Error)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Error);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-12",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-12.js",
    "description": "Object.isExtensible returns true for all built-in objects (JSON)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(JSON);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-13",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-13.js",
    "description": "Object.isExtensible returns true for all built-in objects (Function.constructor)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Function.constructor);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-14",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-14.js",
    "description": "Object.isExtensible returns true for all built-in objects (Function.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Function.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-15",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-15.js",
    "description": "Object.isExtensible returns true for all built-in objects (Array.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Array.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-16",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-16.js",
    "description": "Object.isExtensible returns true for all built-in objects (String.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(String.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-17",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-17.js",
    "description": "Object.isExtensible returns true for all built-in objects (Boolean.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Boolean.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-18",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-18.js",
    "description": "Object.isExtensible returns true for all built-in objects (Number.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Number.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-19",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-19.js",
    "description": "Object.isExtensible returns true for all built-in objects (Date.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Date.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-2",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-2.js",
    "description": "Object.isExtensible returns true for all built-in objects (Object)",
    "test": "assertTrue((function testcase() {\n  var o = {};\n  var e = Object.isExtensible(o);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-20",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-20.js",
    "description": "Object.isExtensible returns true for all built-in objects (RegExp.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(RegExp.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-21",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-21.js",
    "description": "Object.isExtensible returns true for all built-in objects (Error.prototype)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Error.prototype);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-22",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-22.js",
    "description": "Object.isExtensible returns true if 'O' is extensible",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        return Object.isExtensible(obj);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-23",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-23.js",
    "description": "Object.isExtensible returns false if 'O' is not extensible",
    "test": "assertTrue((function testcase() {\n\n        var obj = {};\n        Object.preventExtensions(obj);\n        return !Object.isExtensible(obj);\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.13-2-24",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-24.js",
    "description": "Object.isExtensible returns true if O is extensible and has a prototype that is extensible",
    "test": "assertTrue((function testcase() {\n       \n        var proto = {};\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var obj = new ConstructFun();\n\n        return Object.isExtensible(obj);\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-25",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-25.js",
    "description": "Object.isExtensible returns true if O is extensible and has a prototype that is not extensible",
    "test": "assertTrue((function testcase() {\n\n        var proto = {};\n        Object.preventExtensions(proto);\n      \n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var obj = new ConstructFun();\n\n        return Object.isExtensible(obj);\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.13-2-26",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-26.js",
    "description": "Object.isExtensible returns false if O is not extensible and has a prototype that is extensible",
    "test": "assertTrue((function testcase() {\n\n        var proto = {};\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n        var obj = new ConstructFun();\n\n        Object.preventExtensions(obj);\n\n        return !Object.isExtensible(obj);\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.13-2-27",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-27.js",
    "description": "Object.isExtensible returns false if O is not extensible and has a prototype that is not extensible",
    "test": "assertTrue((function testcase() {\n\n        var proto = {};\n        Object.preventExtensions(proto);\n\n        var ConstructFun = function () { };\n        ConstructFun.prototype = proto;\n\n        var obj = new ConstructFun();\n        Object.preventExtensions(obj);\n\n        return !Object.isExtensible(obj);\n\n    }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible) && fnExists(Object.preventExtensions))"
   },
   {
    "id": "15.2.3.13-2-29",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-29.js",
    "description": "Object.isExtensible returns true for the global object",
    "test": "assertTrue((Object.isExtensible(fnGlobalObject())));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-3",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-3.js",
    "description": "Object.isExtensible returns true for all built-in objects (Function)",
    "test": "assertTrue((function testcase() {\n  function foo() {}\n \n  var e = Object.isExtensible(foo);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-4",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-4.js",
    "description": "Object.isExtensible returns true for all built-in objects (Array)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Array);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-5",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-5.js",
    "description": "Object.isExtensible returns true for all built-in objects (String)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(String);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-6",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-6.js",
    "description": "Object.isExtensible returns true for all built-in objects (Boolean)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Boolean);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-7",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-7.js",
    "description": "Object.isExtensible returns true for all built-in objects (Number)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Number);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-8",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-8.js",
    "description": "Object.isExtensible returns true for all built-in objects (Math)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Math);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   },
   {
    "id": "15.2.3.13-2-9",
    "path": "TestCases/chapter15/15.2/15.2.3/15.2.3.13/15.2.3.13-2-9.js",
    "description": "Object.isExtensible returns true for all built-in objects (Date)",
    "test": "assertTrue((function testcase() {\n  var e = Object.isExtensible(Date);\n  if (e === true) {\n    return true;\n  }\n }).call(this));\n",
    "precondition": "(fnExists(Object.isExtensible))"
   }
  ]
 }
}
